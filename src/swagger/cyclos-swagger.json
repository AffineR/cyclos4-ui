{
  "swagger" : "2.0",
  "info" : {
    "description" : "The REST API for Cyclos 4.11",
    "version" : "4.11",
    "title" : "Cyclos 4.11 API"
  },
  "host" : "localhost:8888",
  "basePath" : "/api",
  "tags" : [ {
    "name" : "Auth",
    "description" : "Operations regarding the user authentication, such as login / logout,\nactivating / deactivating an access client and obtaining the current\nauthenticated user information.\n"
  }, {
    "name" : "Sessions",
    "description" : "Operations for administrators managing sessions of other users.\n"
  }, {
    "name" : "Captcha",
    "description" : "Generate new captcha challenges, which are required for some\noperations performed as guest, in order to make it harder for bots\nto abuse the api.  \n"
  }, {
    "name" : "Users",
    "description" : "User searching, registration and profile modification. Also provides\naccess to the user map directory.\n"
  }, {
    "name" : "Operators",
    "description" : "Operations over operators, which are users created by other users to\nmanage their data. \n"
  }, {
    "name" : "Phones",
    "description" : "Management of user phones, which is done separatedly from the raw user\nprofile fields.\n"
  }, {
    "name" : "Addresses",
    "description" : "Management of user addresses, which is done separatedly from the raw\nuser profile fields.\n"
  }, {
    "name" : "ContactInfos",
    "description" : "Management of user's additional contact information, which can either\nrepresent contact information for specific employees (e.g. a salesman)\nor distinct subsidiary offices of the same company.\n"
  }, {
    "name" : "Images",
    "description" : "Provides access to images of all kinds, for getting metadata, content\nand management operations.\n"
  }, {
    "name" : "Files",
    "description" : "Provides access to raw files, maily used to interact with custom\nfield values of type file.\n"
  }, {
    "name" : "Passwords",
    "description" : "Management of a user's passwords.\n"
  }, {
    "name" : "Contacts",
    "description" : "Management of a user contact list.\n"
  }, {
    "name" : "Agreements",
    "description" : "Provides access to agreements the authenticated user must accept in\norder to use the system\n"
  }, {
    "name" : "Accounts",
    "description" : "Provides access to account information, such as the status (balance,\ncredit limit and so on) and account history (list of balance transfers\nbetween accounts).\n"
  }, {
    "name" : "Transfers",
    "description" : "Provides access to balance transfers (also called transfers).\nA transfer represents the actual and definitive transfer of funds\nbetween two accounts.\n"
  }, {
    "name" : "Transactions",
    "description" : "Provides access to transactions.  A transaction is an intent to transfer balance between accounts. A transaction will generate zero or more balance transfers between accounts. For example, a direct payment beween 2 users can initially be pending administration authorization. Until it is authorized, no transfer will be generated. Once authorized, a transfer will be created. Another kind of transaction, a scheduled payment, will generate one transfer per processed installment. The kinds of transactions are:\n      \n- **Direct payment**: A simple payment from / to a user or system\n  account. Depending on the configuration, can require authorization\n  to be processed. \n- **Scheduled payment**: A payment processed either on a single future\n  date or in several installments. Depending on the configuration, can\n  require authorization to be processed.\n- **Recurring payment**: A payment which is repeated for a fixed number\n  of occurrences or until manually canceled. Depending on the\n  configuration, can require authorization to be processed.\n- **Chargeback**: A chargeback triggers a transfer with the same origin\n  and destination as an original transfer, but with negative amount,\n  effectively returning the balance to the original account.\n- **Payment request**: A payment filled-in by the payee. Once the payer\n  accepts the payment, either a direct or scheduled payment is created\n  (which could, depending on the configuration, be pending\n  authorization).\n- **External payment**: A payment to a user not yet registered on the\n  system. The payment amount is reserved to either an e-mail address or\n  mobile phone number. Once a user registers using either data, the\n  payment will be performed.  \n- **Import**: A transaction was imported from file.\n- **Ticket**: A payment filled-in by the payee but without a defined payer.\n  Once a user accepts (i.e the payer) the ticket, a direct payment is \n  created (which could, depending on the configuration, be pending by\n  authorization).\n- **Order**: Payment generated by confirming a webshop order. Depending on\n  the configuration, can require authorization to be processed.  \n"
  }, {
    "name" : "Payments",
    "description" : "Provides access for performing payments or scheduled payments.\n"
  }, {
    "name" : "ScheduledPayments",
    "description" : "Provides actions specific to scheduled payments and installments.\nPerforming a scheduled payment is done via `Payments`, while searching\nor viewing details, via `Transactions`.\n"
  }, {
    "name" : "RecurringPayments",
    "description" : "Provides actions specific to recurring payments and their occurrences.\nPerforming a recurring payment is done via `Payments`, while searching\nor viewing details, via `Transactions`.\n"
  }, {
    "name" : "PendingPayments",
    "description" : "Provides actions for payments that are still pending authorization.\n"
  }, {
    "name" : "PaymentRequests",
    "description" : "Provide access to payment requests. A payment request is created by the \npayee with a defined payer. Once the payer (i.e the request's recipient) \naccepts the request, either a direct or scheduled payment is created\n(which could, depending on the configuration, be pending authorization).\n"
  }, {
    "name" : "POS",
    "description" : "Provides access for receiving payments or scheduled payments in\nPoint-Of-Sale (POS) operations.\n"
  }, {
    "name" : "Clients",
    "description" : "Access clients provide a token for user authentication without\ndecoupled from the login name and password. \n"
  }, {
    "name" : "Vouchers",
    "description" : "Vouchers are the way by which a user (possibly external) can buy at \nplaces that  accept payments in Cyclos.  \n"
  }, {
    "name" : "Tickets",
    "description" : "Provide access to tickets. A ticket represents a payment with a\ndestinatary but possibly without a defined payer. They allow to a user\n(e.g a shop) generate a ticket for himself and send it to another user\nto allow pay it.       \n"
  }, {
    "name" : "Mobile",
    "description" : "Contains operations used by the Cyclos mobile application. Unlike others,\nthese operations aren't meant to be generic, and this API can change\nwithout further notice. \n"
  }, {
    "name" : "Notifications",
    "description" : "Provides access to the notifications the authenticated user has received. \n"
  }, {
    "name" : "Records",
    "description" : "Provides access to custom records\n"
  }, {
    "name" : "Operations",
    "description" : "Provides access to custom operations\n"
  }, {
    "name" : "Marketplace",
    "description" : "Provides access to the marketplace, that is, searching or managing advertisements, questions, shopping cart support and searching orders.\n \nCurrently both `simple` and `webshop` have  support for searching, but only simple advertisements can be managed via  this API. Also only order creation through the shopping cart check-out but not as sales (i.e orders created by seller).\n"
  }, {
    "name" : "NFC",
    "description" : "Contains operations regarding NFC tags\n"
  }, {
    "name" : "Push",
    "description" : "Provides a way for clients to subscribe for push notifications\n"
  }, {
    "name" : "UI",
    "description" : "Provides data used to create alternative user interfaces\n"
  }, {
    "name" : "Validation",
    "description" : "Provides access to complete pending actions waiting for validation.      \n"
  } ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/accounts/data-for-user-balances" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Returns data for searching users together with their balances",
        "description" : "Returns configuration data for searching users together with their\nbalances. The account types are returned, and the account type needs\nto be passed in the other `user-balances` operations.\n",
        "operationId" : "getUserBalancesData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for searching users with balances",
            "schema" : {
              "$ref" : "#/definitions/DataForUserBalancesSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/accounts/{accountType}/user-balances" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Searches for users together with balance information",
        "description" : "Returns the users, together with their balances\n",
        "operationId" : "searchUsersWithBalances",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accountType",
          "in" : "path",
          "description" : "The account type\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "activationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none", "primary" ],
          "x-type" : "UserAddressResultEnum"
        }, {
          "name" : "balanceRange",
          "in" : "query",
          "description" : "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "description" : ""
          }
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either id or a principal (login name, e-mail, etc) for brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either id or internal names of groups / group sets\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGroup",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroupSet",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastIncomingTransferPeriod",
          "in" : "query",
          "description" : "The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "lastLoginPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "lastOutgoingTransferPeriod",
          "in" : "query",
          "description" : "The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mainBrokerOnly",
          "in" : "query",
          "description" : "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mediumBalanceRange",
          "in" : "query",
          "description" : "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "description" : ""
          }
        }, {
          "name" : "negativeSincePeriod",
          "in" : "query",
          "description" : "The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Contains the possible 'order by' values when searching for users with balances  Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* balanceAsc: User are ordered by balance, lower balances first.\n* balanceDesc: User are ordered by balance, higher balances first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "balanceAsc", "balanceDesc" ],
          "x-type" : "UsersWithBalanceOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToExclude",
          "in" : "query",
          "description" : "Indicated the users to be excluded from the result\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToInclude",
          "in" : "query",
          "description" : "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The users together with their balances",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserWithBalanceResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/accounts/{accountType}/user-balances/summary" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Returns summarized information for the user balances search",
        "description" : "Returns summaries for each balance level (if ranges are defined in either\naccount type or filter), as well as the total summary.\n",
        "operationId" : "getUserBalancesSummary",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accountType",
          "in" : "path",
          "description" : "The account type\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "activationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none", "primary" ],
          "x-type" : "UserAddressResultEnum"
        }, {
          "name" : "balanceRange",
          "in" : "query",
          "description" : "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "description" : ""
          }
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either id or a principal (login name, e-mail, etc) for brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either id or internal names of groups / group sets\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGroup",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroupSet",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastIncomingTransferPeriod",
          "in" : "query",
          "description" : "The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "lastLoginPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "lastOutgoingTransferPeriod",
          "in" : "query",
          "description" : "The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mainBrokerOnly",
          "in" : "query",
          "description" : "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mediumBalanceRange",
          "in" : "query",
          "description" : "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "description" : ""
          }
        }, {
          "name" : "negativeSincePeriod",
          "in" : "query",
          "description" : "The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToExclude",
          "in" : "query",
          "description" : "Indicated the users to be excluded from the result\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToInclude",
          "in" : "query",
          "description" : "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The summary of user balances matching the parameters",
            "schema" : {
              "$ref" : "#/definitions/UsersWithBalanceSummary"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/addresses/countries" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Lists all known countries with the ISO code and display name",
        "description" : "The country code is the 2-letter, `ISO 3166-1 alpha-2` code, and the\ndisplay name is returned in the authenticated user's language \n",
        "operationId" : "listCountries",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The list of countries\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Country"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/addresses/{id}" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns details of a specific address",
        "description" : "Returns information about an address, located by id",
        "operationId" : "viewAddress",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The address data",
            "schema" : {
              "$ref" : "#/definitions/AddressView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Addresses" ],
        "summary" : "Updates an existing address",
        "description" : "Updates an existing address",
        "operationId" : "updateAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "address",
          "description" : "The address to be edited",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddressEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The address was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Addresses" ],
        "summary" : "Removes an address",
        "description" : "Removes an address",
        "operationId" : "deleteAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The address was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/addresses/{id}/data-for-edit" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns data to edit an existing address",
        "description" : "Returns configuration data for editing an address, plus the current\nAddressEdit object that can be altered and sent back\n",
        "operationId" : "getAddressDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing an address",
            "schema" : {
              "$ref" : "#/definitions/AddressDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/addresses/{id}/password-for-remove" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns a confirmation `PasswordInput` for removing an address, if any \n",
        "description" : "If a confirmation password is required to remove an address, clients should invoke this operation prior to effectively removing the address, which will return the data regarding the confirmation password. \n",
        "operationId" : "getPasswordInputForRemoveAddress",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The confirmation password input, or null",
            "schema" : {
              "$ref" : "#/definitions/PasswordInput"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/agreements/accept" : {
      "post" : {
        "tags" : [ "Agreements" ],
        "summary" : "Accept one or more agreements",
        "description" : "Accept all the given agreements \n",
        "operationId" : "acceptPendingAgreement",
        "parameters" : [ {
          "name" : "agreements",
          "in" : "query",
          "description" : "The identifiers or internal names of the agreements to be accepted\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The agreements were accepted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/agreements/pending" : {
      "get" : {
        "tags" : [ "Agreements" ],
        "summary" : "Returns the agreements the authenticated user needs to accept in\norder to use the system\n",
        "description" : "Returns a list with all agreements the authenticated user is pending\nto accept. Until accepting the pending agreements, the usage of the\nsystem is limited. \n",
        "operationId" : "listPendingAgreements",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of agreements, or empty if there are no pending agreements\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Agreement"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns data about the currently authenticated user",
        "description" : "Returns the logged user information.\n",
        "operationId" : "getCurrentAuth",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object containing the authenticated user information\n",
            "schema" : {
              "$ref" : "#/definitions/Auth"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/access-client" : {
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Disconnect the current access client",
        "description" : "Changes the status of the access client used for authentication,\ndisconnecting it. To be reused, it has to be activated again.\n",
        "operationId" : "disconnectCurrentClient",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The access client was disconnected"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/data-for-login" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns data containing the configuration for logging-in",
        "description" : "Contains data useful for login, such as the allowed user identification\nmethods, the password type and data for the forgot password request.\n",
        "operationId" : "getDataForLogin",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Data for the login functionality",
            "schema" : {
              "$ref" : "#/definitions/DataForLogin"
            }
          },
          "204" : {
            "description" : "If there is an authenticated user already"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/forgotten-password" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Changes the a forgotten password after have completed the request\n",
        "description" : "Changes the password (if manual), or sends a new one by e-mail (if generated) after the forgotten password reset process is completed. \n",
        "operationId" : "changeForgottenPassword",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for changing the password",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeForgottenPassword"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is changed (if manual) or reset and sent by e-mail (if\ngenerated) and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "There was an error when changing the forgotten password",
            "schema" : {
              "$ref" : "#/definitions/ForgottenPasswordError"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/forgotten-password/data-for-change" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns configuration data used to change a forgotten password after\nthe initial request\n",
        "description" : "After the user has requested a forgotten password reset, using the `POST /auth/forgotten-password/request` path, the link on the received e-mail will contain a key which can be used to actually change the password. This key must be passed to this operation in order to request input on the new password, and maybe confirm the security question, depending on the Cyclos configuration. \n",
        "operationId" : "getDataForChangeForgottenPassword",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "The validation key which was sent by e-mail to the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for proceeding with the forgot password reset\n",
            "schema" : {
              "$ref" : "#/definitions/DataForChangeForgottenPassword"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/forgotten-password/request" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Requests a forgotten password, notifying the user with instructions\nto reset it\n",
        "description" : "Sends an e-mail (in the future SMS will be supported) with instructions on how to reset the password, in case it was forgotten. In order to work, the Cyclos configuration options, both to show the forgotten password link and to enable for users need to be set.\n",
        "operationId" : "forgottenPasswordRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for requesting a forgotten password reset",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ForgottenPasswordRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The password e-mail is sent and nothing is returned\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/otp" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Generates a new One-Time-Password (OTP) for the authenticated user",
        "description" : "Sends a new OTP for the authenticated user. Used when the confirmation password of a specific action. Used when `PasswordInput.mode` is `otp`. \n",
        "operationId" : "newOtp",
        "parameters" : [ {
          "name" : "medium",
          "in" : "query",
          "description" : "The medium the user wants to receive the OTP Possible values are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "email", "sms" ],
          "x-type" : "SendMediumEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The OTP is sent to the user, and the e-mail or list of normalized\nmobile phone numbers that received the OTP are returned.\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "There was an error when generating the OTP",
            "schema" : {
              "$ref" : "#/definitions/OtpError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/session" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Logs-in the currently authenticated user",
        "description" : "Logs-in the currently authenticated user, returning the session token.\nThis token can then be used on subsequent requests. After finishing\nthe session, the user can then logout by sending an HTTP DELETE to /auth.\n",
        "operationId" : "login",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "cookie",
          "in" : "query",
          "description" : "If true then the server add the `Session-Token` cookie to the response \ncontaining only the second half of the session token.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "timeoutInSeconds",
          "in" : "query",
          "description" : "The timeout in seconds for the created session. If this value is not\ngiven or it is greater than that for the channel then the timeout \nfor the channel will be used.\n",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the authenticated user. Is the same data returned\non GET /auth\n",
            "schema" : {
              "$ref" : "#/definitions/Auth"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Log-out the current session",
        "description" : "Invalidates the session used for authentication",
        "operationId" : "logout",
        "parameters" : [ {
          "name" : "cookie",
          "in" : "query",
          "description" : "If true then the server add the `Session-Token` cookie with a null value\nto erase it. \n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "The session was invalidated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "session" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/auth/session/secondary-password" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns the data for a secondary access password input",
        "description" : "Returns the data for a secondary access password input. Only if there is secondary access password configured for the channel.\n",
        "operationId" : "getSecondaryPasswordInput",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Data for a secondary access password input",
            "schema" : {
              "$ref" : "#/definitions/PasswordInput"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "session" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Validates the current pending session",
        "description" : "Validates a pending session using the secondary access password (if any) configured for the current channel.\n",
        "operationId" : "validateSecondaryPassword",
        "parameters" : [ {
          "in" : "body",
          "name" : "password",
          "description" : "The secondary access password\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The session was validated correctly and the user has logged in \nsuccessfully. \n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "session" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/captcha" : {
      "post" : {
        "tags" : [ "Captcha" ],
        "summary" : "Returns a new captcha challenge",
        "description" : "Only allowed when internal captchas are in use. \n",
        "operationId" : "newCaptcha",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "group",
          "in" : "query",
          "description" : "On public / user registration, it is possible to specify a\ndestination group, so the captcha background image will be taken\nfrom this new group's configured theme.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "A new captcha challenge has been created. The captcha id is\nreturned on the body\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for the image to get the captcha challenge"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/captcha/{id}" : {
      "get" : {
        "tags" : [ "Captcha" ],
        "summary" : "Returns a captcha image content",
        "description" : "Returns the image content of a captcha text. When neither `width` nor `height` are specified, returns the original size. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used. \n",
        "operationId" : "getCaptchaContent",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "On public / user registration, it is possible to specify a\ndestination group, so the captcha background image will be taken\nfrom this new group's configured theme.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "The requested image width",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The requested file height",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/clients/activate" : {
      "post" : {
        "tags" : [ "Clients" ],
        "summary" : "Activates an access client",
        "description" : "Activates an access client belonging to the currently authenticated user.\n",
        "operationId" : "activateClient",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "description" : "The activation code. Must match the activation code obtained in\nCyclos, which belongs to the authenticated user.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "A prefix to be added to the generated access client token. Can be\nused to increase the size of the generated token, and to increase\nthe security on clients that have to store the token. This can be\naccomplished by using some sort of client application hash or\nidentifier, which should be stable. The prefix is not returned by\nthis method. When later passing in the full token, the prefix should\nprepend the returned token without any separator.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the token to be used on subsequent requests\n",
            "schema" : {
              "$ref" : "#/definitions/ActivateClientResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/clients/{key}" : {
      "get" : {
        "tags" : [ "Clients" ],
        "summary" : "Returns details of an access client",
        "description" : "Returns the access client details, together with permissions\n",
        "operationId" : "viewClient",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "The access client id or token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The access client details\n",
            "schema" : {
              "$ref" : "#/definitions/ClientView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/clients/{key}/unassign" : {
      "post" : {
        "tags" : [ "Clients" ],
        "summary" : "Unassign (disconnects) an access client",
        "description" : "Unassigns an access client by id or token. It must be currently assigned. After this call, the client can be assigned again if needed.\n",
        "operationId" : "unassignClient",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The access client id or token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Nothing is returned, and the access client is unassigned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-infos/{id}" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Returns details of a specific additional contact information",
        "description" : "Returns information about an additional contact information by id\n",
        "operationId" : "viewContactInfo",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The additional contact information data",
            "schema" : {
              "$ref" : "#/definitions/ContactInfoView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Updates an existing additional contact information",
        "description" : "Updates an existing additional contact information",
        "operationId" : "updateContactInfo",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "contactInfo",
          "description" : "The additional contact information to be edited",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContactInfoEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The additional contact information was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Removes an existing additional contact information",
        "description" : "Removes an existing additional contact information",
        "operationId" : "deleteContactInfo",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The additional contact information was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-infos/{id}/data-for-edit" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Returns data to edit an existing additional contact information",
        "description" : "Returns configuration data for editing an additional contact\ninformation, plus the current ContactInfoEdit object that can be altered\nand posted back.\n",
        "operationId" : "getContactInfoDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing an contactInfo",
            "schema" : {
              "$ref" : "#/definitions/ContactInfoDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-infos/{id}/image" : {
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Uploads a new image for the given additional contact information.\n",
        "description" : "Saves the given image for the additional contact information.\nIf the given additional contact information already has an image, the\nold one is removed, and the current image is saved in its place.\n",
        "operationId" : "uploadContactInfoImage",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new image. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "image",
          "in" : "formData",
          "description" : "The image being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The image is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the image content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/contact-infos/{id}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the given additional contact information\n",
        "description" : "Returns the custom operations the authenticated user can run over the given additional contact iformation. All returned operations have the scope `contactInfo`.\n",
        "operationId" : "listOperationsByContactInfo",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-infos/{id}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over an\nadditional contact information\n",
        "description" : "Returns data to run a specific custom operation over an additional\ncontact information.\nThe operation scope must be `contactInfo`. \n",
        "operationId" : "getContactInfoOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-infos/{id}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over an additional contact information\n",
        "description" : "Runs a specific custom operation over a given additional contact information. The operation scope must be `contactInfo`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runContactInfoOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/contact-infos/{id}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over an additional contact information while\nuploading a file\n",
        "description" : "Runs a specific custom operation over a given additional contact information. The operation scope must be `contactInfo`. This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runContactInfoOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/contact-infos/{id}/password-for-remove" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Returns a confirmation `PasswordInput` for removing an additional\ncontact information, if any \n",
        "description" : "If a confirmation password is required to remove an additiona contact infomation, clients should invoke this operation prior to effectively removing it, which will return the data regarding the confirmation password. \n",
        "operationId" : "getPasswordInputForRemoveContactInfo",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The confirmation password input, or null",
            "schema" : {
              "$ref" : "#/definitions/PasswordInput"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-list/{id}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Returns details of a specific contact",
        "description" : "Returns information about a contact, located by id",
        "operationId" : "viewContact",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The contact data",
            "schema" : {
              "$ref" : "#/definitions/ContactView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Updates an existing contact",
        "description" : "Updates an existing contact",
        "operationId" : "updateContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "contact",
          "description" : "The contact to be edited",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContactEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The contact was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Removes a contact",
        "description" : "Removes a contact",
        "operationId" : "deleteContact",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The contact was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-list/{id}/data-for-edit" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Returns data to edit an existing contact",
        "description" : "Returns configuration data for editing a contact, plus the current `ContactEdit` object that can be altered and sent back\n",
        "operationId" : "getContactDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing a contact",
            "schema" : {
              "$ref" : "#/definitions/ContactDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-list/{id}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the given contact",
        "description" : "Returns the custom operations the authenticated user can run over the\ngiven contact. All returned operations have the scope\n`contact`.\n",
        "operationId" : "listOperationsByContact",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-list/{id}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over a\ncontact\n",
        "description" : "Returns data to run a specific custom operation over a contact.\nThe operation scope must be `contact`. \n",
        "operationId" : "getContactOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/contact-list/{id}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over a contact",
        "description" : "Runs a specific custom operation over a given contact. The operation scope must be `contact`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runContactOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/contact-list/{id}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over an contact while uploading a file\n",
        "description" : "Runs a specific custom operation over a given contact. The operation scope must be `contact`. This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runContactOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/contactInfos/{id}/image" : {
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "This operation is deprecated, use `POST /contact-infos/{id}/image` instead.",
        "description" : "Saves the given image for the additional contact information.\nIf the given additional contact information already has an image, the\nold one is removed, and the current image is saved in its place.\n",
        "operationId" : "uploadContactInfoImageDeprecated",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new image. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "image",
          "in" : "formData",
          "description" : "The image being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The image is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the image content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.13,
        "x-deprecated" : "Use `POST /contact-infos/{id}/image`",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/files/temp" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Lists temporary files related to the currently authenticated user or guest\n",
        "description" : "Returns all uploaded temporary files by the current user, or guest key.\nIf the current request is as guest and no guest key is given, the IP\naddress is used to match files. Using a key is recommended, because\nclients that move between WiFi and mobile connection or if the\nclient is in a network with multiple outbound IP addresses, files\nwon't be correctly matched without a key. \n",
        "operationId" : "listTempFiles",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "guestKey",
          "in" : "query",
          "description" : "This parameter is only taken into account if the current request\nis running as guest. It is the key passed by the client when\nuploading files. If no key is given, files are matched by\nremote address. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customField",
          "in" : "query",
          "description" : "If the temp file will be used as the value of a custom field of type file then the corresponding custom field\nmust be given (id or internal name). Otherwise this paremeter will be ignored. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFieldKind",
          "in" : "query",
          "description" : "If a custom field is given then its kind must be given too to allow find it. Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "contact", "contactInfo", "custom_operation", "document", "marketplace", "record", "transaction", "user" ],
          "x-type" : "CustomFieldKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of files",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/StoredFile"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "Adds a new temporary file for the currently authenticated user or guest.\n",
        "description" : "Uploads a new temporary file. The returned id can later be used as value of a custom field of type file.\n",
        "operationId" : "uploadTempFile",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new file. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "guestKey",
          "in" : "query",
          "description" : "This parameter is only taken into account if the current request\nis running as guest. It should be a reasonably unique key (for\nexample, an UUID, device identifier or a reasonably large random\nstring) which uniquely identifies the uploaded file as belonging\nto this \"session\". If no key is given, files uploaded as guest\nare matched by IP address. Using a key is recommended, because\nclients that move between WiFi and mobile connection or if the\nclient is in a network with multiple outbound IP addresses, files\nwon't be correctly matched without a key.  \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customField",
          "in" : "query",
          "description" : "If the temp file will be used as the value of a custom field of type file then the corresponding custom field\nmust be given (id or internal name). Otherwise this paremeter will be ignored. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFieldKind",
          "in" : "query",
          "description" : "If a custom field is given then its kind must be given too to allow find it. Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "contact", "contactInfo", "custom_operation", "document", "marketplace", "record", "transaction", "user" ],
          "x-type" : "CustomFieldKind"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The file is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the file content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/files/{id}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Returns a file details by id",
        "description" : "Returns metadata about a file given its id",
        "operationId" : "viewRawFile",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The file details",
            "schema" : {
              "$ref" : "#/definitions/StoredFile"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Files" ],
        "summary" : "Removes a file by id",
        "description" : "Removes the file with id",
        "operationId" : "deleteRawFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The file was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/files/{id}/content" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Returns the content of a raw file (temp or custom field value)",
        "description" : "Returns the content of either a temporary or a custom field value file\n",
        "operationId" : "getRawFileContent",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The file identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The file content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/general-records/record-types" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Lists the record types for general search",
        "description" : "Returns the record types the authenticated user can use to search records\nin general, that is, without being of a particular user, but any managed\nuser. \n",
        "operationId" : "listRecordTypesForGeneralSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of visible record types\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RecordTypeWithMenu"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/general-records/{type}" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Searches for records of a specific type over any owner",
        "description" : "Returns records matching the search criteria, for a specific type. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions).\n",
        "operationId" : "searchGeneralRecords",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either the ids or identification methods of record owners' brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum record creation date\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either the ids or internal names of record owners' groups\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RecordWithOwnerResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/general-records/{type}/data-for-search" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns data for searching records of a type over any owner",
        "description" : "Returns data for searching records of a specific type over any owner. Is not tied to a particular owner (user or system), hence, is considered a general search. \n",
        "operationId" : "getRecordDataForGeneralSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records of this type\n",
            "schema" : {
              "$ref" : "#/definitions/GeneralRecordsDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/images/content/{idOrKey}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Returns an image content by id or key",
        "description" : "Returns the content of an image, given the image identifier or key.\nWhen neither `width` nor `height` are specified, returns the original\ncontent. The original ratio is always maintained. When only of one of \nthe dimensions is specified, it is used as maximum, and the other is\ncalculated. When both are informed, the maximum size with the original\nratio that fits both dimensions is used. \n",
        "operationId" : "getImageContent",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "idOrKey",
          "in" : "path",
          "description" : "The image id or file name",
          "required" : false,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "The requested image width",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The requested file height",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/images/temp" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Lists temporary images related to the currently authenticated user or guest\n",
        "description" : "Returns all uploaded temporary images by the current user, or guest key.\nIf the current request is as guest and no guest key is given, the IP\naddress is used to match images. Using a key is recommended, because\nclients that move between WiFi and mobile connection or if the\nclient is in a network with multiple outbound IP addresses, images\nwon't be correctly matched without a key. \n",
        "operationId" : "listTempImages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "target",
          "in" : "query",
          "description" : "The possible targets for a temporary image Possible values are:\n* advertisement: The image will be used for an advertisement of a specific user\n* contactInfo: The image will be used for an additional contact information of a specific user\n* customValue: The image will be used for a value of a specific custom field\n* userProfile: The image will be used as a profile image for an existing user\n* userRegistration: The image will be used as a profile image for a newly registered user\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "advertisement", "contactInfo", "customValue", "userProfile", "userRegistration" ],
          "x-type" : "TempImageTargetEnum"
        }, {
          "name" : "guestKey",
          "in" : "query",
          "description" : "This parameter is only taken into account if the current request\nis running as guest. It is the key passed by the client when\nuploading images. If no key is given, images are matched by\nremote address.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "If the target is `userProfile` or\n`advertisement`, must be either the id or\nan identification method of the target user (or advertisement\nowner).\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customField",
          "in" : "query",
          "description" : "If the temp image will be used as the value of a custom field of\ntype image then the corresponding custom field must be given (id or\ninternal name). Otherwise this paremeter will be ignored. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFieldKind",
          "in" : "query",
          "description" : "If a custom field is given then its kind must be given too to allow find it.  Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "contact", "contactInfo", "custom_operation", "document", "marketplace", "record", "transaction", "user" ],
          "x-type" : "CustomFieldKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of images\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Image"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Adds a new temporary image for the currently authenticated user or guest.\n",
        "description" : "Uploads a new temporary image. A temporary image should be given a target, which can be: - `userRegistration`: The image will be used as a profile image for a newly registered user; - `userProfile`: The image will be used as a profile image for an existing user; - `advertisement`: The image will be used for an advertisement of a specific user; - `customValue`: The image will be used for a value of a specific custom field.\nTemporary images won't be immediately associated to the next registered model, but its `id`, which is returned by this operation, must be explicitly passed in, either as the `images` field (for profile or advertisement images) or in the `customValues` field of the model that has custom values (multiple ids can be passed-in as pipe-separated).\nImages as guest can only be uploaded if on the destination group products the image profile field is allowed at registrations. Users may upload images if they can register new users or create advertisements.\n",
        "operationId" : "uploadTempImage",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new image. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "target",
          "in" : "query",
          "description" : "The possible targets for a temporary image Possible values are:\n* advertisement: The image will be used for an advertisement of a specific user\n* contactInfo: The image will be used for an additional contact information of a specific user\n* customValue: The image will be used for a value of a specific custom field\n* userProfile: The image will be used as a profile image for an existing user\n* userRegistration: The image will be used as a profile image for a newly registered user\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "advertisement", "contactInfo", "customValue", "userProfile", "userRegistration" ],
          "x-type" : "TempImageTargetEnum"
        }, {
          "name" : "guestKey",
          "in" : "query",
          "description" : "This parameter is only taken into account if the current request\nis running as guest. It should be a reasonably unique key (for\nexample, an UUID, device identifier or a reasonably large random\nstring) which uniquely identifies the uploaded image as belonging\nto this \"session\". If no key is given, images uploaded as guest\nare matched by IP address. Using a key is recommended, because\nclients that move between WiFi and mobile connection or if the\nclient is in a network with multiple outbound IP addresses, images\nwon't be correctly matched without a key.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "If the target is `userProfile` or\n`advertisement`, must be either the id or\nan identification method of the target user (or advertisement\nowner).\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customField",
          "in" : "query",
          "description" : "If the temp image will be used as the value of a custom field of\ntype image then the corresponding custom field must be given (id or\ninternal name). Otherwise this paremeter will be ignored. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFieldKind",
          "in" : "query",
          "description" : "If a custom field is given then its kind must be given too to allow find it. Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "contact", "contactInfo", "custom_operation", "document", "marketplace", "record", "transaction", "user" ],
          "x-type" : "CustomFieldKind"
        }, {
          "name" : "image",
          "in" : "formData",
          "description" : "The image being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The image is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the image content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/images/{idOrKey}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Returns an image details by id or key",
        "description" : "Returns metadata about an image given its identifier or key",
        "operationId" : "viewImage",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "idOrKey",
          "in" : "path",
          "description" : "The image id or file name",
          "required" : false,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The image details",
            "schema" : {
              "$ref" : "#/definitions/ImageView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Images" ],
        "summary" : "Removes an image by id or key",
        "description" : "Removes the image with the given internal id or key. Any image kind can be removed using this operation, but the authenticated user needs the appropriate permission to do so. \n",
        "operationId" : "deleteImage",
        "parameters" : [ {
          "name" : "idOrKey",
          "in" : "path",
          "description" : "The image id or file name",
          "required" : false,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "The image was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/images/{id}/content" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "(deprecated) Returns an image content by id",
        "description" : "Returns the content of an image, given the image id.\nWhen neither `width` nor `height` are specified, returns the original\ncontent. The original ratio is always maintained. When only of one of \nthe dimensions is specified, it is used as maximum, and the other is\ncalculated. When both are informed, the maximum size with the original\nratio that fits both dimensions is used. \n",
        "operationId" : "getImageContentById",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "The requested image width",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The requested file height",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.13,
        "x-deprecated" : "Use `GET /images/{idOrKey}/content` instead. Generally clients should use the `Image.url` property, which is always correct. \n",
        "x-contentType" : "application/json"
      }
    },
    "/images/{kind}/{file}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Returns an image content",
        "description" : "(deprecated) Returns the content of an image, given the image kind and key. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used. \n",
        "operationId" : "getImageContentDeprecated",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "kind",
          "in" : "path",
          "description" : "Determines the kind of an image Possible values are:\n* contactInfo: An image of an additional contact information\n* customFieldValue: An image used as custom field value\n* marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop.\n* marketplaceCategory: An image of an advertisement (simple or webshop)\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n* systemCustom: System custom images are additional images an administrator that can be used on rich text contents.\n* temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement).\n* userCustom: User custom images are additional images that can be used on rich text contents.\n* voucherType: An image of a voucher type\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "contactInfo", "customFieldValue", "marketplace", "marketplaceCategory", "profile", "systemCustom", "temp", "userCustom", "voucherType" ],
          "x-type" : "ImageKind"
        }, {
          "name" : "file",
          "in" : "path",
          "description" : "The file name. This is not the original uploaded file name,\nbut a generated one.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "The requested image width",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The requested file height",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.13,
        "x-deprecated" : "Use `GET /images/{idOrKey}/content` instead. Generally clients should use the `Image.url` property, which is always correct. \n",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Searches for advertisements.",
        "description" : "Returns a page of advertisements that match a given criteria.\n",
        "operationId" : "searchAds",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none" ],
          "x-type" : "AdAddressResultEnum"
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Either id or an identification, such as login name, e-mail, etc, for the broker of the advertisement owner. The allowed identification methods are those the authenticated user can use on keywords search.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Either id or internal name of a category\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Either id or internal name of a currency for the price\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "expirationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Array of either id or internal names of user groups the advertisement owner must belong to\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "hasImages",
          "in" : "query",
          "description" : "When set to `true` only advertisements with images are returned\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "simple", "webshop" ],
          "x-type" : "AdKind"
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Indicates how advertisements results are ordered. Possible values are:\n* date: Newest advertisements are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* priceAsc: Smaller prices are returned first. Advertisements without price are returned last.\n* priceDesc: Higher prices are returned first. Advertisements without price are returned last.\n* random: Without definite order\n* relevance: This is the default if keywords are used. Best matching advertisements come first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "date", "distance", "priceAsc", "priceDesc", "random", "relevance" ],
          "x-type" : "AdOrderByEnum"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Either id or an identification, such as login name, e-mail, etc, for the advertisement owner. The allowed identification methods are those the authenticated user can use on keywords search.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "priceRange",
          "in" : "query",
          "description" : "The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "publicationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "returnEditable",
          "in" : "query",
          "description" : "Whether to return the editable property. Passing `true` will impact the performance a bit, as for each returned advertisement some statuses and permissions need to be checked.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible status for an advertisement Possible values for each array element are:\n* active: The advertisement is published and can be seen by other users.\n* disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.\n* draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.\n* expired: The advertisement publication period has already expired, and cannot be seen by other users.\n* hidden: The advertisement is manually hidden from other users\n* pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.\n* scheduled: The advertisement has a future publication period, and cannot be seen by other users. \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "disabled", "draft", "expired", "hidden", "pending", "scheduled" ]
          },
          "x-type" : "List<AdStatusEnum>"
        } ],
        "responses" : {
          "200" : {
            "description" : "The advertisements matching the criteria.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/data-for-search" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for searching advertisements.",
        "description" : "Returns data needed on for a general advertisements search. \n",
        "operationId" : "getAdDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "Indicates the kind of advertisement that should be searched. When nothing is passed (default) all kinds will be searched. Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "simple", "webshop" ],
          "x-type" : "AdKind"
        }, {
          "name" : "brokered",
          "in" : "query",
          "description" : "If the authenticated is a broker, passing the `true` value will indicate the advertisements to be searched are from managed users of that broker. The default is `false`.\n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for advertisements search.",
            "schema" : {
              "$ref" : "#/definitions/AdDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns details of an advertisement.",
        "description" : "Returns detailed information of an advertisement.\n",
        "operationId" : "viewAd",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The advertisement details.",
            "schema" : {
              "$ref" : "#/definitions/AdView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Updates an existing advertisement.",
        "description" : "Updates an existing advertisement.",
        "operationId" : "updateAd",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "advertisement",
          "description" : "The advertisement to be edited.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The advertisement was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Removes an advertisement.",
        "description" : "Removes an advertisement by id.",
        "operationId" : "deleteAd",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "The advertisement was removed."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/data-for-edit" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for editing an advertisement.",
        "description" : "Returns configuration data which can be used to edit an advertisement.\n",
        "operationId" : "getAdDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing an advertisement.",
            "schema" : {
              "$ref" : "#/definitions/AdDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/images" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Lists the images of an advertisement\n",
        "description" : "Returns the images of an advertisement.\n",
        "operationId" : "listAdImages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of images\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Image"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Adds a new image for the given advertisement.\n",
        "description" : "Uploads a new image for the given advertisement.\n",
        "operationId" : "uploadAdImage",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new image. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "image",
          "in" : "formData",
          "description" : "The image being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The image is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the image content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/marketplace/{ad}/images/list-data" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Returns the images of an advertisement, plus additional permissions and data \n",
        "description" : "Returns the images of an advertisement. Additional data, such as the\nmaximum images and whether the images can be managed by the\nauthenticated user are also returned.\n",
        "operationId" : "getAdImagesListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The images and additional information\n",
            "schema" : {
              "$ref" : "#/definitions/ImagesListData"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/images/order" : {
      "put" : {
        "tags" : [ "Images" ],
        "summary" : "Changes the order of the images of an advertisement \n",
        "description" : "The new order is defined by the list of ids, so that images appear in\nthe same order as the ids.\n",
        "operationId" : "reorderAdImages",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "The array of ids (comma-separated) reflecting the desired order",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The image order is changed and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the given advertisement",
        "description" : "Returns the custom operations the authenticated user can run over the\ngiven advertisement. All returned operations have the scope\n`advertisement`.\n",
        "operationId" : "listOperationsByAd",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over an\nadvertisement\n",
        "description" : "Returns data to run a specific custom operation over an advertisement.\nThe operation scope must be `advertisement`. \n",
        "operationId" : "getAdOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/marketplace/{ad}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over an advertisement",
        "description" : "Runs a specific custom operation over a given advertisement. The operation scope must be `advertisement`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runAdOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/marketplace/{ad}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over an advertisement while uploading a file\n",
        "description" : "Runs a specific custom operation over a given advertisement. The operation scope must be `advertisement`. This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runAdOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/marketplace/{ad}/questions" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Creates a new advertisement question.",
        "description" : "Creates a new question for an advertisement and associate it to the  authenticated user.\n",
        "operationId" : "createAdQuestion",
        "consumes" : [ "text/plain; charset=utf-8" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "question",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new question.",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the advertisement question details."
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "text/plain; charset=utf-8"
      }
    },
    "/mobile/data-for-guest" : {
      "get" : {
        "tags" : [ "Mobile" ],
        "summary" : "Returns data the mobile application uses while in guest mode",
        "description" : "The data returned can be controlled with a cache key. Each data type has a parameter, such as `headerIf`, which returns the data only if it has changed since the last request.\n",
        "operationId" : "dataForMobileGuest",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "cyclosVersion",
          "in" : "query",
          "description" : "The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "headerIf",
          "in" : "query",
          "description" : "Controls the header cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "footerIf",
          "in" : "query",
          "description" : "Controls the footer cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "themeIf",
          "in" : "query",
          "description" : "Controls the theme cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "translationsIf",
          "in" : "query",
          "description" : "Controls the translations cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for the mobile guest page",
            "schema" : {
              "$ref" : "#/definitions/DataForMobileGuest"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/mobile/data-for-user" : {
      "get" : {
        "tags" : [ "Mobile" ],
        "summary" : "Returns data the mobile application uses in either user or POS mode\n",
        "description" : "The data returned can be controlled with a cache key. Each data type has a parameter, such as `helpIf`, which returns the data only if it has changed since the last request.\n",
        "operationId" : "dataForMobileUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "cyclosVersion",
          "in" : "query",
          "description" : "The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "themeIf",
          "in" : "query",
          "description" : "Controls the theme cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "translationsIf",
          "in" : "query",
          "description" : "Controls the translations cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "mobileHelpIf",
          "in" : "query",
          "description" : "Controls the mobile help cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it. Only taken into account when not accessing as access client (not in POS mode).\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "posHelpIf",
          "in" : "query",
          "description" : "Controls the POS help cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it. Only taken into account when accessing as access client (POS mode).\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for the mobile user page",
            "schema" : {
              "$ref" : "#/definitions/DataForMobileUser"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/mobile/page/{id}" : {
      "get" : {
        "tags" : [ "Mobile" ],
        "summary" : "Returns the content of a mobile page\n",
        "description" : "Returns the content of a mobile page, either by id or internal name\n",
        "operationId" : "mobilePageContent",
        "produces" : [ "application/json", "text/html" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The mobile page id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The page content",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/cancel" : {
      "post" : {
        "tags" : [ "NFC" ],
        "summary" : "Cancels a NFC tag",
        "description" : "Cancels a NFC token. Must be authenticated as a manager (administrator / broker) of the token owner, and have the correct permission. \n",
        "operationId" : "cancelNfc",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for canceling.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfcTokenParameter"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The NFC tag is canceled and nothing is returned\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/data-for-initialize" : {
      "get" : {
        "tags" : [ "NFC" ],
        "summary" : "Returns data for NFC tag initialization. Optionally the user can personalize the tag too.",
        "description" : "Returns data with the NFC token types the authenticated user can use to initialize NFC tags.\n",
        "operationId" : "getNfcDataForInitialize",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for NFC tag initialization\n",
            "schema" : {
              "$ref" : "#/definitions/NfcDataForInitialize"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/data-for-personalize" : {
      "get" : {
        "tags" : [ "NFC" ],
        "summary" : "Returns data for perfornalizing an initialized NFC tag for a user",
        "description" : "Returns data for personalizing a NFC tag for a given user.\n",
        "operationId" : "getNfcDataForPersonalize",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "tokenType",
          "in" : "query",
          "description" : "The token type reference (id or internal name) of the token principal\ntype, which is stored on the NFC card being personalized. \n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "The user reference (id or an identification method) of the user\nto whom the NFC tag will be personalized.\nWhen authenticated as a manager of that user (administrator or\nbroker) no confirmation password will be required for the\npersonalization. However, if the authenticated user is not a manager,\nthe user will be required a confirmation password.\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for NFC tag personalization\n",
            "schema" : {
              "$ref" : "#/definitions/NfcDataForPersonalize"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/external-auth" : {
      "post" : {
        "tags" : [ "NFC" ],
        "summary" : "NFC external authentication",
        "description" : "The NFC tag will normally perform a mutual authentication, by first generating a challenge that must be encrypted by the external system with the device key. With this the external system is authenticated. Cyclos also returns a challenge that should be encrypted by the NFC tag. This challenge can later be passed in specific operations (for example, when performing a payment) for Cyclos to make sure the NFC tag is present on the operation.\n",
        "operationId" : "nfcExternalAuth",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for the external authentication. If the `token` value is informed, it will be performed an external authentication with the token itself, using the Application Master Key (AMK). If the `token` is not informed, the authentication will be done using the PICC Master Key (PMK), which is useful, for example, when initializing the NFC tag. \n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfcExternalAuthenticateParameter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the challenge to be encrypted by the NFC tag in a\nsubsequent operation\n",
            "schema" : {
              "$ref" : "#/definitions/NfcExternalAuthenticateResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a NFC external authentication error has occurred",
            "schema" : {
              "$ref" : "#/definitions/NfcAuthError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/initialize" : {
      "post" : {
        "tags" : [ "NFC" ],
        "summary" : "Initializes a NFC tag",
        "description" : "Initializes a NFC tag, creating a new `token` in Cyclos. Returns the keys (PICC Master Key, Application Master Key and the Operational Key) to be stored on the NFC tag.\n",
        "operationId" : "initializeNfc",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for initializing the NFC tag. If the `user` value is left blank, the NFC tag will be only initialized, but not personalized (assigned to any user). If a user is given, the permission to personalize is required (besides the permission to initialize), and is a shortcut to initializing and later personalizing the tag. The initialization is a sensitive operation, as the result contains the plain keys that should be stored on the NFC tag. Hence, can only be performed by managers (with granted permission). Later on, other users (for example, businesses) will be able to personalize the NFC tag for customers. \n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfcInitializeParameter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for NFC tag initialization\n",
            "schema" : {
              "$ref" : "#/definitions/NfcInitializeResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a NFC tag inititalization error has occurred",
            "schema" : {
              "$ref" : "#/definitions/InitializeNfcError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/personalize" : {
      "post" : {
        "tags" : [ "NFC" ],
        "summary" : "Personalizes a NFC tag",
        "description" : "Personalization requires a NFC tag that was previously initialized, but is still unassigned. This operation doesn't store any key in the NFC tag itself, hence the plain keys are not returned. What is needed is an external authentication with the NFC tag, in order to ensure the card is physically present. The flow for personalizing a tag is: - `GET /nfc/data-for-personalize?user={user}`: Obtain the data for\n  personalizing NFC tags for this user. The most important information\n  is which the confirmation password will be required, if any;\n- `POST /nfc/external-auth`: With a challenge previously encrypted by the\n  NFC tag, invoke this operation. If the challenge matches the NFC token\n  in Cyclos, it will be encrypted and returned. Also a new challenge will\n  be returned, which should be then encrypted by the NFC tag for later\n  being sent back;\n- `POST /nfc/personalize`: With the encrypted challenge and the\n  confirmation password (if any), this operation will update the NFC\n  token in Cyclos, so it is now assigned to the specified user. From\n  this point on, the NFC tag is operational.\n",
        "operationId" : "personalizeNfc",
        "parameters" : [ {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for the initialization.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfcPersonalizeParameter"
          }
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The NFC tag is personalized and nothing is returned\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a NFC tag personalization error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PersonalizeNfcError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/personalize/otp" : {
      "post" : {
        "tags" : [ "NFC" ],
        "summary" : "Generates a new One-Time-Password (OTP) for a personalizing a NFC tag\n",
        "description" : "Sends a new OTP for the customer which will own the NFC tag. The OTP belongs to the NFC tag owner, not the authenticated user.\n",
        "operationId" : "getOtpForPersonalizeNfc",
        "parameters" : [ {
          "name" : "medium",
          "in" : "query",
          "description" : "The medium the user wants to receive the otp Possible values are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "email", "sms" ],
          "x-type" : "SendMediumEnum"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters identifying the token and the user",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfcPersonalizeOtpParameter"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The OTP is sent to the user, and no content is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "There was an error when generating the OTP",
            "schema" : {
              "$ref" : "#/definitions/OtpError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/nfc/{tokenType}/{value}" : {
      "get" : {
        "tags" : [ "NFC" ],
        "summary" : "Retrieve the NFC token detailed data",
        "description" : "Returns the token's data and the user owner of the token (i.e the assigned user, if any)",
        "operationId" : "getNfcToken",
        "parameters" : [ {
          "name" : "tokenType",
          "in" : "path",
          "description" : "The internal name or id of the token type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "value",
          "in" : "path",
          "description" : "The token value",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the token data\n",
            "schema" : {
              "$ref" : "#/definitions/TokenDetailed"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/notifications" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "Searches for the notifications the authenticated user has received.",
        "description" : "Returns an ordered page of notifications the authenticated user has received (newest first).\n",
        "operationId" : "searchNotifications",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "onlyNew",
          "in" : "query",
          "description" : "Boolean value indicating wether return only the new notifications received after the last view date tracked using `POST /notifications/viewed` \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "onlyUnread",
          "in" : "query",
          "description" : "Boolean value indicating wether return only the unread notifications\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The notifications page",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Notification"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/notifications/mark-as-read" : {
      "post" : {
        "tags" : [ "Notifications" ],
        "summary" : "Marks a list of notifications as read.",
        "description" : "Marks a list of notifications, given by id, as read.",
        "operationId" : "markNotificationsAsRead",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "The notifications (comma-separated list of identifiers) to mark as read.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The notifications were marked as read."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/notifications/status" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "Return information about the received notifications.",
        "description" : "Return information about the status of the received notifications (unread, new, etc).",
        "operationId" : "notificationsStatus",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The notifications status information",
            "schema" : {
              "$ref" : "#/definitions/NotificationsStatus"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/notifications/viewed" : {
      "post" : {
        "tags" : [ "Notifications" ],
        "summary" : "Update the last view date for the notifications.",
        "description" : "Update the last view date for the notifications.\nThis will be used to calculate the number of new notifications returned by the \n`POST /notifications/status` operation.\n",
        "operationId" : "markAsViewed",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "The last view date was updated."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/notifications/{id}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "Returns the notification details.",
        "description" : "Returns the notification details.",
        "operationId" : "viewNotification",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification details",
            "schema" : {
              "$ref" : "#/definitions/Notification"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Notifications" ],
        "summary" : "Removes a notification by id.",
        "description" : "Removes a notification for the authenticated user by id.\n",
        "operationId" : "deleteNotification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The notification was removed"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/operations/callback/{id}" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs the callback of an external redirect custom operation\n",
        "description" : "Custom operations may be configured in Cyclos to be of result type `externalRedirect`. In such case, the regular execution returns an URL to which redirect clients. Once the external page processing is complete, the user is redirected back, so the operation can be completed. This operation should be executed to complete the payment.\nIn order for the external service receive the correct URL, Cyclos need to have a link generation script that handles the link type `EXTERNAL_REDIRECT`.\n",
        "operationId" : "runCustomOperationCallback",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The external redirect identifier. Received as part of the URL\nwhich is generated by Cyclos to the external service to use as\ncallback.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "token",
          "in" : "query",
          "description" : "The security token which is received as part of the URL\nwhich is generated by Cyclos to the external service to use as\ncallback.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "callbackRequest",
          "description" : "Data of the original callback request sent by the external service\n",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HttpRequestData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result as `RunOperationResult`\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation without\nadditional scope\n",
        "description" : "Returns data to run a specific custom operation, which must not have any\nadditional scope to run, such as user, contact, record or advertisement.\nHence, this path is suitable for custom operations with scope\n`system` or `internal`. \n",
        "operationId" : "getOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation without additional scope",
        "description" : "Runs a specific custom operation without additional scope. Is suitable for operations with scope `system` or `internal`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation without additional scope while uploading a file\n",
        "description" : "Runs a specific custom operation without additional scope. Is suitable for operations with scope `system` or `internal`.  This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/operators" : {
      "get" : {
        "tags" : [ "Operators" ],
        "summary" : "Search the visible operators (of any managed user)",
        "description" : "Returns a page of operators that match a given criteria\n",
        "operationId" : "searchGeneralOperators",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search.\nThe default value is 40.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "userGroups",
          "in" : "query",
          "description" : "Either id or internal names of user groups / group sets",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Either id or a principal (login name, e-mail, etc) of the user broker",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account\nif searching as administrator or managing broker.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible statuses for an user Possible values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "blocked", "disabled", "pending", "purged", "removed" ]
          },
          "x-type" : "List<UserStatusEnum>"
        } ],
        "responses" : {
          "200" : {
            "description" : "The users matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/operators/data-for-search" : {
      "get" : {
        "tags" : [ "Operators" ],
        "summary" : "Get configuration data for searching operators of any managed user",
        "description" : "Returns data with the current configuration regarding the search of\noperators of managed users. This is meant to be used by either\nadministrators or brokers \n",
        "operationId" : "getGeneralOperatorsDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for operators search",
            "schema" : {
              "$ref" : "#/definitions/GeneralOperatorsDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns details of an order.",
        "description" : "Returns detailed information of an order given by id.",
        "operationId" : "viewOrder",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The order details.",
            "schema" : {
              "$ref" : "#/definitions/OrderView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/buyer/accept" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Accepts a pending order by buyer.",
        "description" : "Accepts a pending order by buyer generating the corresponding payment. The order status must be `pendingBuyer` to be  accepted by the authenticated user (i.e the buyer).\n\nThe `paymentType` and the `confirmationPassword` are required under the  following circumstances:\n\n`paymentType`: Only required if the order was generated as a sale by the  seller and not from the shopping cart check-out (Sales are not supported yet).\n\n`confirmationPassword`: Only required if at check-out a delivery method was  not set or its charge type is `negotiatied`.    \n\nThe possible statuses after an order acceptance are:\n* `paymentPending`: if the generated payment is  awaiting for authorization;\n  \n     \n* `completed`: if the payment was done.      \n",
        "operationId" : "acceptOrderByBuyer",
        "parameters" : [ {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for accepting the order.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AcceptOrderByBuyer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The order was accepted by the buyer. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/buyer/data-for-accept" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for accept an order by buyer.",
        "description" : "Returns configuration data for accept an order given by id as the buyer.\n",
        "operationId" : "getOrderDataForAcceptByBuyer",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for accept the order as the buyer.",
            "schema" : {
              "$ref" : "#/definitions/OrderDataForAcceptByBuyer"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/reject" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Rejects a pending order.",
        "description" : "Rejects a pending order by buyer or seller. The order status must be `pendingBuyer` or  `pendingSeller` to be rejected by the authenticated.  user (buyer/seller).\n\nThe possible statuses after an order rejection are:\n* `rejectedBySeller`: if the authenticated user is  the seller;\n* `rejectedByBuyer`: if the authenticated user is  the buyer.    \n",
        "operationId" : "rejectOrder",
        "parameters" : [ {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for rejecting the order.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RejectOrder"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The order was rejected by the authenticated user. Nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/seller/accept" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Accepts a pending order by seller.",
        "description" : "Accepts a pending order by seller generating the corresponding payment. The order status must be `pendingSeller` to be  accepted by the authenticated user (i.e seller).\n\nThe possible statuses after an order acceptance are:\n* `paymentPending`: if the generated payment is  awaiting for authorization;\n      \n\n* `completed`: if the payment was done.      \n",
        "operationId" : "acceptOrderBySeller",
        "parameters" : [ {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for accepting the order.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AcceptOrderBySeller"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The order was accepted by seller. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/seller/data-for-set-delivery" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data to set delivery method data by seller.",
        "description" : "Returns configuration data to set delivery method data by seller of an  order given by id. \n",
        "operationId" : "getDataForSetDeliveryMethod",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for set he delivery method.",
            "schema" : {
              "$ref" : "#/definitions/OrderDataForSetDeliveryMethod"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/orders/{order}/seller/set-delivery" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Sets delivery method data by seller.",
        "description" : "Sets the delivery method data by seller for the order given by id. This operation can be used only if the order is in status  `pendingSeller` and has not already set delivery  method data. After the delivery method has been set the order will be enter in status  `pendingBuyer` to be accepted by buyer.      \n",
        "operationId" : "setDeliveryMethod",
        "parameters" : [ {
          "name" : "order",
          "in" : "path",
          "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for setting the delivery method.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetDeliveryMethod"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The delivery method was set by seller. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/passwords/{type}/change-generated" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Generates a new value for an active generated password.",
        "description" : "Generates a new password whose type's `mode` is  `generated`.\n Only the password owner can perform this operation and the password\n status must be `active`.\n",
        "operationId" : "changeGenerated",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The plain value of the generated password. This is the only time\nthis plain value is ever returned.\n",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/passwords/{type}/generate" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Generates the value of a generated password for the first time or if \nexpired.\n",
        "description" : "Generates the value of a password whose type's `mode` is  `generated`. Only the password owner can perform\n  this operation, and only in one of these conditions:\n  - If the password `status` is `neverCreated`\n    it can only be generated if the password doesn't require the\n    administrator authorization to generate. This can be configured in\n    the password type.\n  - The password can be generated if its `status` is one of the\n    following: `pending`, \n    `expired` or `reset`.\n",
        "operationId" : "generatePassword",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The plain value of the generated password. This is the only time\nthis plain value is ever returned.\n",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/accept" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Accepts a payment request.",
        "description" : "Accepts a payment request in status `open`. After accepting the payment request its resultant status could be  `processed` (and the corresponding  sheduled or direct payment was generated) or  `scheduled`.    This can be done only by managers or the payer (i.e the request's recipient)  with permission to accept.\n",
        "operationId" : "acceptPaymentRequest",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters to accept a payment request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AcceptOrReschedulePaymentRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The performed payment. Only if the process date was not given (i.e the \nrequest was processed immediately).\n",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the payment details"
              }
            }
          },
          "204" : {
            "description" : "The payment request was accepted and scheduled for processing at the\ngiven date. Nothing is returned.                      \n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/cancel" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Cancels a payment request.",
        "description" : "Cancels a payment request in status `open`.\nThis can be done only by managers or the payee with permission to cancel.\n",
        "operationId" : "cancelPaymentRequest",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "comments",
          "description" : "A comment for the cancel action the payee/manager can set.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The payment request was cancelled. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/change-expiration" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Changes the payment request expiration.",
        "description" : "Change the expiration date of a payment request in status  `open` or `expired`. This can be done only by managers or the payee (i.e the request's sender)  with permission to change the expiration.\n",
        "operationId" : "changePaymentRequestExpirationDate",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters to change the payment request's expiration date",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangePaymentRequestExpirationDate"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The payment request expiration date was changed. Nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/preview" : {
      "get" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Previews the payment performed when accepting the given payment request.\n",
        "description" : "Previews the payment ony if the payment request status is  `open` or  `scheduled`.\n",
        "operationId" : "previewPaymentRequest",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The payment preview",
            "schema" : {
              "$ref" : "#/definitions/PaymentPreview"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/reject" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Rejects a payment request.",
        "description" : "Rejects a payment request in status `open`. This can be done only by managers or the payer (i.e the request's recipient) with permission to accept.\n",
        "operationId" : "rejectPaymentRequest",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "comments",
          "description" : "A comment for the reject action the payer can set.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The payment request was rejected. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payment-requests/{key}/reschedule" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Reschedules a payment request.",
        "description" : "Reschedules an already accepted and scheduled payment request (i.e with  status `scheduled`). If the new processing date is null then the payment request will be  processed immediately generating the corresponding payment. Otherwise it will be scheduled to be processed at the given date.  This can be done only by managers or the payer (i.e the request's recipient)  with permission to accept.\n",
        "operationId" : "reschedulePaymentRequest",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters to reschedule a payment request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AcceptOrReschedulePaymentRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The performed payment. Only if the process date was not given (i.e the \nrequest was processed immediately).\n",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the payment details"
              }
            }
          },
          "204" : {
            "description" : "The payment request was rescheduled. Nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/payments/qr-code" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Returns the QR-code image for the given payment's parameters",
        "description" : "The generated image could be scanned (e.g by the mobile application) to  create a payment ready to be confirmed.  \n",
        "operationId" : "getPaymentQrCode",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "to",
          "in" : "query",
          "description" : "The payment receiver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The payment amount",
          "required" : false,
          "type" : "string",
          "format" : "number"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "The payment description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type, either the id or qualified internal name (in the\nform `fromAccountType.paymentType`).\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Custom field values. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either bronze or silver, and whose `birthDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=birthDate:|2001-12-31`.      \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are:\n* large: Full image size\n* medium: Medium thumbnail\n* small: Small thumbnail\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "large", "medium", "small" ],
          "x-type" : "ImageSizeEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pending-payments/{key}/authorize" : {
      "post" : {
        "tags" : [ "PendingPayments" ],
        "summary" : "Authorizes a pending payment.",
        "description" : "Authorizes a payment / scheduled payment / recurring payment whose authorization status is `pending`.\n",
        "operationId" : "authorizePendingPayment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "Contains the action comments",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PendingPaymentActionParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The payment is authorized. The next authorization level\nis returned, in case the payment is still pending another\nauthorization, or returns a no-content when the payment is\nauthorized.\n",
            "schema" : {
              "$ref" : "#/definitions/TransactionAuthorizationLevelData"
            }
          },
          "204" : {
            "description" : "Nothing is returned if the transaction authorization process is\nfinished, and the transaction is processed.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pending-payments/{key}/cancel" : {
      "post" : {
        "tags" : [ "PendingPayments" ],
        "summary" : "Cancels the authorization process of a pending payment.",
        "description" : "Cancels a payment / scheduled payment / recurring payment whose authorization status is `pending`. This action is performed by the payer.\n",
        "operationId" : "cancelPendingPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "Contains the action comments",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PendingPaymentActionParams"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The payment is canceled. Nothing is returned.                      \n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pending-payments/{key}/deny" : {
      "post" : {
        "tags" : [ "PendingPayments" ],
        "summary" : "Denies a pending payment.",
        "description" : "Denies a payment / scheduled payment / recurring payment whose authorization status is `pending`.\n",
        "operationId" : "denyPendingPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "Contains the action comments",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PendingPaymentActionParams"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The payment is denied. Nothing is returned.                      \n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns details of a specific phone",
        "description" : "Returns information about a phone, located by id",
        "operationId" : "viewPhone",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The phone data",
            "schema" : {
              "$ref" : "#/definitions/PhoneView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Phones" ],
        "summary" : "Updates an existing phone",
        "description" : "Updates an existing phone",
        "operationId" : "updatePhone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "phone",
          "description" : "The phone to be edited",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PhoneEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The phone was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Phones" ],
        "summary" : "Removes a phone",
        "description" : "Removes a phone",
        "operationId" : "deletePhone",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The phone was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/data-for-edit" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns data to edit an existing phone",
        "description" : "Returns configuration data for editing a phone, plus the current `PhoneEdit` object that can be altered and sent back\n",
        "operationId" : "getPhoneDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing a phone",
            "schema" : {
              "$ref" : "#/definitions/PhoneDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/disable-for-sms" : {
      "post" : {
        "tags" : [ "Phones" ],
        "summary" : "Marks a phone as disabled to receive SMS notifications and operate in\nthe SMS channel\n",
        "description" : "Marks a phone as disabled to receive SMS notifications and operate in.\nIf the confirmation password is enabled, it must be passed in.\nOnly allowed if is a verified mobile phone not already enabled for SMS. \nOnly the phone owner can verify phones with this method.\nAdministrators / brokers can directly mark a phone number as verified.\n",
        "operationId" : "disablePhoneForSms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The phone is disabled for SMS and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/enable-for-sms" : {
      "post" : {
        "tags" : [ "Phones" ],
        "summary" : "Marks a phone as enabled to receive SMS notifications and operate in\nthe SMS channel\n",
        "description" : "Marks a phone as enabled to receive SMS notifications and operate in.\nOnly allowed if is a verified mobile phone not already enabled for SMS. \nOnly the phone owner can verify phones with this method.\nAdministrators / brokers can directly mark a phone number as verified.\n",
        "operationId" : "enablePhoneForSms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The phone is enabled for SMS and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/password-for-disable-sms" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns a confirmation `PasswordInput` for disabling SMS of a phone,\nif any \n",
        "description" : "If a confirmation password is required to disable a phone from sending / receiving SMS, clients should invoke this operation prior to effectively disabling SMS, which will return the data regarding the confirmation password. \n",
        "operationId" : "getPasswordInputForDisablePhoneForSms",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The confirmation password input, or null",
            "schema" : {
              "$ref" : "#/definitions/PasswordInput"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/password-for-remove" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns a confirmation `PasswordInput` for removing a phone, if any \n",
        "description" : "If a confirmation password is required to remove a phone, clients should invoke this operation prior to effectively removing the phone, which will return the data regarding the confirmation password. \n",
        "operationId" : "getPasswordInputForRemovePhone",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The confirmation password input, or null",
            "schema" : {
              "$ref" : "#/definitions/PasswordInput"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/send-verification-code" : {
      "post" : {
        "tags" : [ "Phones" ],
        "summary" : "Sends the verification code for a user to verify the mobile phone",
        "description" : "Sends an SMS text with a verification code the user can use to verify\nhis mobile phone. Only verified phones can be used for receiving SMS\nnotifications or to operate in the SMS operations channel. Only the\nphone owner can verify phones with this method. Administrators / brokers\ncan directly mark a phone number as verified.\n",
        "operationId" : "sendPhoneVerificationCode",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The phone number which received the SMS",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/phones/{id}/verify" : {
      "post" : {
        "tags" : [ "Phones" ],
        "summary" : "Marks a phone as verified if the code matches",
        "description" : "Verifies a mobile phone by submitting the code received by SMS.\nOnly verified phones can be enabled for receiving SMS\nnotifications or to operate in the SMS operations channel. \nOnly the phone owner can verify phones with this method.\nAdministrators / brokers can directly mark a phone number as verified.\n",
        "operationId" : "verifyPhone",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The verification code received by SMS",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The verification status",
            "schema" : {
              "$ref" : "#/definitions/CodeVerificationStatusEnum"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pos" : {
      "post" : {
        "tags" : [ "POS" ],
        "summary" : "Receives a payment (POS)",
        "description" : "Receives either a direct or scheduled payment in a POS operation for the authenticated user. The payer user should be informed in the `subject` parameter. The payment id is returned on the response, and a link to the transaction details is returned on the `Location` header.\n",
        "operationId" : "receivePayment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "payment",
          "description" : "The receive payment parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PerformPayment"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The created payment",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the transaction details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pos/data-for-pos" : {
      "get" : {
        "tags" : [ "POS" ],
        "summary" : "Returns configuration data for receiving a payment (POS)",
        "description" : "Returns configuration data for receiving a payment in POS operation \n",
        "operationId" : "dataForReceivePayment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Identification of the payer user",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for receiving a payment",
            "schema" : {
              "$ref" : "#/definitions/DataForTransaction"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "If a POS error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PosError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pos/installments" : {
      "get" : {
        "tags" : [ "POS" ],
        "summary" : "Calculates the default installments for a scheduled payment",
        "description" : "Used to calculate installments for a scheduled payment. Will return an\ninstallment every month. When later receiving the payment, these can be\n(optionally) customized (such as changing some due dates or amounts) and\nused on the payment installments.   \n",
        "operationId" : "calculateReceivePaymentInstallments",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "The payment origin",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of installments",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The total scheduled payment amount",
          "required" : true,
          "type" : "string",
          "format" : "number"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The payment currency. Used when no `type` is not provided, to narrow the possible payment types by currency.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form  `fromAccountType.paymentType`). If not provided, will use the first possible type (possibly narrowed by the `currency` parameter). However, if more than one type is available, a validation error will be raised.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstDate",
          "in" : "query",
          "description" : "The due date of the first installment. If none is provided, it is\nassumed that the first installment is paid immediately, and others\nwill be with regular 1 month interval\n",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "The calculated installments",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PerformScheduledPaymentInstallment"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a POS error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PosError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pos/otp" : {
      "post" : {
        "tags" : [ "POS" ],
        "summary" : "Generates a new One-Time-Password (OTP) for a pos payment",
        "description" : "Sends a new OTP for the customer of the POS for a payment. The OTP belongs to the payer, not the authenticated user. The entire payment object must be sent on the request body. This is the same object which is sent both either preview or actually receive the payment. \n",
        "operationId" : "receivePaymentOtp",
        "parameters" : [ {
          "name" : "medium",
          "in" : "query",
          "description" : "The medium the user wants to receive the otp Possible values are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "email", "sms" ],
          "x-type" : "SendMediumEnum"
        }, {
          "in" : "body",
          "name" : "payment",
          "description" : "The receive payment parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PerformPayment"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The OTP is sent to the user, and no content is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "There was an error when generating the OTP",
            "schema" : {
              "$ref" : "#/definitions/OtpError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/pos/preview" : {
      "post" : {
        "tags" : [ "POS" ],
        "summary" : "Previews a POS payment before receiving it",
        "description" : "Previews a payment or scheduled payment. The actual balance checking\nis not performed in the preview. \n",
        "operationId" : "previewReceivePayment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "payment",
          "description" : "The receive payment parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PerformPayment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The payment preview",
            "schema" : {
              "$ref" : "#/definitions/PaymentPreview"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a POS error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PosError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/push/subscribe" : {
      "get" : {
        "tags" : [ "Push" ],
        "summary" : "Subscribes for receiving push notifications of specific types",
        "description" : "Returns an event stream of server-sent events",
        "operationId" : "subscribeForPushNotifications",
        "produces" : [ "application/json", "text/event-stream" ],
        "parameters" : [ {
          "name" : "clientId",
          "in" : "query",
          "description" : "An id generated by the client. This id is valid for the authenticated used, indicating a single session. As event streams can timeout and be reconnected, subsequent subscriptions with the same user and client id are considered the same subscription, and missed events since the last timeout will be immediately delivered. Missed events are enqueued up to a few minutes after the connection timeout. After that window, any enqueued events are discarded.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kinds",
          "in" : "query",
          "description" : "The event kinds for which the client desires to subscribe Possible values for each array element are:\n* accountStatus: The account status (balance, reserved amount, etc) has changed\n* loggedOut: The current session has been invalidated\n* newMessage: New message on the user's inbox\n* newNotification: New received notification\n* ticket: A ticket status has changed\n",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "accountStatus", "loggedOut", "newMessage", "newNotification", "ticket" ]
          },
          "x-type" : "List<PushNotificationEventKind>"
        }, {
          "name" : "accountIds",
          "in" : "query",
          "description" : "When subscribing to `accountStatus` events, this parameter must be informed to select the accounts to be watched for.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketNumber",
          "in" : "query",
          "description" : "When subscribing to `ticket` events, this parameter can be used to filter which ticket to monitor.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastEventId",
          "in" : "header",
          "description" : "The last received event id, in case of reconnections. May also be passed as the standard header `Last-Event-ID`.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The event stream"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/questions/{id}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns details of an advertisement question.",
        "description" : "Return detailed information of an advertisement question.",
        "operationId" : "getAdQuestion",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the advertisement question information.",
            "schema" : {
              "$ref" : "#/definitions/AdQuestionView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Removes an advertisement question.",
        "description" : "Removes an advertisement question created for the authenticated user.\n",
        "operationId" : "deleteAdQuestion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The advertisement question was removed."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/records/{id}" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns details of a specific record",
        "description" : "Returns information about a record, located by id",
        "operationId" : "viewRecord",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The record data",
            "schema" : {
              "$ref" : "#/definitions/RecordView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Records" ],
        "summary" : "Updates an existing record",
        "description" : "Updates an existing record",
        "operationId" : "updateRecord",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "record",
          "description" : "The record to be edited",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RecordEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The record was updated"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Records" ],
        "summary" : "Removes a record",
        "description" : "Removes a record",
        "operationId" : "deleteRecord",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The record was deleted"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/records/{id}/data-for-edit" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns data to edit an existing record",
        "description" : "Returns configuration data for editing a record, plus the current `RecordEdit` object that can be altered and sent back\n",
        "operationId" : "getRecordDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing a record",
            "schema" : {
              "$ref" : "#/definitions/RecordDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/records/{id}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the given record",
        "description" : "Returns the custom operations the authenticated user can run over the\ngiven record. All returned operations have the scope\n`record`.\n",
        "operationId" : "listOperationsByRecord",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/records/{id}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over a\nrecord\n",
        "description" : "Returns data to run a specific custom operation over a record.\nThe operation scope must be `record`. \n",
        "operationId" : "getRecordOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/records/{id}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over a record",
        "description" : "Runs a specific custom operation over a given record. The operation scope must be `record`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runRecordOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/records/{id}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over a record while uploading a file\n",
        "description" : "Runs a specific custom operation over a given record. The operation scope must be `record`. This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runRecordOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/recurring-payments/occurrences/{id}/process-failed" : {
      "post" : {
        "tags" : [ "RecurringPayments" ],
        "summary" : "Processes a failed recurring payment occurrence.",
        "description" : "Processes a failed recurring payment occurrence. The occurrence status must be `failed`.\n",
        "operationId" : "processFailedRecurringPaymentOccurrence",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "The occurrence is processed and the transfer is returned",
            "schema" : {
              "$ref" : "#/definitions/Transfer"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the transfer details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/recurring-payments/{key}/cancel" : {
      "post" : {
        "tags" : [ "RecurringPayments" ],
        "summary" : "Cancels a recurring payment.",
        "description" : "Permanently cancels a recurring payment. The recurring payment status must be `open`.\n",
        "operationId" : "cancelRecurringPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The recurring payment is canceled and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/installments/{id}/process" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Processes a single scheduled payment installment.",
        "description" : "Processes a single installment. The installment status must be either `scheduled`,  `failed` or `blocked`. This action is to be performed by the scheduled payment payer.\n",
        "operationId" : "processScheduledPaymentInstallment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "The installment is processed and the transfer is returned",
            "schema" : {
              "$ref" : "#/definitions/Transfer"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the transfer details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/installments/{id}/settle" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Settles a single scheduled payment installment.",
        "description" : "Settles a single installment. The installment status must be either `scheduled`,  `failed` or `blocked`. This action is to be performed by the scheduled payment payee.\n",
        "operationId" : "settleScheduledPaymentInstallment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The installment is unblocked and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/{key}/block" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Blocks a scheduled payment.",
        "description" : "Blocks a scheduled payment, preventing its installments from being automatically processed. The scheduled payment status must be `open`. This action is to be performed by the scheduled payment payer.\n",
        "operationId" : "blockScheduledPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The scheduled payment is blocked and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/{key}/cancel" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Cancels a scheduled payment.",
        "description" : "Permanently cancels a scheduled payment. The scheduled payment status must be either `open` or `blocked`. This action is to be performed by the scheduled payment payer.\n",
        "operationId" : "cancelScheduledPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The scheduled payment is canceled and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/{key}/settle-remaining" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Settles all remaining installments in a scheduled payment.",
        "description" : "Settles all remaining installments, closing the scheduled payment. The scheduled payment status must be either `open` or `blocked`. This action is to be performed by the scheduled payment payee.\n",
        "operationId" : "settleScheduledPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The scheduled payment is closed and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/scheduled-payments/{key}/unblock" : {
      "post" : {
        "tags" : [ "ScheduledPayments" ],
        "summary" : "Unblocks a scheduled payment.",
        "description" : "Unblocks a previously blocked scheduled payment The scheduled payment status must be `blocked`. This action is to be performed by the scheduled payment payer.\n",
        "operationId" : "unblockScheduledPayment",
        "parameters" : [ {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The scheduled payment is unblocked and nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/sessions" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Logins a user, returning data from the new session",
        "description" : "Created a session for a given user. Must be executed as administrator\nwith permissions. A channel can be specified (defaults to `main`) so\nthe user can be logged in by some external actor (like an website) and\nthen redirected to `<cyclos-root>?sessionToken=<session-token>`.\nIt is also recommended to set in Cyclos the login and logout URLs in the\nconfiguration, so, when the user logs out, he will be redirected back\nto the previous website.\n",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "login",
          "description" : "Information about the user being logged in",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LoginUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An object containing the authenticated user information\n",
            "schema" : {
              "$ref" : "#/definitions/UserAuth"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shared-records" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Searches for records with shared fields",
        "description" : "Returns records matching the search criteria, using shared fields. This allows searching over multiple record types that use shared fields. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions).\n",
        "operationId" : "searchSharedRecords",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either the ids or identification methods of record owners' brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum record creation date\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either the ids or internal names of record owners' groups\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Either the ids or identification methods of record types\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RecordWithOwnerResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shared-records/data-for-search" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns data for searching records with shared fields",
        "description" : "Returns data for searching records from multiple types, using shared fields. Only user records can be shared this way. \n",
        "operationId" : "getRecordDataForSharedSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records with shared fields\n",
            "schema" : {
              "$ref" : "#/definitions/SharedRecordsDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns the shopping carts list.",
        "description" : "Returns the shopping carts for the authenticated user. Each cart contains  all webshop ads offered by the same seller and in the same currency.\n",
        "operationId" : "getShoppingCarts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The shopping carts list.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ShoppingCartResult"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts/items/{ad}" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Adds the given webshop ad to the corresponding shopping cart.",
        "description" : "Adds the given webshop ad to the corresponding shopping cart according to the seller and currency and returns the total number of webshop ads in all carts. Optionally a quantity can be specified. The different shopping carts are created dynamically according to the seller and currency.\n\n  \nE.g if the user adds the following webshop ads (i.e items):\n* 1 from Seller1 in Dolars;\n* 2 from Seller1 in Euros;\n* 1 from Seller2 un Dolars.\n\nThen the following three carts will be created for the authenticated user:\n* 1 cart containing 1 item offered by Seller1 in Dolars;\n* 1 cart containing 2 item offered by Seller1 in Euros;\n* 1 cart containing 1 item offered by Seller2 in Dolars.\n\nFinally, the total number of wbshop ads returned will be 4.\n\nFor those quantity-limited products the given quantity could have been  adjusted to met the restrictions. You can view the adjustment applied to  each item when retrieving the details of a shopping cart. if you want to  remove the adjustment just send a new request to modify the quantity  (using `PUT /shopping-carts/items/{ad}`) and specify the current quantity  (i.e the already adjusted and returned in the details of the shopping cart) as the parameter.\n",
        "operationId" : "addItemToShoppingCart",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "quantity",
          "in" : "query",
          "description" : "The quantity being added. It could be a decimal number only if the  corresponding webshop ad allows it.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the total number of webshop ads present in all the  shopping carts.\n",
            "schema" : {
              "type" : "integer"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "If an error has occurred adding the webshop ad to the cart.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Modifies the corresponding cart with the new quantity for the given webshop ad.\n",
        "description" : "Modifies the corresponding shopping cart with the new quantity for the  given webshop ad only if it was already added to the cart of the authenticted user and returns the total number of webshop ads in all carts.\n\nFor those quantity-limited products the given quantity could have been  adjusted to met the restrictions. You can view the adjustment applied to  each item when retrieving the details of a shopping cart. if you want to  remove the adjustment just send a new request to modify the quantity  and specify the current quantity (i.e the already adjusted and returned  in the details of the shopping cart) as the parameter.\n",
        "operationId" : "modifyItemQuantityOnShoppingCart",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "quantity",
          "in" : "query",
          "description" : "The new quantity for the given webshop ad. It could be a decimal  number only if the corresponding webshop ad allows it. If zero then the webshop ad is removed from the cart.\n",
          "required" : true,
          "type" : "number",
          "format" : "double"
        } ],
        "responses" : {
          "200" : {
            "description" : "The quantity for the given webshop was updated.  Returns the total number of webshop ads present in all the shopping  carts.\n",
            "schema" : {
              "type" : "integer"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If an error has occurred modifying the quantity.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Removes the given webshop ad from the corresponding shopping cart.",
        "description" : "Removes the given webshop ad from the corresponding shopping cart  according to the seller and currency and returns the total number of  the remaining webshop ads in all carts. \n",
        "operationId" : "removeItemFromShoppingCart",
        "parameters" : [ {
          "name" : "ad",
          "in" : "path",
          "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The webshop ad was removed from the shopping cart. Returns the total number of the remaining webshop ads in all the shopping carts.\n",
            "schema" : {
              "type" : "integer"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts/{id}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns details of a shopping cart.",
        "description" : "Returns the details of a shopping cart by id with all webshop ads offered by the same seller and in the same currency.\n",
        "operationId" : "getShoppingCartDetails",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The shopping cart details.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Removes a shopping cart.",
        "description" : "Removes the given shopping cart by id and returns the total number of  the webshop ads in the remaining all carts. \n",
        "operationId" : "removeShoppingCart",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The shopping cart was removed. Returns the total number of the webshop ads in all the remaining shopping carts.\n",
            "schema" : {
              "type" : "integer"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts/{id}/adjust" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Adjusts a shopping cart items, returning its details.",
        "description" : "Works like `GET /shopping-carts/{id}`, but first adjusts the status of all items. For each item checks both the availability and the quantity, setting to corresponding `availability` or `quantityAdjustment` property if anything was modified.\n",
        "operationId" : "adjustAndGetShoppingCartDetails",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The shopping cart details.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts/{id}/checkout" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Checks out a shopping cart.",
        "description" : "Checks out the given shopping cart associated to the authenticated user. After the check-out the purchase order will be awaiting for the seller's  acceptance (i. e with status `pendingSeller`).\n",
        "operationId" : "checkoutShoppingCart",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "checkout",
          "description" : "The data for check-out.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ShoppingCartCheckout"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The shopping cart was cheked out. Returns the total number of the webshop ads in all the remaining shopping carts.  The id of the purchase order is not returned because is the same as  the id of the given shopping cart but a header with the url to view  the details does. \n",
            "schema" : {
              "type" : "integer"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the order details."
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If an error has occurred in the check-out process.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartCheckoutError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/shopping-carts/{id}/data-for-checkout" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for check-out a shopping cart.",
        "description" : "Returns configuration data for check-out the given shopping cart by id.\n",
        "operationId" : "getShoppingCartDataForCheckout",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The object identification",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for check-out.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingCartDataForCheckout"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "Creates a new ticket with status `open` for\nthe logged user.\n",
        "description" : "The logged user will be the ticket's owner and then the receiver of the \npayment generated after processing the ticket only if was previously\napproved by the payer.\n",
        "operationId" : "newTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "ticket",
          "description" : "The data to create the new ticket",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TicketNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The created ticket",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the ticket details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/data-for-easy-invoice/{user}" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "summary" : "Returns data for an easy invoice to the given user\n",
        "description" : "An easy invoice is a pre-filled payment to an user. Other users can use this for a payment template to that user, with pre-filled data. If an amount is specified, then either there must be only payment types of a single currency to the given user, or either a payment type or currency must be informed.\n",
        "operationId" : "getDataForEasyInvoice",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required.\n",
          "required" : false,
          "type" : "string",
          "format" : "number"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Custom field values. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either bronze or silver, and whose `birthDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=birthDate:|2001-12-31`.      \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for easy invoice",
            "schema" : {
              "$ref" : "#/definitions/DataForEasyInvoice"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/data-for-new" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "summary" : "Returns data for create a new ticket for the logged user.",
        "operationId" : "dataForNewTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "payer",
          "in" : "query",
          "description" : "Will only be used if no specific payment type is given. An identification for the user which will pay the ticket. Is optional, and in most cases, should be left empty. If specified, the returned payment types will take into account those that can be paid by the given user.  \n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating a ticket",
            "schema" : {
              "$ref" : "#/definitions/DataForTransaction"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/easy-invoice-qr-code/{user}" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "summary" : "Returns a QR-code image with the URL for an easy invoice confirmation\n",
        "description" : "The generated QR-code image contains an URL in the form: `<root>/pay?to=<user>&amount=<amount>...`\n",
        "operationId" : "getEasyInvoiceQrCode",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "The user which will receive the easy invoice. Unlike other cases of user reference, in this case `self` cannot be used, because the URL URL may be shared with others, hence, `self` makes no sense.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required.\n",
          "required" : false,
          "type" : "string",
          "format" : "number"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "The easy invoice description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are:\n* large: Full image size\n* medium: Medium thumbnail\n* small: Small thumbnail\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "large", "medium", "small" ],
          "x-type" : "ImageSizeEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The QR-code image"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "summary" : "Returns details about a ticket by ticket number",
        "description" : "Returns details about a ticket by ticket number.",
        "operationId" : "viewTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction details",
            "schema" : {
              "$ref" : "#/definitions/TransactionView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/accept" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "This operation is deprecated, use `POST /tickets/{ticket}/approve` instead.",
        "description" : "After a successful acceptance a new direct payment from the logged user (i.e the payer) to the user who generated the ticket will be generated ONLY if the ticket doesn't have a `successUrl` nor `successWebhook`. Otherwise the ticket goes to the `approved` status and no  payment is generated.\n",
        "operationId" : "acceptTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "The created payment, if any.",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the payment details"
              }
            }
          },
          "204" : {
            "description" : "No content when the payment was not generated."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.12,
        "x-deprecated" : "Use `POST /tickets/{ticket}/approve` instead",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/approve" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "Approves a ticket by the payer.",
        "description" : "After a successful approval, a new direct payment from the logged user (i.e the payer) to the user who created the ticket will be generated ONLY if the ticket doesn't have a defined `successUrl` nor `successWebhook`, in that case the ticket goes to `processed` status. Otherwise the ticket just goes to the `approved` status and the corresponding payment will be generated only after the ticket is processed by the receiver.\n",
        "operationId" : "approveTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The approval result.",
            "schema" : {
              "$ref" : "#/definitions/TicketApprovalResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/cancel" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "Cancels a ticket by the receiver.",
        "description" : "Cancels a ticket by the receiver before being approved by the payer. The  logged user must be the ticket's owner.\n",
        "operationId" : "cancelTicket",
        "parameters" : [ {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The ticket was canceled. Nothing is returned.\n"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/preview" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "Previews the payment generated by the ticket.\n",
        "description" : "Previews the payment that will be generated if the ticket is approved by a user (i.e the payer). The ticket status must be  `open` and `successUrl` null or  `approved`. The actual balance checking is not  performed in the preview.\n",
        "operationId" : "previewTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The approval preview",
            "schema" : {
              "$ref" : "#/definitions/TicketPreview"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/process" : {
      "post" : {
        "tags" : [ "Tickets" ],
        "summary" : "Processes a ticket by the receiver.",
        "description" : "Processes an already approved ticket generating a new direct payment from the user who approve the ticket to the logged user (i.e the ticket's creator). A ticket can be processed only if its status is `approved` and the `orderId` (if any) matches the one given at ticket creation. After successfully processing it goes to the final status:  `processed`.\n",
        "operationId" : "processTicket",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order id given at ticket creation. Must be specified only if an `orderId` was given when the ticket was created.  \n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The process result",
            "schema" : {
              "$ref" : "#/definitions/TicketProcessResult"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the payment details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/tickets/{ticket}/qr-code" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "summary" : "Returns the QR-code image for the given ticket only if its status is\n`open`\n",
        "description" : "This request will return the image contents as expected but our api  documentation page (or any other usage of an &lt;img&gt; tag), created  using swagger-ui, generates a second request to include the image in the page. This new (GET) request won't send the authentication parameters and  as this path requires authentication the image will be shown as broken. Optionally, to solve the problem described above and to allow authenticate the user when using sessions, a `sessionToken` or `accessClientToken`  query parameter could be specified.\n",
        "operationId" : "getTicketQrCode",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "ticket",
          "in" : "path",
          "description" : "The ticket number.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are:\n* large: Full image size\n* medium: Medium thumbnail\n* small: Small thumbnail\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "large", "medium", "small" ],
          "x-type" : "ImageSizeEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content",
            "schema" : {
              "type" : "file"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transactions/{key}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Returns details about a transaction",
        "description" : "Returns details about a transaction.",
        "operationId" : "viewTransaction",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction details",
            "schema" : {
              "$ref" : "#/definitions/TransactionView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfer/{key}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over a\ntransfer\n",
        "description" : "Returns data to run a specific custom operation over a transfer.\nThe operation scope must be `transfer`. \n",
        "operationId" : "getTransferOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers" : {
      "get" : {
        "tags" : [ "Transfers" ],
        "summary" : "Searches for transfers over multiple accounts",
        "description" : "Searches for transfers over multiple accounts. This operation can\nonly be performed by administrators or brokers over managed users.\n",
        "operationId" : "searchTransfers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accessClients",
          "in" : "query",
          "description" : "References to access clients (id or token) used to perform / receive the  transfer.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "amountRange",
          "in" : "query",
          "description" : "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "by",
          "in" : "query",
          "description" : "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "channels",
          "in" : "query",
          "description" : "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "chargedBack",
          "in" : "query",
          "description" : "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Either id or internal name of the currency\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "datePeriod",
          "in" : "query",
          "description" : "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "excludedIds",
          "in" : "query",
          "description" : "List of transfers ids to be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "fromAccountType",
          "in" : "query",
          "description" : "Either id or internal name of the origin account type\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromCurrentAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include only transfers by the current access client.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGeneratedByAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Contains the possible 'order by' values when searching for transfers  Possible values are:\n* amountAsc: The result is ordered by amount descendant\n* amountDesc: The result is ordered by amount descendant\n* dateAsc: The result is ordered by date ascendant\n* dateDesc: The result is ordered by date descendant\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "amountAsc", "amountDesc", "dateAsc", "dateDesc" ],
          "x-type" : "AccountHistoryOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "toAccountType",
          "in" : "query",
          "description" : "Either id or internal name of the destination account type\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transactionNumber",
          "in" : "query",
          "description" : "The transaction number of the matching transfer\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transferFilters",
          "in" : "query",
          "description" : "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transferKinds",
          "in" : "query",
          "description" : "Indicates the reason the transfer was created Possible values for each array element are:\n* accountFee: A transfer generated by an account fee charge\n* chargeback: A transfer which is a chargeback of another transfer\n* import: An imported transfer\n* initialCredit: A transfer which is the initial credit for a newly created account\n* payment: A transfer generated by a direct payment or accepting a webshop order\n* recurringPayment: A transfer generated when processing a recurring payment\n* scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment\n* transferFee: A transfer generated by a transfer fee charge\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "accountFee", "chargeback", "import", "initialCredit", "payment", "recurringPayment", "scheduledPaymentInstallment", "transferFee" ]
          },
          "x-type" : "List<TransferKind>"
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Reference a user that should have either received / performed the transfer.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The users together with their balances",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TransferResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers/data-for-search" : {
      "get" : {
        "tags" : [ "Transfers" ],
        "summary" : "Returns data for searching transfers over multiple accounts",
        "description" : "Returns configuration data for searching transfers over multiple\naccounts. This operation can only be performed by administrators or\nbrokers over managed users.\n",
        "operationId" : "getTransferDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction details",
            "schema" : {
              "$ref" : "#/definitions/TransferDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers/{key}" : {
      "get" : {
        "tags" : [ "Transfers" ],
        "summary" : "Returns details about a transfer",
        "description" : "Returns details about a transfer.",
        "operationId" : "viewTransfer",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction details",
            "schema" : {
              "$ref" : "#/definitions/TransferView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers/{key}/chargeback" : {
      "post" : {
        "tags" : [ "Transfers" ],
        "summary" : "Perform the chargeback of a transfer",
        "description" : "The chargeback generates a new transaction with `kind` = `chargeback`. A new transfer is generated with the same from / to, and negative amount. This will effectively return the amount to the original account. Only top-level transfers can be charged back. For example, a transfer used to charge a fee cannot be charged back. Also, the hability to chargeback a transfer depends on permissions and configuration like the maximum allowed time for the chargeback. \n",
        "operationId" : "chargebackTransfer",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "The chargeback id",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the created chargeback"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "There was an error while creating the chargeback payment\n",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers/{key}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the given transfer",
        "description" : "Returns the custom operations the authenticated user can run over the\ngiven transfer. All returned operations have the scope\n`transfer`.\n",
        "operationId" : "listOperationsByTransfer",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/transfers/{key}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over a transfer",
        "description" : "Runs a specific custom operation over a given transfer. The operation scope must be `transfer`. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runTransferOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/transfers/{key}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation over a transfer while uploading a file\n",
        "description" : "Runs a specific custom operation over a given transfer. The operation scope must be `transfer`. This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runTransferOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Either the id or transaction number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/ui/data-for-ui" : {
      "get" : {
        "tags" : [ "UI" ],
        "summary" : "Returns useful data required to properly display a user interface",
        "description" : "The returned data contains settings and also content like header, footer \nand theme.\n",
        "operationId" : "dataForUi",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "Specifies the kind of user interface to get data for. If null then no  data related to the UI will be returned. Possible values are:\n* custom: A custom front-end application. Has no headers, footers or theme\n* main: The main web user interface\n* mobile: The mobile application user interface\n* pay: The Ticket / Easy invoice confirmation application user interface\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "custom", "main", "mobile", "pay" ],
          "x-type" : "UiKind"
        }, {
          "name" : "cyclosVersion",
          "in" : "query",
          "description" : "The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "headerIf",
          "in" : "query",
          "description" : "Controls the header cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "footerIf",
          "in" : "query",
          "description" : "Controls the footer cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "themeIf",
          "in" : "query",
          "description" : "Controls the theme cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "themeByComponents",
          "in" : "query",
          "description" : "Flag used to indicate how the theme must be returned (if returned): true means the theme components (base / advanced definitions and custom style) will be filled. Otherwise the final CSS (i. e the theme content). Only valid if the kind of the user interface is NOT `mobile`. For that kind the theme es always returned by its components.\n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the data for display a user interface",
            "schema" : {
              "$ref" : "#/definitions/DataForUi"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Search for users",
        "description" : "Returns a page of users that match a given criteria. The fields returned depend on the products, in the profile fields of other users setting. Only fields (both basic or custom) marked to be returned on user list are returned. If no fields are set to be returned, or if the `ignoreProfileFieldsInList` flag is true in the given query then the resulting objects will have the `display` and `shortDisplay` filled in.  However, those fields are not returned when another profile field is returned, preventing duplicated data to be returned. \n",
        "operationId" : "searchUsers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "activationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none", "primary" ],
          "x-type" : "UserAddressResultEnum"
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either id or a principal (login name, e-mail, etc) for brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "excludeContacts",
          "in" : "query",
          "description" : "When set to `true` will not return any user that is already a contact of the currently authenticated user.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either id or internal names of groups / group sets\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "ignoreProfileFieldsInList",
          "in" : "query",
          "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroup",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroupSet",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastLoginPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mainBrokerOnly",
          "in" : "query",
          "description" : "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Possible options for ordering the results of an user search. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* creationDate: Newly registered users are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* random: Users will be randomly returned\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "creationDate", "distance", "random", "relevance" ],
          "x-type" : "UserOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "roles",
          "in" : "query",
          "description" : "The main role the user has. Possible values for each array element are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "administrator", "broker", "member", "operator" ]
          },
          "x-type" : "List<RoleEnum>"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible statuses for an user Possible values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "blocked", "disabled", "pending", "purged", "removed" ]
          },
          "x-type" : "List<UserStatusEnum>"
        }, {
          "name" : "usersToExclude",
          "in" : "query",
          "description" : "Indicated the users to be excluded from the result\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToInclude",
          "in" : "query",
          "description" : "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The users matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Registers a new user",
        "description" : "Can either be a public registration, requiring no authorization,\nor a user registration by an administrator or broker. The public\nregistration normally requires a CAPTCHA challenge to prevent bots.\nOn user registration the following data is also created:\n\n* Address;\n\n* Mobile phone;\n\n* Landline phone;\n\n* Images.\n\n\nAfter the registration those data are managed separately than the\nuser profile data. \n",
        "operationId" : "createUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user to be registered",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The result of the registration",
            "schema" : {
              "$ref" : "#/definitions/UserRegistrationResult"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the registered user's profile"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/data-for-new" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get configuration data for registering new users",
        "description" : "Almost every aspect of a user profile is configurable in Cyclos,\nsuch as enabled basic profile fields, custom profile fields, address\nfields, phone configuration and so on. As such, if a front-end needs\nto be robust to such a dynamic nature, it should get this information\nin order to create a correct registration form. \n",
        "operationId" : "getUserDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "The intial group for the new user",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "asMember",
          "in" : "query",
          "description" : "Flag required only when the authenticated user is a member and a\nbroker, in that case we need to distingish between both.\nIf true then the configuration data for registering new users as\nmember will be returned, otherwise will return the configuration\ndata for registering as broker.          \n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object containing the data",
            "schema" : {
              "$ref" : "#/definitions/UserDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/data-for-search" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get configuration data for searching users",
        "description" : "Returns data with the current configuration regarding the user search\n",
        "operationId" : "getUserDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for user search",
            "schema" : {
              "$ref" : "#/definitions/UserDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/groups-for-registration" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Returns the groups the authenticated user or guest can register on",
        "description" : "Returns the list of groups the authenticated user can use to perform a\nnew user registration. If authenticated as guest, will return the groups\ncurrently set for public registration. When there is an authenticated\nadministrator, broker or member, will be the configured groups for new users.\n",
        "operationId" : "getGroupsForUserRegistration",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "asMember",
          "in" : "query",
          "description" : "Flag required only when the authenticated user is a member and a\nbroker, in that case we need to distingish between both.\nIf true then the groups returned will be those allowed as member,\notherwise will return the goups allowed as broker.  \n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of groups",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GroupForRegistration"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/map" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Search the user directory (map)",
        "description" : "Returns a page of users in the map directory that match a given criteria\n",
        "operationId" : "searchMapDirectory",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "activationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none", "primary" ],
          "x-type" : "UserAddressResultEnum"
        }, {
          "name" : "brokers",
          "in" : "query",
          "description" : "Either id or a principal (login name, e-mail, etc) for brokers\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "excludeContacts",
          "in" : "query",
          "description" : "When set to `true` will not return any user that is already a contact of the currently authenticated user.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Either id or internal names of groups / group sets\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "ignoreProfileFieldsInList",
          "in" : "query",
          "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroup",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroupSet",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastLoginPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "mainBrokerOnly",
          "in" : "query",
          "description" : "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Possible options for ordering the results of an user search. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* creationDate: Newly registered users are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* random: Users will be randomly returned\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "creationDate", "distance", "random", "relevance" ],
          "x-type" : "UserOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "roles",
          "in" : "query",
          "description" : "The main role the user has. Possible values for each array element are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "administrator", "broker", "member", "operator" ]
          },
          "x-type" : "List<RoleEnum>"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible statuses for an user Possible values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "blocked", "disabled", "pending", "purged", "removed" ]
          },
          "x-type" : "List<UserStatusEnum>"
        }, {
          "name" : "usersToExclude",
          "in" : "query",
          "description" : "Indicated the users to be excluded from the result\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "usersToInclude",
          "in" : "query",
          "description" : "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The users matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/map/data-for-search" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get configuration data for searching the user directory (map)",
        "description" : "Returns data with the current configuration regarding the user \ndirectory (map)\n",
        "operationId" : "getDataForMapDirectory",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for user directory (map)",
            "schema" : {
              "$ref" : "#/definitions/UserDataForMap"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/validate/email-change/{key}" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Validates an e-mail via a validation key",
        "description" : "When the user e-mail is changed, and the configuration enables the\nvalidation, an e-mail is sent to the new user e-mail, with a link to\nverify it. In this case, only after verifying the new e-mail it is\neffectively set as the new e-mail.\nThis operation effectively verifies the new e-mail.\n",
        "operationId" : "validateEmailChange",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The validation key sent via e-mail",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the id of the user that had the e-mail verified",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/validate/registration/{key}" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Validates an user registration via a key sent by e-mail",
        "description" : "When a user is registered, and the configuration enables the validation,\nan e-mail is sent to user e-mail, with a link to verify it. In this case,\nonly after verifying the e-mail the user is activated.\nThis operation effectively verifies the e-mail and performs the user\nactivation. However, depending on the settings, the initial user status\nmight be blocked or inactive.  \n",
        "operationId" : "validateUserRegistration",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "The validation key sent via e-mail",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns details about the verified user",
            "schema" : {
              "$ref" : "#/definitions/UserRegistrationResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/validate/{group}/{field}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Validates the value of a single field for user registration",
        "description" : "Validates the value of a field which will be used for registering a\nuser, returning either `204 No Content` if the field is valid or\n`200` with the error description if the field is invalid.\nNotice that the result is the validation error. If a `422` status\ncode is returned it means that either the given `field` is invalid\nor the given `value` is empty.\n",
        "operationId" : "validateUserRegistrationField",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "group",
          "in" : "path",
          "description" : "The internal name or id of the group in which the user is being registered \n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "field",
          "in" : "path",
          "description" : "One of: `name` (full name), `username` (login name), `email`, `mobilePhone`, `landLinePhone` or the internal name of a custom field. \n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The value to be validated",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "asMember",
          "in" : "query",
          "description" : "Flag required only when the authenticated user is a member and a\nbroker, in that case we need to distingish between both.\nIf true then the groups returned will be those allowed as member,\notherwise will return the goups allowed as broker.  \n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "The validation error if the field is invalid",
            "schema" : {
              "type" : "string"
            }
          },
          "204" : {
            "description" : "No content if the field is valid"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/{user}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "View a user details",
        "description" : "Returns the profile information of a user / operator.\n",
        "operationId" : "viewUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "User details",
            "schema" : {
              "$ref" : "#/definitions/UserView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Save a user details",
        "description" : "Saves the user profile. Only the basic fields (full name, login name,\ne-mail) and custom fields can be saved with this operation. Addresses,\nphones and images must be managed through their own paths.\n",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The user to be saved",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserEdit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "If the save is correct, nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/{user}/data-for-edit" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get configuration data to edit a user profile",
        "description" : "Returns data to edit a user profile.\n",
        "operationId" : "getUserDataForEdit",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "User profile details",
            "schema" : {
              "$ref" : "#/definitions/UserDataForEdit"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/{user}/data-for-edit-profile" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Returns data for editing the full profile at once",
        "description" : "The returned data contains all profile-related entities: such as profile fields, phones, addresses, images and additional contact information\n",
        "operationId" : "getDataForEditFullProfile",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for editing the full profile",
            "schema" : {
              "$ref" : "#/definitions/DataForEditFullProfile"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/users/{user}/profile" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Edits the full profile at once",
        "description" : "Saves in a single, transactional operation, the full user profile, that is: allows saving the basic fields and creating / modifying / removing phones, addresses, additional contacts and images at once.\n",
        "operationId" : "saveUserFullProfile",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The full profile data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FullProfileEdit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The generated identifiers for created entities",
            "schema" : {
              "$ref" : "#/definitions/FullProfileEditResult"
            }
          },
          "500" : {
            "description" : "If a nested error has occurred",
            "schema" : {
              "$ref" : "#/definitions/NestedError"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/validate/email-change/{key}" : {
      "post" : {
        "tags" : [ "Validation" ],
        "summary" : "Validate a pending e-mail change.",
        "description" : "Validate an e-mail change for the given validation key. After validating \nthe change, the email is effectively changed.\n",
        "operationId" : "validateEmailChange",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The e-mail change validation key the user has received. \n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "If the e-mail change was validated correctly."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/validate/registration/{key}" : {
      "post" : {
        "tags" : [ "Validation" ],
        "summary" : "Validate a pending user registration.",
        "description" : "Validate a pending user registration for the given validation key. \nAfter validating the registration is completed.\n",
        "operationId" : "validateUserRegistration",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The registration validation key the user has received.\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The result of the validation. The resulting status only can be:\n  `active` or \n  `inactive`.\n",
            "schema" : {
              "$ref" : "#/definitions/UserRegistrationResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/vouchers/{key}" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns data for a particular voucher",
        "description" : "Returns details about a particular voucher, as well as the transactions used to buy and redeem, and the permissions for authenticated over it.\n",
        "operationId" : "viewVoucher",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "The voucher `id` or `token`. When the token is fully numeric, it must be preceded by a single quote (`'`).\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The voucher details",
            "schema" : {
              "$ref" : "#/definitions/VoucherView"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/vouchers/{key}/qr-code" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns the QR-code image for the given voucher",
        "description" : "The api documentation page, using swagger-ui (or any direct usage of an image tag), generates a second  request to show the image contents on the preview. This is a new GET request, without passing-in the authentication parameters. As this path requires authentication, the image is shown broken, but the first request works as expected, returning the image content. Optionally, to solve the problem described above and allow to authenticate the user when using sessions, a `sessionToken` or `accessClientToken` plus a `channel` query parameters could be specified.\n",
        "operationId" : "getVoucherQrCode",
        "produces" : [ "application/json", "image/jpeg", "image/gif", "image/png" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The voucher `id` or `token`. When the token is fully numeric, it must be preceded by a single quote (`'`).\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are:\n* large: Full image size\n* medium: Medium thumbnail\n* small: Small thumbnail\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "large", "medium", "small" ],
          "x-type" : "ImageSizeEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The image content"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/accounts" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Lists accounts of the given owner with their statuses",
        "description" : "Lists all visible accounts of the given user, or system accounts if the owner 'system' is used. Each account has status information, like the current balance, avaliable balance and so on. However, the returned data depend on the configuration, in the `Account status indicators` option, which is used to limit the amount of data returned.\n",
        "operationId" : "listAccountsByOwner",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The accounts with their statuses.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AccountWithStatus"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/accounts/{accountType}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Returns the status of an account by owner and type",
        "description" : "Returns the account status for a specific account. The account type may be either the identifier or internal name. The status will contain both instant status information, that is, the same fields as `AccountStatus`, plus status that depend on the input parameters, such as those defined in `AccountWithHistoryStatus`. The actual data inside the result depend on the configuration, in the `Account status indicators` option, which is used to limit the amount of data returned.\n",
        "operationId" : "getAccountStatusByOwnerAndType",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "accountType",
          "in" : "path",
          "description" : "The account type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accessClients",
          "in" : "query",
          "description" : "References to access clients (id or token) used to perform / receive the  transfer.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "amountRange",
          "in" : "query",
          "description" : "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "by",
          "in" : "query",
          "description" : "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "channels",
          "in" : "query",
          "description" : "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "chargedBack",
          "in" : "query",
          "description" : "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`.\n      \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "datePeriod",
          "in" : "query",
          "description" : "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "credit", "debit" ],
          "x-type" : "TransferDirectionEnum"
        }, {
          "name" : "excludedIds",
          "in" : "query",
          "description" : "List of transfers ids to be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "fromCurrentAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include only transfers by the current access client.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGeneratedByAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transactionNumber",
          "in" : "query",
          "description" : "The transaction number of the matching transfer\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transferFilters",
          "in" : "query",
          "description" : "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transferKinds",
          "in" : "query",
          "description" : "Indicates the reason the transfer was created Possible values for each array element are:\n* accountFee: A transfer generated by an account fee charge\n* chargeback: A transfer which is a chargeback of another transfer\n* import: An imported transfer\n* initialCredit: A transfer which is the initial credit for a newly created account\n* payment: A transfer generated by a direct payment or accepting a webshop order\n* recurringPayment: A transfer generated when processing a recurring payment\n* scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment\n* transferFee: A transfer generated by a transfer fee charge\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "accountFee", "chargeback", "import", "initialCredit", "payment", "recurringPayment", "scheduledPaymentInstallment", "transferFee" ]
          },
          "x-type" : "List<TransferKind>"
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Reference a user that should have either received / performed the transfer.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The account",
            "schema" : {
              "$ref" : "#/definitions/AccountWithHistoryStatus"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/accounts/{accountType}/data-for-history" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Returns data for searching an account history by owner and type",
        "description" : "Returns configuration data for searching entries in a specific account\nhistory, as well as status information for that account information.\n",
        "operationId" : "getAccountHistoryDataByOwnerAndType",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "accountType",
          "in" : "path",
          "description" : "The internal name or id of the account type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for searching account history",
            "schema" : {
              "$ref" : "#/definitions/DataForAccountHistory"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/accounts/{accountType}/history" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Search an account history",
        "description" : "Returns a page of account history entries for a specific account,\naccording to the given criteria\n",
        "operationId" : "searchAccountHistory",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "accountType",
          "in" : "path",
          "description" : "The account type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accessClients",
          "in" : "query",
          "description" : "References to access clients (id or token) used to perform / receive the  transfer.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "amountRange",
          "in" : "query",
          "description" : "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "by",
          "in" : "query",
          "description" : "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "channels",
          "in" : "query",
          "description" : "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "chargedBack",
          "in" : "query",
          "description" : "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`.\n      \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "datePeriod",
          "in" : "query",
          "description" : "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "credit", "debit" ],
          "x-type" : "TransferDirectionEnum"
        }, {
          "name" : "excludedIds",
          "in" : "query",
          "description" : "List of transfers ids to be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "fromCurrentAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include only transfers by the current access client.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGeneratedByAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Contains the possible 'order by' values when searching for transfers  Possible values are:\n* amountAsc: The result is ordered by amount descendant\n* amountDesc: The result is ordered by amount descendant\n* dateAsc: The result is ordered by date ascendant\n* dateDesc: The result is ordered by date descendant\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "amountAsc", "amountDesc", "dateAsc", "dateDesc" ],
          "x-type" : "AccountHistoryOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transactionNumber",
          "in" : "query",
          "description" : "The transaction number of the matching transfer\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transferFilters",
          "in" : "query",
          "description" : "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transferKinds",
          "in" : "query",
          "description" : "Indicates the reason the transfer was created Possible values for each array element are:\n* accountFee: A transfer generated by an account fee charge\n* chargeback: A transfer which is a chargeback of another transfer\n* import: An imported transfer\n* initialCredit: A transfer which is the initial credit for a newly created account\n* payment: A transfer generated by a direct payment or accepting a webshop order\n* recurringPayment: A transfer generated when processing a recurring payment\n* scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment\n* transferFee: A transfer generated by a transfer fee charge\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "accountFee", "chargeback", "import", "initialCredit", "payment", "recurringPayment", "scheduledPaymentInstallment", "transferFee" ]
          },
          "x-type" : "List<TransferKind>"
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Reference a user that should have either received / performed the transfer.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The account history entries matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AccountHistoryResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the custom operations over the system or user",
        "description" : "Returns the custom operations the authenticated user can run over the\ngiven user or system if the `system` owner is used. \n",
        "operationId" : "listOperationsByOwner",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of custom operations\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/operations/{operation}/data-for-run" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Returns configuration data for running a custom operation over an owner\n",
        "description" : "Returns data to run a specific custom operation over a given user or\nsystem if the `system` owner is used. The operation scope must match,\nbeing either `system` or\n`user`.\n",
        "operationId" : "getOwnerOperationDataForRun",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data used to run the operation\n",
            "schema" : {
              "$ref" : "#/definitions/OperationDataForRun"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/operations/{operation}/run" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation either for system or user",
        "description" : "Runs a specific custom operation over a given user or system if the `system` owner is used. The operation scope must match, being either `system` or `user`.  If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runOwnerOperation",
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The custom operation parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RunOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json",
        "x-produces-any" : true
      }
    },
    "/{owner}/operations/{operation}/run-upload" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Runs a custom operation either for system or user while uploading a file\n",
        "description" : "Runs a specific custom operation over a given user or system if the `system` owner is used. The operation scope must match, being either `system` or `user`.  This path allows uploading a file, by using a `multipart-form-data` post. If the operation resulted in a file download (either because the `resultType` is `fileDownload` or is a `resultPage` running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an `application/json` with the result object. \n",
        "operationId" : "runOwnerOperationWithUpload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain", "text/html", "text/css", "text/yaml", "text/javascript", "text/csv", "image/jpeg", "image/gif", "image/png", "application/pdf", "application/zip", "image/svg+xml", "application/octet-stream" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Either the id or internal name of the custom operation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "params",
          "in" : "formData",
          "description" : "The custom operation parameters, encoded as `RunOperation`. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "The file being uploaded",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom operation result, either as `RunOperationResult` or as\nthe file itself\n",
            "schema" : {
              "$ref" : "#/definitions/RunOperationResult"
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data",
        "x-produces-any" : true
      }
    },
    "/{owner}/payment-requests" : {
      "post" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Sends a payment request from the given owner",
        "description" : "Sends a payment request from the owner indicated on the path (which will receive the payment once the request is accepted) to the owner specified on the body (which will perform the payment once the request is accepted). The destination user should be informed in the `subject` parameter. If the `subject` is `system`, the payment request is sent to a system account, and has to be accepted by an administrator. The payment request id is returned on the response, and a link to the transaction details is returned on the `Location` header.\n",
        "operationId" : "sendPaymentRequest",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "paymentRequest",
          "description" : "The send payment request parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendPaymentRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The created payment request",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the transaction details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/payment-requests/data-for-send" : {
      "get" : {
        "tags" : [ "PaymentRequests" ],
        "summary" : "Returns configuration data for sending a payment request",
        "description" : "Returns configuration data for sending a payment request\n",
        "operationId" : "dataForSendPaymentRequest",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The payment request destination, which is either string `system` for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for sending a payment request",
            "schema" : {
              "$ref" : "#/definitions/DataForTransaction"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/payments" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Performs a payment from the given owner",
        "description" : "Performs either a direct or scheduled payment from the owner indicated on the path to the owner specified on the body. The destination user should be informed in the `subject` parameter. If the `subject` is `system`, it will be a payment to a system account. The payment id is returned on the response, and a link to the transaction details is returned on the `Location` header.\n",
        "operationId" : "performPayment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "payment",
          "description" : "The perform payment parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PerformPayment"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The created payment",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the transaction details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "If a payment error has occurred",
            "schema" : {
              "$ref" : "#/definitions/PaymentError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/payments/data-for-perform" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Returns configuration data for performing a payment",
        "description" : "Returns configuration data for performing a payment \n",
        "operationId" : "dataForPerformPayment",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The payment destination. Either the string `system` for a payment to system or a user identification.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for performing a payment",
            "schema" : {
              "$ref" : "#/definitions/DataForTransaction"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/payments/installments" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Calculates the default installments for a scheduled payment",
        "description" : "Used to calculate installments for a scheduled payment. Will return an\ninstallment every month. When later performing the payment, these can be\n(optionally) customized (such as changing some due dates or amounts) and\nused on the payment installments.   \n",
        "operationId" : "calculatePerformPaymentInstallments",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The payment destination",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of installments",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The total scheduled payment amount",
          "required" : true,
          "type" : "string",
          "format" : "number"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The payment currency. Used when no `type` is not provided, to narrow the possible payment types by currency.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The payment type id or qualified internal name (in the form  `fromAccountType.paymentType`). If not provided, will use the first possible type (possibly narrowed by the `currency` parameter). However, if more than one type is available, a validation error will be raised.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstDate",
          "in" : "query",
          "description" : "The due date of the first installment. If none is provided, it is\nassumed that the first installment is paid immediately, and others\nwill be with regular 1 month interval\n",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "The calculated installments",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PerformScheduledPaymentInstallment"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/payments/preview" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Previews a payment before performing it",
        "description" : "Previews a payment, scheduled or recurring payment. The actual balance checking\nis not performed in the preview. \n",
        "operationId" : "previewPayment",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "payment",
          "description" : "The perform payment parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PerformPayment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The payment preview",
            "schema" : {
              "$ref" : "#/definitions/PaymentPreview"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/record-types" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Lists the record types over a user or system",
        "description" : "Returns the record types the authenticated user can view over the\ngiven user or system if the `system` owner is used. \n",
        "operationId" : "listRecordTypesByOwner",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of visible record types\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/OwnerRecordPermissions"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/record-types/{type}" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns a single record type over a user or system",
        "description" : "Returns the a specific record type the authenticated user can view over the\ngiven user or system if the `system` owner is used. \n",
        "operationId" : "getRecordTypeByOwner",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The record type details\n",
            "schema" : {
              "$ref" : "#/definitions/OwnerRecordPermissions"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/records/{type}" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Searches for records of a specific type and owner",
        "description" : "Returns records matching the search criteria, for a specific type,  either for system or user records, depending on the `owner` parameter. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions).\n",
        "operationId" : "searchOwnerRecords",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum record creation date\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RecordResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Records" ],
        "summary" : "Creates a new record for the given owner and type",
        "description" : "Creates a new record for the given owner and type.\nIf the owner is `system` will be a system\nrecord. Otherwise will be a user record.\n",
        "operationId" : "createRecord",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "record",
          "description" : "The record to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RecordNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new record",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the record details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/records/{type}/data-for-new" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns data to create a new record",
        "description" : "Returns configuration data for creating a record for the given owner\nand type. If the owner is `system` will be a system\nrecord. Otherwise will be a user record. \n",
        "operationId" : "getRecordDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The record type to be created",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating a record",
            "schema" : {
              "$ref" : "#/definitions/RecordDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/records/{type}/data-for-search" : {
      "get" : {
        "tags" : [ "Records" ],
        "summary" : "Returns data for searching records of a specific type and owner",
        "description" : "Returns data for searching records of a specific type, either for system or user records, depending on the `owner` parameter. \n",
        "operationId" : "getRecordDataForOwnerSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the identifier or internal name of the record type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching records\n",
            "schema" : {
              "$ref" : "#/definitions/RecordDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/transactions" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Searches transactions of an account owner",
        "description" : "Returns the transactions of a given account owner that match the\nspecified criteria. Each result will will be relative to this owner.\nThe amount may be positive or negative, depending on whether this\nowner has performed or received the transaction.\n",
        "operationId" : "searchTransactions",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "accessClients",
          "in" : "query",
          "description" : "References to access clients (id or token) used to perform / receive the  transfer.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "accountTypes",
          "in" : "query",
          "description" : "The account types\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "amountRange",
          "in" : "query",
          "description" : "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "authorizationStatuses",
          "in" : "query",
          "description" : "The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values for each array element are:\n* authorized: The transaction was fully authorized and is processed\n* canceled: The authorization submission was canceled by the submitter\n* denied: The authorization was denied\n* pending: The transaction is pending authorization\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "authorized", "canceled", "denied", "pending" ]
          },
          "x-type" : "List<TransactionAuthorizationStatusEnum>"
        }, {
          "name" : "broker",
          "in" : "query",
          "description" : "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "by",
          "in" : "query",
          "description" : "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "channels",
          "in" : "query",
          "description" : "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "datePeriod",
          "in" : "query",
          "description" : "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "credit", "debit" ],
          "x-type" : "TransferDirectionEnum"
        }, {
          "name" : "excludedIds",
          "in" : "query",
          "description" : "List of transfers ids to be excluded from the result.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "externalPaymentStatuses",
          "in" : "query",
          "description" : "The status of an external payment Possible values for each array element are:\n* canceled: The external payment was canceled\n* expired: The external payment has expired without the destination user activation\n* failed: The external payment has failed processing\n* pending: The external payment is pending, awaiting the destination user to be activated in Cyclos\n* processed: The external payment was processed, and the destination payment was created\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "canceled", "expired", "failed", "pending", "processed" ]
          },
          "x-type" : "List<ExternalPaymentStatusEnum>"
        }, {
          "name" : "fromCurrentAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include only transfers by the current access client.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "groups",
          "in" : "query",
          "description" : "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "includeGeneratedByAccessClient",
          "in" : "query",
          "description" : "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "kinds",
          "in" : "query",
          "description" : "The kind of a transaction  Possible values for each array element are:\n* chargeback: Chargeback of a given transfer\n* externalPayment: A payment to an external user\n* import: An imported transaction\n* order: Transaction generated by confirming an order\n* payment: A direct payment\n* paymentRequest: A request for another user to accept a payment \n* recurringPayment: A payment which is processed again periodically\n* scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments\n* ticket: A payment whose the payer is unknown\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "chargeback", "externalPayment", "import", "order", "payment", "paymentRequest", "recurringPayment", "scheduledPayment", "ticket" ]
          },
          "x-type" : "List<TransactionKind>"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "paymentRequestStatuses",
          "in" : "query",
          "description" : "The status of a payment request Possible values for each array element are:\n* canceled: The payment request was canceled\n* denied: The payment request was denied by the receiver\n* expired: The payment request has expired - the received did not respond until the expiration date\n* open: The payment request is open and can be accepted\n* processed: The payment request was processed, and either a direct or scheduled payment was created from it\n* scheduled: The payment request has been accepted, and scheduled for processing on a future date\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "canceled", "denied", "expired", "open", "processed", "scheduled" ]
          },
          "x-type" : "List<PaymentRequestStatusEnum>"
        }, {
          "name" : "recurringPaymentStatuses",
          "in" : "query",
          "description" : "The status of a recurring payment Possible values for each array element are:\n* canceled: The recurring payment was manually canceled\n* closed: The recurring payment is closed, as the last scheduled occurrence was processed\n* open: The recurring payment is open, as there are more future occurrences\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "canceled", "closed", "open" ]
          },
          "x-type" : "List<RecurringPaymentStatusEnum>"
        }, {
          "name" : "scheduledPaymentStatuses",
          "in" : "query",
          "description" : "The status of a scheduled payment Possible values for each array element are:\n* blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again\n* canceled: The scheduled payment, as well as all open installments were canceled\n* closed: The scheduled payment is closed\n* open: The scheduled payment has open installments\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "blocked", "canceled", "closed", "open" ]
          },
          "x-type" : "List<ScheduledPaymentStatusEnum>"
        }, {
          "name" : "ticketStatuses",
          "in" : "query",
          "description" : "The status of a ticket Possible values for each array element are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "approved", "canceled", "expired", "open", "processed" ]
          },
          "x-type" : "List<TicketStatusEnum>"
        }, {
          "name" : "transactionNumber",
          "in" : "query",
          "description" : "The transaction number of the matching transfer\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transferFilters",
          "in" : "query",
          "description" : "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Reference a user that should have either received / performed the transfer.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The transaction entries matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TransactionResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{owner}/transactions/data-for-search" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Returns data for searching transactions of an account owner",
        "description" : "Returns data which can be used to filter a transaction search",
        "operationId" : "getTransactionsDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "owner",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Data for searching transactions of an account owner",
            "schema" : {
              "$ref" : "#/definitions/TransactionDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/addresses" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Lists all (visible) user addresses",
        "description" : "Returns a list with all addresses of the given user that the currently\nauthenticated user can see. \n",
        "operationId" : "listAddressesByUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of visible user addresses\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AddressResult"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Addresses" ],
        "summary" : "Creates a new address for the given user",
        "description" : "Creates a new address for the given user. If it is set to\nbe the default one, the previous default (if any) will no longer be\nthe default address for that user.\n",
        "operationId" : "createAddress",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "address",
          "description" : "The address to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddressNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new address",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the address details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/addresses/data-for-new" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns data to create a new address",
        "description" : "Returns configuration data for creating an address for the given user\n",
        "operationId" : "getAddressDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating an address",
            "schema" : {
              "$ref" : "#/definitions/AddressDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/addresses/list-data" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns data for addresses listing of the given user",
        "description" : "Returns data containing the (visible) user addresses, plus additional\ndata related to addresses.\n",
        "operationId" : "getUserAddressesListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for listing addresses",
            "schema" : {
              "$ref" : "#/definitions/UserAddressesListData"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/addresses/primary" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Returns the primary address of a given user",
        "description" : "Returns the primary (default) address of the given user,\nin case it is visible\n",
        "operationId" : "getUserPrimaryAddress",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The primary addresses",
            "schema" : {
              "$ref" : "#/definitions/Address"
            }
          },
          "204" : {
            "description" : "No content when no address is primary"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/client-types" : {
      "get" : {
        "tags" : [ "Clients" ],
        "summary" : "Returns the list of access clients types for a user",
        "description" : "Returns the access client types for a given user that the authenticated\nuser has access.\n",
        "operationId" : "listClientTypesForUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "channel",
          "in" : "query",
          "description" : "If a channel id or internal name is specified, will only list\naccess client types that can be used to access that channel\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of access clients types, with permissions, for the user\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserClientTypePermissions"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-infos" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Lists all (visible) additional contact informations for the user",
        "description" : "Returns a list with all additional contact informations of the given\nuser that the currently authenticated user can see. \n",
        "operationId" : "listContactInfosByUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of visible additional contact information\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContactInfoResult"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Creates a new additional contact information for the given user",
        "description" : "Creates a new additional contact information for the given user.\n",
        "operationId" : "createContactInfo",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "contactInfo",
          "description" : "The additional contact information to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContactInfoNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new additional contact information\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the additional contact information details\n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-infos/data-for-new" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Returns data to create a new additional contact information",
        "description" : "Returns configuration data for creating an additional contact\ninformation for the given user\n",
        "operationId" : "getContactInfoDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating an additional contact information",
            "schema" : {
              "$ref" : "#/definitions/ContactInfoDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-infos/list-data" : {
      "get" : {
        "tags" : [ "ContactInfos" ],
        "summary" : "Returns data for listing additional contact informations of the given user  \n",
        "description" : "Returns data containing the (visible) user additional contact\ninformations, plus additional data related to them.\n",
        "operationId" : "getUserContactInfosListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for listing additional contact informations",
            "schema" : {
              "$ref" : "#/definitions/UserContactInfosListData"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-list" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Searches the contact list of a given user",
        "description" : "Returns a page of contacts, which have the contacted user and custom field values for custom fields set to be returned on the list. This operation is preferred over `GET /{user}/contacts` because it returns contact custom fields, while `GET /{user}/contacts` returns users which are contacts, with the profile fields configured to be returned in a regular users search.\n",
        "operationId" : "searchContactList",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Concat custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customValues=extraDate:|2001-12-31`.      \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Possible options for ordering the results of a contact list. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "relevance" ],
          "x-type" : "ContactOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The contacts of the given owner that match the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContactResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Creates a new contact",
        "description" : "Creates a new contact for the given owner. The contact user needs to be set in the request body, as well as contact custom fields, if any. \n",
        "operationId" : "createContact",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "contact",
          "description" : "The contact to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContactNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new contact",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the contact details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-list/data-for-new" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Returns configuration data for creating a new contact",
        "description" : "Returns data, such as a given contact user details and contact custom fields, for creating a new contact. The contact user is optional. If informed, the result will contain additional details about that user.\n",
        "operationId" : "getContactListDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "contactUser",
          "in" : "query",
          "description" : "The (optional) user to which will be the contact",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating a new contact",
            "schema" : {
              "$ref" : "#/definitions/ContactDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contact-list/data-for-search" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Returns configuration data used when searching for contacts",
        "description" : "Returns data for searching a user's contact list, such as the contact custom fields which are set for being used as search filters.\n",
        "operationId" : "getContactListDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for searching the contact list",
            "schema" : {
              "$ref" : "#/definitions/ContactListDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Search users which are contacts of a specific user",
        "description" : "Returns a page of users that are contacts of the given user. This path works as such for backwards compatibility reason. In general, seaching the contact list of a user should use the `GET /{user}/contact-list` operation instead. That way contact custom fields will be properly handled. However the `GET /{user}/contacts` operation is kept for simple cases where only the contact users, not the contact relation are desired. The fields returned depend on the products, in the profile fields of other users setting. Only fields (both basic or custom) marked to be returned on user list are returned. If no fields are set to be returned, the resulting objects will have the `display` and `shortDisplay` filled in. However, those fields are not returned when another profile field is returned, preventing duplicated data to be returned.\n",
        "operationId" : "searchContacts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "ignoreProfileFieldsInList",
          "in" : "query",
          "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroup",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeGroupSet",
          "in" : "query",
          "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The users in the contact list which match the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/contacts/{contact}" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "This operation is deprecated, use `POST /{user}/contact-list` instead.",
        "description" : "Adds a user in the contact list of the given user",
        "operationId" : "addContact",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "contact",
          "in" : "path",
          "description" : "The user to be added to the contact list",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates whether the contact was really added (true) or if not\nadded, probably because was already a contact (false)\n",
            "schema" : {
              "type" : "boolean"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.12,
        "x-deprecated" : "Use `POST /{user}/contact-list` instead",
        "x-contentType" : "application/json"
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "This operation is deprecated, use `DELETE /contact-list/{id}` instead",
        "description" : "Removes a user from the contact list of the given user",
        "operationId" : "removeContact",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "contact",
          "in" : "path",
          "description" : "The user to be removed from the contact list",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates whether the contact was really removed (true) or if not\nremoved, probably because was not in the contact list (false)\n",
            "schema" : {
              "type" : "boolean"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "409" : {
            "description" : "This operation expected an entity state, but it has resulted in a conflict",
            "schema" : {
              "$ref" : "#/definitions/ConflictError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "deprecated" : true,
        "x-accepts" : "application/json",
        "x-remove-version" : 4.12,
        "x-deprecated" : "Use `DELETE /contact-list/{id}` instead",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/images" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Lists either `profile` or `custom` images for a given user \n",
        "description" : "Returns either `profile` or `custom`\nimages for the given user. For `profile`, the user \nmust be visible by the authenticated user.\nCustom images are used in rich text content, not images for custom fields.\nFor `custom`, the authenticated user must either be\nthe owner or a manager (administrator or broker).\n",
        "operationId" : "listUserImages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The kind of images to be returned.\n  The default value is `profile`\nPossible values are:\n* custom: User custom images are additional images that can be used on rich text contents.\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "custom", "profile" ],
          "x-type" : "UserImageKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of images\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Image"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Adds a new image for the given user. The image kind is either  `profile` or `custom`.\n",
        "description" : "Uploads a new image, either `profile` (by default)\nor `custom`, for the given user.\nCustom images are used in rich text content, not images for custom fields.\nFor uploading images for custom field values, see the documentation for\nthe operation at `POST /images/temp`.\n",
        "operationId" : "uploadUserImage",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The kind of images to be returned.\n  The default value is `profile`\nPossible values are:\n* custom: User custom images are additional images that can be used on rich text contents.\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "custom", "profile" ],
          "x-type" : "UserImageKind"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name for the new image. If not informed will fall back to the\noriginal file name in the form data\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "image",
          "in" : "formData",
          "description" : "The image being uploaded",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "The image is saved, its id is returned in the body and the URL to get the content is returned in the `Location` header\n",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for obtaining the image content"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "multipart/form-data"
      }
    },
    "/{user}/images/list-data" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Returns either `profile` or `custom` images for a given user, plus additional permissions and data \n",
        "description" : "Returns either `profile` or `custom`\nimages for the given user.\nFor `profile`, the user must be visible by the\nauthenticated user.\nFor `custom`, the authenticated user must either be\nthe owner or a manager (administrator or broker).\nCustom images are used in rich text content, not images for custom fields.\nAdditional data, such as the maximum images and whether the images can be\nmanaged by the authenticated user are also returned.\n",
        "operationId" : "getUserImagesListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The kind of images to be returned.\n  The default value is `profile`\nPossible values are:\n* custom: User custom images are additional images that can be used on rich text contents.\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "custom", "profile" ],
          "x-type" : "UserImageKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The images and additional information\n",
            "schema" : {
              "$ref" : "#/definitions/ImagesListData"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/images/order" : {
      "put" : {
        "tags" : [ "Images" ],
        "summary" : "Changes the order of a user's profile images \n",
        "description" : "The new order is defined by the list of ids, so that images appear in\nthe same order as the ids.\n",
        "operationId" : "reorderProfileImages",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "The array of ids (comma-separated) reflecting the desired order",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The image order is changed and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/marketplace" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Searches for advertisements of a specific user.",
        "description" : "Returns a page of advertisements that match a given criteria for a given  user. Equivallent to calling `GET /marketplace?owner={user}`.\n",
        "operationId" : "searchUserAds",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "addressResult",
          "in" : "query",
          "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "all", "nearest", "none" ],
          "x-type" : "AdAddressResultEnum"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Either id or internal name of a category\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Either id or internal name of a currency for the price\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customFields",
          "in" : "query",
          "description" : "Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "expirationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "hasImages",
          "in" : "query",
          "description" : "When set to `true` only advertisements with images are returned\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "simple", "webshop" ],
          "x-type" : "AdKind"
        }, {
          "name" : "latitude",
          "in" : "query",
          "description" : "The reference latitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "longitude",
          "in" : "query",
          "description" : "The reference longitude for distance searches\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "maxDistance",
          "in" : "query",
          "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Indicates how advertisements results are ordered. Possible values are:\n* date: Newest advertisements are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* priceAsc: Smaller prices are returned first. Advertisements without price are returned last.\n* priceDesc: Higher prices are returned first. Advertisements without price are returned last.\n* random: Without definite order\n* relevance: This is the default if keywords are used. Best matching advertisements come first.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "date", "distance", "priceAsc", "priceDesc", "random", "relevance" ],
          "x-type" : "AdOrderByEnum"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "priceRange",
          "in" : "query",
          "description" : "The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "profileFields",
          "in" : "query",
          "description" : "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.\nThe basic profile fields have one of the following identifiers:\n* `name` or `fullName`: Full name;\n* `username`, `loginName` or `login`: Login name;\n* `email`: E-mail;\n* `phone`: Phone;\n* `accountNumber`, `account`: Account number;\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. \nThe specific address fields are:\n* `address`: Searches on any address field (not a specific field);\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n* `address.poBox`: Searches for matching postal box;\n* `address.neighborhood`: Searches by neighborhood;\n* `address.city`: Searches by city;\n* `address.region`: Searches by region (or state);\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "publicationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible status for an advertisement Possible values for each array element are:\n* active: The advertisement is published and can be seen by other users.\n* disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.\n* draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.\n* expired: The advertisement publication period has already expired, and cannot be seen by other users.\n* hidden: The advertisement is manually hidden from other users\n* pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.\n* scheduled: The advertisement has a future publication period, and cannot be seen by other users. \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "disabled", "draft", "expired", "hidden", "pending", "scheduled" ]
          },
          "x-type" : "List<AdStatusEnum>"
        } ],
        "responses" : {
          "200" : {
            "description" : "The advertisements matching the criteria.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Creates a new advertisement for the given user.",
        "description" : "Creates a new advertisement for the given user.\n",
        "operationId" : "createAd",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "in" : "body",
          "name" : "advertisement",
          "description" : "The advertisement to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new advertisement.",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the advertisement details."
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/marketplace/data-for-new" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for creating a new advertisement for a user and kind.\n",
        "description" : "Returns data for creating a new advertisement for the given user. The `kind` should be informed. If not set, `simple` is assumed. Currently only `simple` advertisements can be created through this API.      \n",
        "operationId" : "getAdDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "simple", "webshop" ],
          "x-type" : "AdKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating a new advertisement.",
            "schema" : {
              "$ref" : "#/definitions/AdDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/marketplace/data-for-search" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Returns configuration data for searching advertisements of a user.",
        "description" : "Returns data needed on for a user's advertisements search. \n",
        "operationId" : "getUserAdsDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "kind",
          "in" : "query",
          "description" : "Indicates the kind of advertisement that should be searched. When nothing is passed (default) all kinds will be searched. Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "simple", "webshop" ],
          "x-type" : "AdKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for this user's advertisements.",
            "schema" : {
              "$ref" : "#/definitions/UserAdsDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/operators" : {
      "get" : {
        "tags" : [ "Operators" ],
        "summary" : "Search the operators of a given user",
        "description" : "Returns a page of operators that match a given criteria\n",
        "operationId" : "searchUserOperators",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "ignoreProfileFieldsInList",
          "in" : "query",
          "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "operatorGroups",
          "in" : "query",
          "description" : "An array of operator group ids\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible statuses for an user Possible values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "active", "blocked", "disabled", "pending", "purged", "removed" ]
          },
          "x-type" : "List<UserStatusEnum>"
        } ],
        "responses" : {
          "200" : {
            "description" : "The users matching the criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/operators/data-for-search" : {
      "get" : {
        "tags" : [ "Operators" ],
        "summary" : "Get configuration data for searching operators of the given user",
        "description" : "Returns data with the current configuration regarding the operators\nof the given user \n",
        "operationId" : "getUserOperatorsDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for operators search over a user",
            "schema" : {
              "$ref" : "#/definitions/UserOperatorsDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/orders" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Searches for orders of a specific user.",
        "description" : "Returns a page of orders that match a given criteria for a given user.  The authenticated user must be the seller, buyer or a manager user with  permission to view purchases or sales. Note: A list of statuses is accepted but at this moment only one status  can be specified. \n",
        "operationId" : "searchUserOrders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum order creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "The generated order number according to the webshop settings.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "relatedUser",
          "in" : "query",
          "description" : "Either id or an identification, such as login name, e-mail, etc, for the seller or buyer according whether we are searching for purchases  or sales. The allowed identification methods are those the authenticated user can use on keywords search.    \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sales",
          "in" : "query",
          "description" : "Are we searching for sales or purchases? If not specified it's assumed purchases (i.e `false`)\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The possible statuses for an order Possible values for each array element are:\n* completed: The order was accepted by the seller and/or buyer and the related payment was done.\n* disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency.\n* draft: The order has been created by the seller, but has not yet been sent to the buyer for approval\n* paymentCanceled: The related payment was not done because was canceled after finish the authorization process.\n* paymentDenied: The related payment was not done because was denied.\n* paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization.\n* pendingBuyer: The order is pending by the buyer's action.\n* pendingSeller: The order is pending by the seller's action.\n* rejectedByBuyer: The order was rejected by the buyer.\n* rejectedBySeller: The order was rejected by the seller.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "completed", "disposed", "draft", "paymentCanceled", "paymentDenied", "paymentPending", "pendingBuyer", "pendingSeller", "rejectedByBuyer", "rejectedBySeller" ]
          },
          "x-type" : "List<OrderStatusEnum>"
        } ],
        "responses" : {
          "200" : {
            "description" : "The orders matching the criteria.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserOrderResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords" : {
      "get" : {
        "tags" : [ "Passwords" ],
        "summary" : "Returns the status for each passwords the given user have.",
        "description" : "Returns the passwords, with their statuses, for a given user.\n",
        "operationId" : "listUserPasswords",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of password statuses and permissions\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PasswordStatusAndType"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/list-data" : {
      "get" : {
        "tags" : [ "Passwords" ],
        "summary" : "Returns complete data for each passwords the given user have.",
        "description" : "Returns the passwords, with their statuses, for a given user.\nAlso, permissions on which operations are enabled are also returned.\nIt is also returned additional data, such as the confirmation password\ninput in case some action is needed\n",
        "operationId" : "getUserPasswordsListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of password statuses and permissions\n",
            "schema" : {
              "$ref" : "#/definitions/DataForUserPasswords"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}" : {
      "get" : {
        "tags" : [ "Passwords" ],
        "summary" : "Returns complete data of the given password the given user have.",
        "description" : "Returns the password status and the permissions on which operations are \nenabled for a given user. \n",
        "operationId" : "getUserPasswordsData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The password details and permissions.",
            "schema" : {
              "$ref" : "#/definitions/PasswordStatusAndActions"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/allow-generation" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Allows the given user to generate the password for the first time for the \ngiven type. \n",
        "description" : "Only valid if type's mode is `generated`, it's  marked as requiring administrator authorization and the password status is `neverCreated`.\n",
        "operationId" : "allowGeneration",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`; \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is pending and nothing is returned."
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/change" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Changes a manual password",
        "description" : "Changes a manual password of the given user. When the user is changing his own password he needs to pass in the `oldPassword` as well. When an adminitrator / broker is changing the password of a managed user, he/she can optionally force the password change on next login.  \n",
        "operationId" : "changePassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The parameters for password change",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChangePassword"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is changed, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/disable" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Disables a password, making it unusable until manually re-enabled",
        "description" : "Disables a password. It cannot be used again until enabled again.\n",
        "operationId" : "disablePassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is disabled, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/enable" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Re-enables a disabled a password",
        "description" : "Re-enables a password that was previously disabled.\n",
        "operationId" : "enablePassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is re-enabled, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/reset-and-send" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Generates a new value for a manual password and send it to the user via e-mail \n",
        "description" : "Resets a manual password to a generated value and send it to the user.\n  Can also be used to reset and send the main channel's access password if\n  it is generated. The new password is initially expired, so the user needs\n  to change it on first login.\n",
        "operationId" : "resetAndSendPassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`; \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sendMediums",
          "in" : "query",
          "description" : "The send mediums for which the password will be send. If nothing is  specified will send though all available mediums. Possible values for each array element are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "email", "sms" ]
          },
          "x-type" : "List<SendMediumEnum>"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is reset and sent, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/reset-generated" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Resets a generated password, allowing it to be generated again",
        "description" : "Resets a generated password. This can only be done by administrators / brokers over managed users, and allow them to generate the password value again.\n",
        "operationId" : "resetGeneratedPassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`; \n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is reset, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/passwords/{type}/unblock" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Unblocks a password that has been blocked by exceeding the wrong tries \n",
        "description" : "The password is unblocked if its status is either  `temporarilyBlocked` or `indefinitelyBlocked`.\n",
        "operationId" : "unblockPassword",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Either the id or internal name of the password type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The password is unblocked, and nothing is returned"
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/phones" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Lists all (visible) user phones",
        "description" : "Returns a list with all phones of the given user that the currently\nauthenticated user can see. \n",
        "operationId" : "listPhonesByUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of visible user phones\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PhoneResult"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      },
      "post" : {
        "tags" : [ "Phones" ],
        "summary" : "Creates a new phone for the given user",
        "description" : "Creates a new phone for the given user",
        "operationId" : "createPhone",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "phone",
          "description" : "The phone to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PhoneNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the identifier of the new phone",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the mobile phone details"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "422" : {
            "description" : "Input error. Either a validation error or the maximum allowed items was exceeded\n",
            "schema" : {
              "$ref" : "#/definitions/InputError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/phones/data-for-new" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns data to create a new phone",
        "description" : "Returns configuration data for creating a phone for the given user\n",
        "operationId" : "getPhoneDataForNew",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of phone Possible values are:\n* landLine: A landline phone\n* mobile: A mobile phone\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "landLine", "mobile" ],
          "x-type" : "PhoneKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for creating a phone",
            "schema" : {
              "$ref" : "#/definitions/PhoneDataForNew"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/phones/list-data" : {
      "get" : {
        "tags" : [ "Phones" ],
        "summary" : "Returns data for listing a user's phones",
        "description" : "Returns data containing the (visible) user phones, plus additional data\nrelated to phones.\n",
        "operationId" : "getUserPhonesListData",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An object containing the phones plus additional information\n",
            "schema" : {
              "$ref" : "#/definitions/UserPhonesListData"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Searches for vouchers a user has bought or redeemed",
        "description" : "Returns the list of matching vouchers the given user has either bought (default) or redeemed (if `type` is `redeemed`)\n",
        "operationId" : "searchUserVouchers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "amountRange",
          "in" : "query",
          "description" : "The minimum / maximum voucher amount\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "number",
            "description" : ""
          }
        }, {
          "name" : "creationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "expirationPeriod",
          "in" : "query",
          "description" : "The minimum / maximum voucher expiration date Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "redeemPeriod",
          "in" : "query",
          "description" : "The minimum / maximum voucher redeem date Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "date-time",
            "description" : ""
          }
        }, {
          "name" : "relation",
          "in" : "query",
          "description" : "The ways a voucher is related to an user Possible values are:\n* bought: A voucher the user has bought\n* redeemed: A voucher the user has redeemed\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "bought", "redeemed" ],
          "x-type" : "VoucherRelationEnum"
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "The voucher statuses Possible values for each array element are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "canceled", "expired", "open", "pending", "redeemed" ]
          },
          "x-type" : "List<VoucherStatusEnum>"
        }, {
          "name" : "token",
          "in" : "query",
          "description" : "The voucher token (with or without mask)\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "The ids or internal names of voucher types\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of matching vouchers. The `buyer` and `redeemer` fields will not be returned when searching for bought and redeemed vouchers (respectively), because they are always the user passed as parameter.\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VoucherResult"
              }
            },
            "headers" : {
              "X-Total-Count" : {
                "type" : "integer",
                "description" : "The total number of results. It may be configured in Cyclos to skip the\ntotal count, which is useful on large databases, where the count itself\nmay use a lot of resources from the database. If disabled, this header\nis not returned.\n"
              },
              "X-Page-Size" : {
                "type" : "integer",
                "description" : "The maximum number of results per page"
              },
              "X-Current-Page" : {
                "type" : "integer",
                "description" : "The current page the results are in"
              },
              "X-Has-Next-Page" : {
                "type" : "boolean",
                "description" : "Returns whether there is a next page. This is normally\nalways returned, whether total count is enabled or not.\nIf the total count is not returned, is the only way for\nclients to know whether more results are available or\nnot. \n"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/buy" : {
      "post" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Buys one or more vouchers for the given user",
        "description" : "Buys vouchers. If the payment type has custom fields, the values should be passed as well. This service only returns the vouchers list, if  you need information about the voucher status please use  /{user}/vouchers/buy-with-status. \n",
        "operationId" : "buyVouchers",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The buy voucher parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BuyVoucher"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The identifiers of all generated vouchers\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "An error occurred while buying the voucher(s)",
            "schema" : {
              "$ref" : "#/definitions/BuyVoucherError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/buy-with-status" : {
      "post" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Buys one or more vouchers for the given user returning the status.",
        "description" : "Buys vouchers. If the payment type has custom fields, the values should  be passed as well. The status returned in the result is shared by all vouchers.\n",
        "operationId" : "buyVouchersWithStatus",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "confirmationPassword",
          "in" : "header",
          "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "The buy voucher parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BuyVoucher"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of all bougth vouchers and their identifiers.\n",
            "schema" : {
              "$ref" : "#/definitions/VoucherBoughtResult"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "An error occurred while buying the voucher(s)",
            "schema" : {
              "$ref" : "#/definitions/BuyVoucherError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/data-for-buy" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns data for buying a voucher of a specified type",
        "description" : "Data for buying a voucher",
        "operationId" : "getVoucherDataForBuy",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Either the `id` or `internalName` of the voucher type\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for buying vouchers\n",
            "schema" : {
              "$ref" : "#/definitions/VoucherDataForBuy"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/data-for-redeem" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns initial data for redeeming vouchers",
        "description" : "Returns initial data for redeeming vouchers",
        "operationId" : "getVoucherInitialDataForRedeem",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for redeeming vouchers\n",
            "schema" : {
              "$ref" : "#/definitions/VoucherInitialDataForRedeem"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/data-for-search" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns data for searching vouchers a user has bought or redeemed",
        "description" : "Returns configuration data used to search vouchers the user has either bought (default) or redeemed (if `relation` is `redeemed`)\n",
        "operationId" : "getUserVouchersDataForSearch",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "relation",
          "in" : "query",
          "description" : "Indicates the relation used to filter the vouchers. Possible values are:\n* bought: A voucher the user has bought\n* redeemed: A voucher the user has redeemed\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "bought", "redeemed" ],
          "x-type" : "VoucherRelationEnum"
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration data for searching a user's vouchers\n",
            "schema" : {
              "$ref" : "#/definitions/UserVouchersDataForSearch"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/types-for-buy" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns the voucher types the authenticated user can buy vouchers to the given user",
        "description" : "List the voucher types the user can buy to another user (or himself)\n",
        "operationId" : "listVoucherTypesForBuy",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The list with the voucher types\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VoucherTypeDetailed"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/{token}/data-for-redeem" : {
      "get" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Returns data for redeeming a voucher by token",
        "description" : "Data for redeeming a specific voucher",
        "operationId" : "getVoucherDataForRedeem",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "The voucher token to be redeemed",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The data for redeeming vouchers\n",
            "schema" : {
              "$ref" : "#/definitions/VoucherDataForRedeem"
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "An error occurred while retrieving data for redeeming the voucher",
            "schema" : {
              "$ref" : "#/definitions/RedeemVoucherError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    },
    "/{user}/vouchers/{token}/redeem" : {
      "post" : {
        "tags" : [ "Vouchers" ],
        "summary" : "Redeems a voucher for the given user",
        "description" : "Redeems a voucher \n",
        "operationId" : "redeemVoucher",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
          "required" : true,
          "type" : "string",
          "x-dotInPath" : true
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "The voucher token to be redeemed",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "redeem",
          "description" : "Additional redeem data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RedeemVoucher"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The identifiers of the voucher and the generated payment for redeem\n",
            "schema" : {
              "$ref" : "#/definitions/VoucherRedeemResult"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "URL for viewing the redeemed voucher"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access. Missing or invalid crendentials supplied for such operation",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "403" : {
            "description" : "Permission denied for such operation",
            "schema" : {
              "$ref" : "#/definitions/ForbiddenError"
            }
          },
          "404" : {
            "description" : "An expected data was not found",
            "schema" : {
              "$ref" : "#/definitions/NotFoundError"
            }
          },
          "500" : {
            "description" : "An error occurred while redeeming the voucher",
            "schema" : {
              "$ref" : "#/definitions/RedeemVoucherError"
            }
          }
        },
        "security" : [ {
          "basic" : [ ]
        }, {
          "session" : [ ]
        }, {
          "accessClient" : [ ]
        } ],
        "x-accepts" : "application/json",
        "x-contentType" : "application/json"
      }
    }
  },
  "securityDefinitions" : {
    "session" : {
      "type" : "apiKey",
      "name" : "Session-Token",
      "in" : "header"
    },
    "basic" : {
      "description" : "Stateless, the user and password are sent on every request\n",
      "type" : "basic"
    },
    "accessClient" : {
      "type" : "apiKey",
      "name" : "Access-Client-Token",
      "in" : "header"
    }
  },
  "definitions" : {
    "AccountHistoryOrderByEnum" : {
      "type" : "string",
      "description" : "Contains the possible 'order by' values when searching for transfers  Possible values are:\n* amountAsc: The result is ordered by amount descendant\n* amountDesc: The result is ordered by amount descendant\n* dateAsc: The result is ordered by date ascendant\n* dateDesc: The result is ordered by date descendant\n",
      "enum" : [ "amountAsc", "amountDesc", "dateAsc", "dateDesc" ]
    },
    "AccountKind" : {
      "type" : "string",
      "description" : "Indicates whether an account belongs to system or user Possible values are:\n* system: System account, there is only one account per type in the system. Managed only by administrators\n* user: User account, there is one account of this type per user.\n",
      "enum" : [ "system", "user" ]
    },
    "AdAddressResultEnum" : {
      "type" : "string",
      "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n",
      "enum" : [ "all", "nearest", "none" ]
    },
    "AdCategoriesDisplayEnum" : {
      "type" : "string",
      "description" : "The possible views for simple or webshop advertisements categories Possible values are:\n* images: A list including the categories with its corresponding image.\n* simple: A simplified list of categories.\n",
      "enum" : [ "images", "simple" ]
    },
    "AdDeliveryMethodChargeEnum" : {
      "type" : "string",
      "description" : "The possible charge types for a delivery method of a webshop ad. Possible values are:\n* fixed: The delivery method charge is fixed set by the seller.\n* negotiated: The delivery method charge can be be negotiated between the seller and the buyer.\n",
      "enum" : [ "fixed", "negotiated" ]
    },
    "AdKind" : {
      "type" : "string",
      "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
      "enum" : [ "simple", "webshop" ]
    },
    "AdOrderByEnum" : {
      "type" : "string",
      "description" : "Indicates how advertisements results are ordered. Possible values are:\n* date: Newest advertisements are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* priceAsc: Smaller prices are returned first. Advertisements without price are returned last.\n* priceDesc: Higher prices are returned first. Advertisements without price are returned last.\n* random: Without definite order\n* relevance: This is the default if keywords are used. Best matching advertisements come first.\n",
      "enum" : [ "date", "distance", "priceAsc", "priceDesc", "random", "relevance" ]
    },
    "AdStatusEnum" : {
      "type" : "string",
      "description" : "The possible status for an advertisement Possible values are:\n* active: The advertisement is published and can be seen by other users.\n* disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.\n* draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.\n* expired: The advertisement publication period has already expired, and cannot be seen by other users.\n* hidden: The advertisement is manually hidden from other users\n* pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.\n* scheduled: The advertisement has a future publication period, and cannot be seen by other users. \n",
      "enum" : [ "active", "disabled", "draft", "expired", "hidden", "pending", "scheduled" ]
    },
    "AddressFieldEnum" : {
      "type" : "string",
      "description" : "The address fields that can be configured to be enabled or required Possible values are:\n* addressLine1: The first line of the descriptive address\n* addressLine2: The second line of the descriptive address\n* buildingNumber: The numeric identifier for a land parcel, house, building or other\n* city: The city name\n* complement: The complement (like apartment number)  \n* country: The country, represented as 2-letter, uppercase, ISO 3166-1 code\n* neighborhood: The neighborhood name \n* poBox: The post-office box, is an uniquely addressable box\n* region: The region or state\n* street: The street name\n* zip: A zip code that identifies a specific geographic (postal) delivery area\n",
      "enum" : [ "addressLine1", "addressLine2", "buildingNumber", "city", "complement", "country", "neighborhood", "poBox", "region", "street", "zip" ]
    },
    "AddressQueryFieldEnum" : {
      "type" : "string",
      "description" : "Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possible values are:\n* address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`  \n* city: Filters by city name\n* country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)\n* neighborhood: Filters by neighborhood name \n* poBox: Filters by post-office box (exact match)\n* region: Filters by region or state\n* zip: Filters by zip (postal) code (exact match)\n",
      "enum" : [ "address", "city", "country", "neighborhood", "poBox", "region", "zip" ]
    },
    "AvailabilityEnum" : {
      "type" : "string",
      "description" : "Determines the availability of a data Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
      "enum" : [ "disabled", "optional", "required" ]
    },
    "BadRequestErrorCode" : {
      "type" : "string",
      "description" : "Error codes for 400 Bad request HTTP status  Possible values are:\n* general: Bad request format\n* json: Error in the JSON format\n",
      "enum" : [ "general", "json" ]
    },
    "BalanceLevelEnum" : {
      "type" : "string",
      "description" : "Contains the possible balance levels on the users with balances search  Possible values are:\n* high: High balance, above the medium balance range upper bound\n* low: Low balance, below the medium balance range lower bound\n* medium: Medium balance, between the lower and upper bounds of the medium balance range\n",
      "enum" : [ "high", "low", "medium" ]
    },
    "BasicProfileFieldEnum" : {
      "type" : "string",
      "description" : "The existing user basic profile fields Possible values are:\n* accountNumber: Account number\n* address: Address\n* email: E-mail\n* image: Image\n* name: Full name\n* phone: Phone (either mobile or land-line)\n* username: Login name\n",
      "enum" : [ "accountNumber", "address", "email", "image", "name", "phone", "username" ]
    },
    "BuyVoucherErrorCode" : {
      "type" : "string",
      "description" : "Possible errors when buying a voucher Possible values are:\n* maxAmountForPeriod: The maximum allowed buy amount for a period (example, a month) has been exceeded\n* maxOpenAmount: The maximum open amount for this voucher type for the buyer user has been exceeded\n* maxTotalOpenAmount: The maximum total open amount for this voucher type, for all users, has been exceeded\n* notAllowedForUser: The user attempting to buy vouchers is not allowed to buy vouchers of this type\n* payment: There was an error when performing the payment\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "maxAmountForPeriod", "maxOpenAmount", "maxTotalOpenAmount", "notAllowedForUser", "payment", "unexpected" ]
    },
    "CaptchaProviderEnum" : {
      "type" : "string",
      "description" : "Possibles captcha provider Possible values are:\n* internal: Default provider using images\n",
      "enum" : [ "internal" ]
    },
    "ClientStatusEnum" : {
      "type" : "string",
      "description" : "The status of an access client Possible values are:\n* active: The access client is active, and can operate normally\n* blocked: The access client is blocked and cannot be used until it is unblocked\n* removed: The access client was removed, but had transactions, so couldn't be physically removed\n* unassigned: The access client is unassigned (disconnected) from an (remote) application\n",
      "enum" : [ "active", "blocked", "removed", "unassigned" ]
    },
    "CodeVerificationStatusEnum" : {
      "type" : "string",
      "description" : "The status of a mobile phone verification challenge Possible values are:\n* codeNotSent: There isn't a current code to be verified (for example the was never sent or the code was reset by max attempts reached)\n* expired: The code has expired and can't be used anymore.\n* failed: The code was wrong (it doesn't match the expected value)\n* maxAttemptsReached: The max attempts with an invalid code was reached.\n* success: The code was correct and accepted.\n",
      "enum" : [ "codeNotSent", "expired", "failed", "maxAttemptsReached", "success" ]
    },
    "ConflictErrorCode" : {
      "type" : "string",
      "description" : "Error codes for 409 Conflict entity HTTP status  Possible values are:\n* constraintViolatedOnRemove: An attempt to remove some entity has failed, probably because that entity is in use, that is, is being referenced by some other entity. \n* staleEntity: Failure in the optimistic lock. It means some entity was fetched for editing by 2 clients. Then they both saved it. The first one is successful, but the second one will fail. If you get this error, make sure the `version` field is being sent with the correct value, as fetched from the server.\n",
      "enum" : [ "constraintViolatedOnRemove", "staleEntity" ]
    },
    "ContactOrderByEnum" : {
      "type" : "string",
      "description" : "Possible options for ordering the results of a contact list. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
      "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "relevance" ]
    },
    "CustomFieldControlEnum" : {
      "type" : "string",
      "description" : "The UI control (widget) type that should be used to render this field for edit. Most notably, the types that can have distinct controls are singleSelection, that could be rendered as a single selection widget or radio button group, and multi selection, which could be rendered as a multi selection widget or a checkbox group. Possible values are:\n* checkbox: A checkbox group\n* entitySelection: A widget to select a linked entity (for example, an auto-complete for users)\n* multiSelection: A multi-selection field\n* radio: A radio button group\n* richEditor: An HTML editor\n* singleSelection: A single-selection field\n* text: A single line text\n* textarea: A multi line text\n* upload: A widget to upload a file\n",
      "enum" : [ "checkbox", "entitySelection", "multiSelection", "radio", "richEditor", "singleSelection", "text", "textarea", "upload" ]
    },
    "CustomFieldKind" : {
      "type" : "string",
      "description" : "Determines the kind if a custom field Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
      "enum" : [ "contact", "contactInfo", "custom_operation", "document", "marketplace", "record", "transaction", "user" ]
    },
    "CustomFieldSizeEnum" : {
      "type" : "string",
      "description" : "The size of the widget that should be rendered Possible values are:\n* full: The widget should occupy 100% of the available area\n* large: A large widget\n* medium: A medium widget\n* small: A small widget\n* tiny: A very small widget\n",
      "enum" : [ "full", "large", "medium", "small", "tiny" ]
    },
    "CustomFieldTypeEnum" : {
      "type" : "string",
      "description" : "The data type for the custom field Possible values are:\n* boolean: A boolean value\n* date: A date value\n* decimal: A decimal value\n* dynamicSelection: Single selection based on options generated by a custom script\n* file: Multiple binary files\n* image: Multiple images\n* integer: An integer value\n* linkedEntity: Another entity. Uses the `linkedEntityType` to define which kind of entity is it\n* multiSelection: Multiple enumerated values\n* richText: A multi line string formatted as HTML\n* singleSelection: A single enumerated value\n* string: A single line string\n* text: A multi line string\n* url: An URL\n",
      "enum" : [ "boolean", "date", "decimal", "dynamicSelection", "file", "image", "integer", "linkedEntity", "multiSelection", "richText", "singleSelection", "string", "text", "url" ]
    },
    "DateFormatEnum" : {
      "type" : "string",
      "description" : "The format for dates Possible values are:\n* dmyDash: DD-MM-YYYY\n* dmyPeriod: DD.MM.YYYY\n* dmySlash: DD/MM/YYYY\n* mdyDash: MM-DD-YYYY\n* mdyPeriod: MM.DD.YYYY\n* mdySlash: MM/DD/YYYY\n* ymdDash: YYYY-MM-DD\n* ymdPeriod: YYYY.MM.DD\n* ymdSlash: YYYY/MM/DD\n",
      "enum" : [ "dmyDash", "dmyPeriod", "dmySlash", "mdyDash", "mdyPeriod", "mdySlash", "ymdDash", "ymdPeriod", "ymdSlash" ]
    },
    "DistanceEnum" : {
      "type" : "string",
      "description" : "Unit for measuring distances Possible values are:\n* kilometer: Unit representing kilometers\n* mile: Unit representing miles \n",
      "enum" : [ "kilometer", "mile" ]
    },
    "DistanceUnitEnum" : {
      "type" : "string",
      "description" : "Determines the unit used to measure distances Possible values are:\n* kilometer: Kilometer(s)\n* mile: Mile(s)\n",
      "enum" : [ "kilometer", "mile" ]
    },
    "ErrorKind" : {
      "type" : "string",
      "description" : "Error types associated to the HTTP Status 500 Possible values are:\n* buyVoucher: An error has occurred when buying a voucher \n* forgottenPassword: An error has occurred when changing a forgotten password.\n* general: An unexpected error has occurred\n* initializeNfc: An error has occurred when initializing a NFC token\n* nested: An error which has another internal error at a given property / index\n* nfcAuth: An error has occurred when making an external NFC authentication\n* otp: An error has occurred requesting an OTP\n* payment: An error has occurred when making a payment\n* personalizeNfc: An error has occurred when personalizing a NFC token\n* pos: An error has occurred when receiving a payment on a POS operation\n* redeemVoucher: An error has occurred when redeeming a voucher\n* shoppingCart: An error has occurred when interacting with a shopping cart.\n* shoppingCartCheckout: An error has occurred when checking out a shopping cart.\n",
      "enum" : [ "buyVoucher", "forgottenPassword", "general", "initializeNfc", "nested", "nfcAuth", "otp", "payment", "personalizeNfc", "pos", "redeemVoucher", "shoppingCart", "shoppingCartCheckout" ]
    },
    "ExternalPaymentStatusEnum" : {
      "type" : "string",
      "description" : "The status of an external payment Possible values are:\n* canceled: The external payment was canceled\n* expired: The external payment has expired without the destination user activation\n* failed: The external payment has failed processing\n* pending: The external payment is pending, awaiting the destination user to be activated in Cyclos\n* processed: The external payment was processed, and the destination payment was created\n",
      "enum" : [ "canceled", "expired", "failed", "pending", "processed" ]
    },
    "FileMimeTypeEnum" : {
      "type" : "string",
      "description" : "Possible mime types for uploading files Possible values are:\n* audio: Audio\n* html: HTML document\n* image: Image\n* ms_excel: Microsoft Excel spreadsheet\n* ms_powerpoint: Microsoft PowerPoint presentation\n* ms_word: Microsoft Word document\n* od_presentation: OpenDocument presentation\n* od_spreadsheet: OpenDocument spreadsheet\n* od_text: OpenDocument text\n* others: Other types not included above\n* pdf: PDF document\n* rtf: RTF document\n* text: Plain text\n* video: Video\n",
      "enum" : [ "audio", "html", "image", "ms_excel", "ms_powerpoint", "ms_word", "od_presentation", "od_spreadsheet", "od_text", "others", "pdf", "rtf", "text", "video" ]
    },
    "ForbiddenErrorCode" : {
      "type" : "string",
      "description" : "Error codes for 403 Forbidden HTTP status.  Possible values are:\n* expiredPassword: The password being used has expired\n* illegalAction: Attempt to perform an action that is not allowed on this context\n* inaccessibleChannel: This channel cannot be accessed by the user \n* inaccessiblePrincipal: The used identification method (principal type) cannot be used in this channel\n* indefinitelyBlocked: The password was indefinitely blocked by exceeding the allowed attempts \n* invalidPassword: The password being used is invalid (normally the confirmation password)\n* operatorWithPendingAgreements: The operator cannot access because his owner member has pending agreements\n* pendingAgreements: There is at least one agreement which needs to be accepted in order to access the syste\n* permissionDenied: The operation was denied because a required permission was not granted\n* resetPassword: The password being used was manually reset\n* temporarilyBlocked: The password was temporarily blocked by exceeding the allowed attempts\n",
      "enum" : [ "expiredPassword", "illegalAction", "inaccessibleChannel", "inaccessiblePrincipal", "indefinitelyBlocked", "invalidPassword", "operatorWithPendingAgreements", "pendingAgreements", "permissionDenied", "resetPassword", "temporarilyBlocked" ]
    },
    "ForgottenPasswordErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for a ForgottenPassword error. Possible values are:\n* invalidSecurityAnswer: if the answer for the security question was incorrect.\n* unexpected: An unexpected error has occurred. \n",
      "enum" : [ "invalidSecurityAnswer", "unexpected" ]
    },
    "GroupKind" : {
      "type" : "string",
      "description" : "The possible kinds of group or group set Possible values are:\n* adminGroup: An administrator group\n* brokerGroup: A broker group\n* groupSet: A group set\n* memberGroup: A member (regular user) group\n",
      "enum" : [ "adminGroup", "brokerGroup", "groupSet", "memberGroup" ]
    },
    "IdentificationMethodEnum" : {
      "type" : "string",
      "description" : "The way an user is identified to either perform or receive a payment Possible values are:\n* autocomplete: The client application should search for an user and pass in the id\n* contacts: The client application should access the contact list of the authenticated user and pass the id\n* principalType: The client application should pass in an identification (principal) of the user, such as login name, e-mail and so on\n",
      "enum" : [ "autocomplete", "contacts", "principalType" ]
    },
    "ImageKind" : {
      "type" : "string",
      "description" : "Determines the kind of an image Possible values are:\n* contactInfo: An image of an additional contact information\n* customFieldValue: An image used as custom field value\n* marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop.\n* marketplaceCategory: An image of an advertisement (simple or webshop)\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n* systemCustom: System custom images are additional images an administrator that can be used on rich text contents.\n* temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement).\n* userCustom: User custom images are additional images that can be used on rich text contents.\n* voucherType: An image of a voucher type\n",
      "enum" : [ "contactInfo", "customFieldValue", "marketplace", "marketplaceCategory", "profile", "systemCustom", "temp", "userCustom", "voucherType" ]
    },
    "ImageSizeEnum" : {
      "type" : "string",
      "description" : "The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are:\n* large: Full image size\n* medium: Medium thumbnail\n* small: Small thumbnail\n",
      "enum" : [ "large", "medium", "small" ]
    },
    "InitializeNfcErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for an initialize NFC error  Possible values are:\n* tokenInUse: The token specified for initialization is already in use (exists and it is active)\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "tokenInUse", "unexpected" ]
    },
    "InputErrorCode" : {
      "type" : "string",
      "description" : "Error codes for 422 Unprocessable entity HTTP status. It means there was an error with the input sent to the operation.  Possible values are:\n* aggregated: Represents an aggregation of other input errors\n* dataConversion: Some data conversion has failed. For example, when sending a date with an invalid format\n* fileUploadSize: An uploaded file size exceeds the maximum allowed \n* maxItems: There was an attempt to create an item, but the maximum number of allowed items was exceeded\n* missingParameter: Missing a required request parameter\n* queryParse: A full-text query keywords contained an invalid text\n* validation: One or more of the fields sent contains invalid values\n",
      "enum" : [ "aggregated", "dataConversion", "fileUploadSize", "maxItems", "missingParameter", "queryParse", "validation" ]
    },
    "LinkedEntityTypeEnum" : {
      "type" : "string",
      "description" : "When the type is linkedEntity, indicates the entity type Possible values are:\n* advertisement: An advertisement\n* record: A record (user or system)\n* transaction: A transaction (payment, scheduled payment, payment request, etc)\n* transfer: A transfer\n* user: An user\n",
      "enum" : [ "advertisement", "record", "transaction", "transfer", "user" ]
    },
    "MaturityPolicyEnum" : {
      "type" : "string",
      "description" : "Indicates how a this payment type restricts payments based on the balance maturity Possible values are:\n* always: The payment can always be performed, regardless its maturity\n* history: It the balance maturity ever reached zero in the past, that balance can be used on payment. If later on the maturity went above zero, that new balance cannot be used. Is normally used in conjunction with the maturity table, so the user can pick the balance from past maturity\n* zero: The payment can only be performed if the current maturity is zero\n",
      "enum" : [ "always", "history", "zero" ]
    },
    "MobileOperationEnum" : {
      "type" : "string",
      "description" : "The possible operations the mobile application can perform Possible values are:\n* acceptTicket: Accepts a generated QR code for performing a payment\n* activateNfcDevice: Activate the phone as NFC device\n* assignPos: Assign an access client for POS mode\n* boughtVouchers: View bought vouchers\n* buyVoucher: Buy a voucher\n* createTicket: Generate a QR Code for receive payment\n* deactivateNfcDevice: Deactivate the phone as NFC device\n* formatNfc: Format NFC tags\n* initializeNfc: Initialize NFC tags\n* makeSystemPayment: Perform payments to system\n* makeUserPayment: Perform payments to other users\n* manageContacts: Manage own contacts\n* manageOperators: Manage own/user operators\n* managePasswords: Manage passwords\n* mapDirectory: View the user directory (map)\n* paymentRequests: Search and view payment requests\n* personalizeNfc: Personalize NFC tags \n* personalizeNfcSelf: Personalize NFC tags for the logged user or its operators\n* purchases: Search and view purchased webshops\n* readNfc: Read NFC tags\n* receivePayment: Receive payments from other users\n* redeemVoucher: Redeem vouchers\n* registerUsersAsManager: Register other users as user manager\n* registerUsersAsMember: Register other users as member or operator\n* sendPaymentRequestToSystem: Send payment requests to system\n* sendPaymentRequestToUser: Send payment requests to users\n* unassignPos: Unassign the current access client from POS mode\n* usersSearch: Search other users\n* viewAccountInformation: View own accounts\n* viewAdvertisements: Search and view advertisements and webshop\n* viewRedeemed: View redeemed vouchers\n* viewUserProfile: View the profile of other users\n",
      "enum" : [ "acceptTicket", "activateNfcDevice", "assignPos", "boughtVouchers", "buyVoucher", "createTicket", "deactivateNfcDevice", "formatNfc", "initializeNfc", "makeSystemPayment", "makeUserPayment", "manageContacts", "manageOperators", "managePasswords", "mapDirectory", "paymentRequests", "personalizeNfc", "personalizeNfcSelf", "purchases", "readNfc", "receivePayment", "redeemVoucher", "registerUsersAsManager", "registerUsersAsMember", "sendPaymentRequestToSystem", "sendPaymentRequestToUser", "unassignPos", "usersSearch", "viewAccountInformation", "viewAdvertisements", "viewRedeemed", "viewUserProfile" ]
    },
    "NfcAuthErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for an NFC authentication error  Possible values are:\n* pos: A POS exception has happened when trying to make an external authenticate. See the `posError` field for more details.  \n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "pos", "unexpected" ]
    },
    "NfcTagKeyEnum" : {
      "type" : "string",
      "description" : "Represent the different keys stored on NFC tags Possible values are:\n* appMaster: The application master key. Not used for now (it could be used for application management).\n* operational: A key stored within the application that is used to guarantee the presence of the card in sensitive operations, such as receive payment (POS) or personalize the tag\n* piccMaster: The PICC master key, used to format the tag\n",
      "enum" : [ "appMaster", "operational", "piccMaster" ]
    },
    "NotificationEntityTypeEnum" : {
      "type" : "string",
      "description" : "The type of the entity referenced by the notification, if any. Possible values are:\n* adQuestion: The entity is an advertisement question\n* errorLog: The entity is an error log\n* feedback: The entity is a transaction feedback\n* installment: The entity is a scheduled payment installment\n* marketplace: The entity is a `simple` or `webshop` advertisement \n* network: The entity is a network\n* occurrence: The entity is a failed occurrence of a recurring payment\n* order: The entity is an order\n* passwordType: The entity is a password type\n* reference: The entity is an user reference\n* systemAlert: The entity is a system alert\n* token: The entity is a token (user identification)\n* transaction: The entity is a transaction\n* transfer: The entity is a transfer\n* user: The entity is an user\n* userAlert: The entity is an user alert\n* userImportedFile: The entity is an user imported file\n* voucher: The entity is a voucher\n* voucherType: The entity is a voucher type\n",
      "enum" : [ "adQuestion", "errorLog", "feedback", "installment", "marketplace", "network", "occurrence", "order", "passwordType", "reference", "systemAlert", "token", "transaction", "transfer", "user", "userAlert", "userImportedFile", "voucher", "voucherType" ]
    },
    "NotificationLevelEnum" : {
      "type" : "string",
      "description" : "Defines the severity level of a notification shown to users Possible values are:\n* error: An error message, when some operation went wrong  \n* information: A general informative message\n* warning: A warning message, when special caution is required\n",
      "enum" : [ "error", "information", "warning" ]
    },
    "NotificationTypeEnum" : {
      "type" : "string",
      "description" : "The different notification types generated for for users / administrators. Possible values are:\n* adAuthorized: A notification generated if a notification created when an advertisement is authorized.\n* adExpired: A notification generated if a notification created when an advertisement expires.\n* adInterestNotification: A notification generated if a notification created by a new advertisement (Simple or Webshop).\n* adPendingAuthorization: A notification generated if an ad is pending by broker authorization.\n* adPendingByAdminAuthorization: An admin notification generated if an advertisement is pending for authorization.\n* adQuestionAnswered: A notification generated if a question answered to some AD (Simple or Webshop).\n* adQuestionCreated: A notification generated if a question created to some AD (Simple or Webshop).\n* adRejected: A notification generated if a notification created when an advertisement authorization is rejected.\n* allNonSmsPerformedPayments: A notification generated if a user performed a new payment through a channel that is not the SMS channel.\n* applicationError: An admin notification generated if an application error has occurred.\n* articleOutOfStock: A notification generated if a webshop product is out of stock.\n* authorizedPaymentCanceled: A notification generated if the authorization of a payment was canceled. This notification is to be sent to the payer.\n* authorizedPaymentDenied: A notification generated if a the authorization of a payment was denied. This notification is to be sent to the payer.\n* authorizedPaymentSucceeded: A notification generated if the authorization of a payment succeeded (the payment went successfully through its final authorization and is now processed). This notification is to be sent to the payer.\n* boughtVouchersAboutToExpire: A notification generated if a one or more bought vouchers are about to expire.\n* boughtVouchersExpirationDateChanged: A notification generated if a bought voucher has new expiration date.\n* boughtVouchersExpired: A notification generated if one or more bought vouchers have expired.\n* brokerAssigned: A notification generated if a broker has been assigned to a user.\n* brokerUnassigned: A notification generated if a broker has been unassigned from a user.\n* externalPaymentExpired: A notification generated if the external payment has reached the expiration date.\n* externalPaymentPerformedFailed: A notification generated if the performed external payment has failed processing.\n* externalPaymentReceivedFailed: A notification generated if the received external payment has failed processing.\n* externalUserPaymentExpired: An admin notification generated if an external payment has expired.\n* externalUserPaymentPerformedFailed: An admin notification generated if an external payment failed processing.\n* feedbackChanged: A notification generated if a transaction feedback was modified.\n* feedbackCreated: A notification generated if a transaction feedback was created.\n* feedbackExpirationReminder: A notification generated if a transaction feedback is about to expire.\n* feedbackOptional: A notification generated if a performed payment can have an optional feedback.\n* feedbackReplyCreated: A notification generated if a transaction feedback was replied.\n* feedbackRequired: A notification generated if a performed payment needs to be given a feedback.\n* generatedVouchersAboutToExpire: An admin notification generated if a voucher will expire in a few days.\n* generatedVouchersExpired: An admin notification generated if a voucher has expired.\n* incomingRecurringPaymentCanceled: A notification generated if a recurring payment to a user has been canceled (only if the recurring payment is shown to receiver).\n* incomingRecurringPaymentFailed: A notification generated if a recurring payment to a user has failed (only if the recurring payment is shown to receiver).\n* incomingRecurringPaymentReceived: A notification generated if a recurring payment to a user was received (only if the recurring payment is shown to receiver).\n* incomingScheduledPaymentCanceled: A notification generated if a scheduled payment to a user has been canceled (only if the scheduled payment is shown to receiver).\n* incomingScheduledPaymentFailed: A notification generated if a scheduled payment to a user has failed (only if the scheduled payment is shown to receiver).\n* incomingScheduledPaymentReceived: A notification generated if a scheduled payment to a user was received (only if the scheduled payment is shown to receiver).\n* limitChange: A notification generated if a limit (lower/upper) has changed on an account.\n* lowStockQuantity: A notification generated if a product with stock quantity under limit.\n* maxSmsPerMonthReached: A notification generated if the maximum number of SMS messages per month has been reached.\n* memberAssigned: A notification generated if an user has been assigned to a broker.\n* memberUnassigned: A notification generated if an user has been unassigned from a broker.\n* networkCreated: An admin notification generated if a network is created.\n* newToken: A notification generated if a token / card has been created.\n* newTokenPendingActivation: A notification generated if a token / card has been created, but needs to be activated before being used.\n* operatorAuthorizedPaymentApprovedStillPending: A notification generated if a payment performed by an operator with auhorization type `operator` was approved, but there is at least one authorization level.\n* operatorAuthorizedPaymentCanceled: A notification generated if a payment performed by an operator with authorization type `operator` was canceled.\n* operatorAuthorizedPaymentDenied: A notification generated if a payment performed by an operator with authorization type `operator` was denied.\n* operatorAuthorizedPaymentSucceeded: A notification generated if a payment performed by an operator with authorization type `operator` was approved and there was no further authorization.\n* operatorPaymentAwaitingAuthorization: A notification generated if a payment performed by an operator with authorization type `operator` is pending by authorization.\n* orderCanceledBuyer: A notification generated if a pending order has been canceled.\n* orderCanceledSeller: A notification generated if a pending order has been canceled.\n* orderCreated: A notification generated if a new web shop order created from a shopping cart checkout.\n* orderPaymentCanceledBuyer: A notification generated if an order payment was canceled by authorizer.\n* orderPaymentCanceledSeller: A notification generated if an order payment was canceled by authorizer.\n* orderPaymentDeniedBuyer: A notification generated if an order payment was denied by authorizer.\n* orderPaymentDeniedSeller: A notification generated if an order payment was denied by authorizer.\n* orderPendingAuthorizationBuyer: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.\n* orderPendingAuthorizationSeller: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.\n* orderPendingBuyer: A notification generated if an order pending buyer approval.\n* orderPendingDeliveryDataBuyer: A notification generated if an order buyer needs to fill in the delivery data.\n* orderPendingDeliveryDataSeller: A notification generated if an order seller needs to fill in the delivery data.\n* orderRealizedBuyer: A notification generated if an order accepted by buyer (sent to seller).\n* orderRealizedSeller: A notification generated if an order accepted by seller (sent to buyer).\n* orderRejectedByBuyer: A notification generated if an order rejected by buyer.\n* orderRejectedBySeller: A notification generated if an order rejected by seller.\n* passwordStatusChanged: A notification generated if a password status has changed.\n* paymentAwaitingAdminAuthorization: An admin notification generated if a payment is awaiting for authorization.\n* paymentAwaitingAuthorization: A notification generated if a user must authorize a pending payment.\n* paymentPerformed: An admin notification generated if a payment is performed.\n* paymentReceived: A notification generated if a user received a new payment.\n* paymentRequestCanceled: A notification generated if a payment request was canceled.\n* paymentRequestDenied: A notification generated if a payment request was denied.\n* paymentRequestExpirationDateChanged: A notification generated if the payment request's expiration date has changed.\n* paymentRequestExpired: A notification generated if a payment request has expired.\n* paymentRequestProcessed: A notification generated if a payment request was processed.\n* paymentRequestReceived: A notification generated if a payment request was received.\n* recurringPaymentFailed: A notification generated if a recurring payment from a user has failed (probably because of lack of funds).\n* recurringPaymentOccurrenceProcessed: A notification generated if an occurrence of an outgoing recurring payment was processed.\n* referenceChanged: A notification generated if a reference was modified.\n* referenceCreated: A notification generated if a reference has been set.\n* salePendingBuyer: A notification generated if a sale pending buyer approval.\n* saleRealizedBuyer: A notification generated if a sale accepted by buyer (sent to seller).\n* saleRejectedSeller: A notification generated if a sale rejected by seller.\n* scheduledPaymentFailed: A notification generated if a scheduled payment from a user has failed (probably because of lack of funds).\n* scheduledPaymentInstallmentProcessed: A notification generated if a scheduled payment to a user has been processed.\n* scheduledPaymentRequestFailed: A notification generated if a payment request which was scheduled has failed processing (probably because of lack of funds), and is being reopened.\n* smsPerformedPayment: A notification generated if a user performed a new payment through SMS.\n* systemAlert: An admin notification generated if a system alert as occurred.\n* ticketWebhookFailed: A notification generated if the invocation of a webhook after (a successful) ticket approval has failed.\n* tokenStatusChanged: A notification generated if a token / card status has changed.\n* userAlert: An admin notification generated if a member alert as occurred.\n* userImport: An admin notification generated if a user import has been done.\n* userRegistration: An admin notification generated if a new user has been registered.\n* userStatusChanged: A notification generated if a user status has changed.\n* voucherBuyingAboutToExpire: An admin notification generated if a voucher type allowing buy is about to expire.\n",
      "enum" : [ "adAuthorized", "adExpired", "adInterestNotification", "adPendingAuthorization", "adPendingByAdminAuthorization", "adQuestionAnswered", "adQuestionCreated", "adRejected", "allNonSmsPerformedPayments", "applicationError", "articleOutOfStock", "authorizedPaymentCanceled", "authorizedPaymentDenied", "authorizedPaymentSucceeded", "boughtVouchersAboutToExpire", "boughtVouchersExpirationDateChanged", "boughtVouchersExpired", "brokerAssigned", "brokerUnassigned", "externalPaymentExpired", "externalPaymentPerformedFailed", "externalPaymentReceivedFailed", "externalUserPaymentExpired", "externalUserPaymentPerformedFailed", "feedbackChanged", "feedbackCreated", "feedbackExpirationReminder", "feedbackOptional", "feedbackReplyCreated", "feedbackRequired", "generatedVouchersAboutToExpire", "generatedVouchersExpired", "incomingRecurringPaymentCanceled", "incomingRecurringPaymentFailed", "incomingRecurringPaymentReceived", "incomingScheduledPaymentCanceled", "incomingScheduledPaymentFailed", "incomingScheduledPaymentReceived", "limitChange", "lowStockQuantity", "maxSmsPerMonthReached", "memberAssigned", "memberUnassigned", "networkCreated", "newToken", "newTokenPendingActivation", "operatorAuthorizedPaymentApprovedStillPending", "operatorAuthorizedPaymentCanceled", "operatorAuthorizedPaymentDenied", "operatorAuthorizedPaymentSucceeded", "operatorPaymentAwaitingAuthorization", "orderCanceledBuyer", "orderCanceledSeller", "orderCreated", "orderPaymentCanceledBuyer", "orderPaymentCanceledSeller", "orderPaymentDeniedBuyer", "orderPaymentDeniedSeller", "orderPendingAuthorizationBuyer", "orderPendingAuthorizationSeller", "orderPendingBuyer", "orderPendingDeliveryDataBuyer", "orderPendingDeliveryDataSeller", "orderRealizedBuyer", "orderRealizedSeller", "orderRejectedByBuyer", "orderRejectedBySeller", "passwordStatusChanged", "paymentAwaitingAdminAuthorization", "paymentAwaitingAuthorization", "paymentPerformed", "paymentReceived", "paymentRequestCanceled", "paymentRequestDenied", "paymentRequestExpirationDateChanged", "paymentRequestExpired", "paymentRequestProcessed", "paymentRequestReceived", "recurringPaymentFailed", "recurringPaymentOccurrenceProcessed", "referenceChanged", "referenceCreated", "salePendingBuyer", "saleRealizedBuyer", "saleRejectedSeller", "scheduledPaymentFailed", "scheduledPaymentInstallmentProcessed", "scheduledPaymentRequestFailed", "smsPerformedPayment", "systemAlert", "ticketWebhookFailed", "tokenStatusChanged", "userAlert", "userImport", "userRegistration", "userStatusChanged", "voucherBuyingAboutToExpire" ]
    },
    "NumberFormatEnum" : {
      "type" : "string",
      "description" : "The format for numbers Possible values are:\n* commaAsDecimal: 9.999,99\n* periodAsDecimal: 9,999.99\n",
      "enum" : [ "commaAsDecimal", "periodAsDecimal" ]
    },
    "OperationPageContextEnum" : {
      "type" : "string",
      "description" : "The context an operation with `resultType` is `$enum:OperationResultTypeEnum.resultPage` runs Possible values are:\n* csv: Export results as Comma-Separated-Values (CSV)\n* page: Normal search, returning the data as rows in the result\n* pdf: Export results as printable PDF\n",
      "enum" : [ "csv", "page", "pdf" ]
    },
    "OperationResultTypeEnum" : {
      "type" : "string",
      "description" : "The kind of data a custom operation execution is expected to return Possible values are:\n* externalRedirect: The main execution returns an URL for another service. Then a second execution is expected when this other service redirects the client back to Cyclos\n* fileDownload: Returns a file, which can be downloaded\n* notification: Returns a text to be displayed as a simple notification\n* plainText: Returns a plain text to be displayed in a page, and optionally printed\n* resultPage: Returns a page or list of results, which should be displayed in a table like any other search / list\n* richText: Returns an HTML formatted text to be displayed in a page, and optionally printed\n* url: The result should be an URL to which the client should be redirected to\n",
      "enum" : [ "externalRedirect", "fileDownload", "notification", "plainText", "resultPage", "richText", "url" ]
    },
    "OperationRowActionEnum" : {
      "type" : "string",
      "description" : "The action that should be performed when the user clicks a row in the results table Possible values are:\n* location: Navigate to a standard Cyclos location\n* operation: Run an internal custom operation, which is set on the custom operation itself\n* url: Navigate to an arbitrary URL, which is set in the custom operation itself\n",
      "enum" : [ "location", "operation", "url" ]
    },
    "OperationScopeEnum" : {
      "type" : "string",
      "description" : "The scope determines where does a custom operation can be executed Possible values are:\n* advertisement: A custom operation which is executed over an advertisement\n* bulkAction: A custom operation executed over a set of users (one at a time)\n* contact: A custom operation which is executed over a contact in a user's contact list\n* contactInfo: A custom operation which is executed over an additional contact information, which is part of the user profile\n* internal: A custom operation which is executed by another custom operation\n* menu: A custom operation which is visible in a custom menu item\n* record: A custom operation which is executed over a record\n* system: A general, system custom operation\n* transfer: A custom operation which is executed over a transfer\n* user: A custom operation over a single user\n",
      "enum" : [ "advertisement", "bulkAction", "contact", "contactInfo", "internal", "menu", "record", "system", "transfer", "user" ]
    },
    "OrderStatusEnum" : {
      "type" : "string",
      "description" : "The possible statuses for an order Possible values are:\n* completed: The order was accepted by the seller and/or buyer and the related payment was done.\n* disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency.\n* draft: The order has been created by the seller, but has not yet been sent to the buyer for approval\n* paymentCanceled: The related payment was not done because was canceled after finish the authorization process.\n* paymentDenied: The related payment was not done because was denied.\n* paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization.\n* pendingBuyer: The order is pending by the buyer's action.\n* pendingSeller: The order is pending by the seller's action.\n* rejectedByBuyer: The order was rejected by the buyer.\n* rejectedBySeller: The order was rejected by the seller.\n",
      "enum" : [ "completed", "disposed", "draft", "paymentCanceled", "paymentDenied", "paymentPending", "pendingBuyer", "pendingSeller", "rejectedByBuyer", "rejectedBySeller" ]
    },
    "OtpErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for an OTP error. Possible values are:\n* errorSendingSms: An error has occurred trying to send the OTP through SMS.\n* unexpected: An unexpected error has occurred. \n",
      "enum" : [ "errorSendingSms", "unexpected" ]
    },
    "OutboundSmsStatusEnum" : {
      "type" : "string",
      "description" : "Statuses for an outbound SMS message sent to an user. Possible values are:\n* gatewayUreachable: Network problem, or gateway server down\n* invalid: The parameters for sending an SMS message were invalid\n* maxMessagesReached: The maximum SMS messages for the user (or guest) have been reached\n* rejected: The gateway has rejected the SMS message\n* success: The SMS message was successfully sent\n* timeout: Timeout while connecting or waiting for a gateway server reply\n* unexpected: An unexpected error has occurred\n",
      "enum" : [ "gatewayUreachable", "invalid", "maxMessagesReached", "rejected", "success", "timeout", "unexpected" ]
    },
    "PasswordInputMethodEnum" : {
      "type" : "string",
      "description" : "Determines how passwords should be visually entered by users Possible values are:\n* textBox: A simple string should be requested\n* virtualKeyboard: A series of buttons should be presented to allow enter the password.\n",
      "enum" : [ "textBox", "virtualKeyboard" ]
    },
    "PasswordModeEnum" : {
      "type" : "string",
      "description" : "Indicates how a password is handled Possible values are:\n* generated: Passwords are always generated\n* manual: Passwords are manually typed by users\n* otp: One Time Passwords. are always generated and can be used only once\n* script: Passwords are not stored in Cyclos, but handed-over for a script to verify them.  Is normally used to implement single-sign-on with other apps.\n",
      "enum" : [ "generated", "manual", "otp", "script" ]
    },
    "PasswordStatusEnum" : {
      "type" : "string",
      "description" : "The password status Possible values are:\n* active: The password is active and valid\n* disabled: The password has been manually disabled\n* expired: The password is expired\n* indefinitelyBlocked: The password is blocked by exceeding the maximum attempts until it is manually unblocked\n* neverCreated: The password has never been created for the user\n* pending: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords)\n* reset: The password has been reset (can be used for login but must then be changed)\n* temporarilyBlocked: The password is temporarily blocked by exceeding the maximum attempts\n",
      "enum" : [ "active", "disabled", "expired", "indefinitelyBlocked", "neverCreated", "pending", "reset", "temporarilyBlocked" ]
    },
    "PaymentErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for a payment error  Possible values are:\n* dailyAmountExceeded: The maximum amount allowed per day was exceeded.  \n* dailyPaymentsExceeded: The maximum count of payments allowed per day was exceeded.\n* destinationUpperLimitReached: The upper balance limit of the destination account was exceeded.\n* insufficientBalance: The account selected for the payment does not have enough balance\n* monthlyAmountExceeded: The maximum amount allowed per month was exceeded.\n* monthlyPaymentsExceeded: The maximum count of payments allowed per month was exceeded.\n* pos: A POS exception has happened when performing this payment. See the `posError` field for more details.   \n* timeBetweenPaymentsNotMet: The minimum time between payments was not met.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n* weeklyAmountExceeded: The maximum amount allowed per week was exceeded.\n* weeklyPaymentsExceeded: The maximum count of payments allowed per week was exceeded.\n",
      "enum" : [ "dailyAmountExceeded", "dailyPaymentsExceeded", "destinationUpperLimitReached", "insufficientBalance", "monthlyAmountExceeded", "monthlyPaymentsExceeded", "pos", "timeBetweenPaymentsNotMet", "unexpected", "weeklyAmountExceeded", "weeklyPaymentsExceeded" ]
    },
    "PaymentRequestSchedulingEnum" : {
      "type" : "string",
      "description" : "Determines how a payment request is scheduled. When not specified, the payment request is processed directly. Possible values are:\n* direct: The scheduled payment won't be scheduled, but paid directly\n* scheduled: The scheduled payment will be scheduled, once accepting, triggering a given number of installments\n",
      "enum" : [ "direct", "scheduled" ]
    },
    "PaymentRequestStatusEnum" : {
      "type" : "string",
      "description" : "The status of a payment request Possible values are:\n* canceled: The payment request was canceled\n* denied: The payment request was denied by the receiver\n* expired: The payment request has expired - the received did not respond until the expiration date\n* open: The payment request is open and can be accepted\n* processed: The payment request was processed, and either a direct or scheduled payment was created from it\n* scheduled: The payment request has been accepted, and scheduled for processing on a future date\n",
      "enum" : [ "canceled", "denied", "expired", "open", "processed", "scheduled" ]
    },
    "PaymentSchedulingEnum" : {
      "type" : "string",
      "description" : "Determines how a payment is scheduled. When not specified, direct payments are performed. Possible values are:\n* direct: The payment won't be scheduled, but paid directly\n* recurring: The payment will be recurring, repeated either by a limited number of occurrences or until cancel\n* scheduled: The payment will be scheduled, either to a single future date or multiple installments\n",
      "enum" : [ "direct", "recurring", "scheduled" ]
    },
    "PersonalizeNfcErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for a personalize NFC error  Possible values are:\n* tokenInUse: The token specified for personalization is already in use (exists and it is active)\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "tokenInUse", "unexpected" ]
    },
    "PhoneKind" : {
      "type" : "string",
      "description" : "Type of phone Possible values are:\n* landLine: A landline phone\n* mobile: A mobile phone\n",
      "enum" : [ "landLine", "mobile" ]
    },
    "PhysicalTokenTypeEnum" : {
      "type" : "string",
      "description" : "The possible physical type for tokens. Determines how applications interact with hardware in order to read the token value. Possible values are:\n* barcode: A 1d barcode printed on a card\n* nfcDevice: A phone (or other device) with NFC support\n* nfcTag: A NFC tag, normally a DESFire NFC card\n* other: Other\n* qrCode: A QR-code\n* swipe: A swipe card\n",
      "enum" : [ "barcode", "nfcDevice", "nfcTag", "other", "qrCode", "swipe" ]
    },
    "PosErrorCode" : {
      "type" : "string",
      "description" : "Application-specific error codes for a POS operation error  Possible values are:\n* payerInaccessiblePrincipal: The specified payer cannot use the given identification method (principal type) in the POS channel.\n* payerNotInChannel: The specified payer user does not participate on the POS channel.\n* payerNotOperative: The specified payer has some restriction that renders he/she inoperative for POS operations. An example of such case is when the user has pending agreements.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "payerInaccessiblePrincipal", "payerNotInChannel", "payerNotOperative", "unexpected" ]
    },
    "PrincipalTypeKind" : {
      "type" : "string",
      "description" : "The kind of a principal type (user identification method) Possible values are:\n* accessClient: An access client token (remote application) identifies the user \n* accountNumber: An account number identifies the user\n* customField: A unique custom field identifies the user \n* email: The email identifies the user\n* mobilePhone: A mobile phone number identifies the user\n* token: A token identifies the user\n* username: The username identifies the user\n",
      "enum" : [ "accessClient", "accountNumber", "customField", "email", "mobilePhone", "token", "username" ]
    },
    "PushNotificationEventKind" : {
      "type" : "string",
      "description" : "Kind of events that can be triggered on push notifications  Possible values are:\n* accountStatus: The account status (balance, reserved amount, etc) has changed\n* loggedOut: The current session has been invalidated\n* newMessage: New message on the user's inbox\n* newNotification: New received notification\n* ticket: A ticket status has changed\n",
      "enum" : [ "accountStatus", "loggedOut", "newMessage", "newNotification", "ticket" ]
    },
    "RecordKind" : {
      "type" : "string",
      "description" : "The possible kinds of a record, which can either belong to system or to an user Possible values are:\n* system: The record belongs to the system, and is unrelated to an user\n* user: The record belongs to a specific user\n",
      "enum" : [ "system", "user" ]
    },
    "RecordLayoutEnum" : {
      "type" : "string",
      "description" : "The layout this record should be presented Possible values are:\n* list: Should show a regular search filters / list\n* single: There should be a single record, with the form directly\n* tiled: Should show the record list with a form to quickly add a new \n",
      "enum" : [ "list", "single", "tiled" ]
    },
    "RecurringPaymentOccurrenceStatusEnum" : {
      "type" : "string",
      "description" : "The status of a recurring payment occurrence Possible values are:\n* failed: The occurrence has failed processing (probably because there was not enough funds in the payer account)\n* processed: The occurrence was correctly processed, generating a transfer\n",
      "enum" : [ "failed", "processed" ]
    },
    "RecurringPaymentStatusEnum" : {
      "type" : "string",
      "description" : "The status of a recurring payment Possible values are:\n* canceled: The recurring payment was manually canceled\n* closed: The recurring payment is closed, as the last scheduled occurrence was processed\n* open: The recurring payment is open, as there are more future occurrences\n",
      "enum" : [ "canceled", "closed", "open" ]
    },
    "RedeemVoucherErrorCode" : {
      "type" : "string",
      "description" : "Possible errors when redeeming a voucher Possible values are:\n* notAllowedForUser: This user cannot redeem this voucher\n* notAllowedForVoucher: This voucher cannot be redeemed\n* notAllowedToday: This voucher cannot be redeemed today \n* notAllowedYet: The redeem period for this voucher has not arrived yet\n* payment: There was an error when performing the payment\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n* userBlocked: The user has been blocked by exceeding redeem tries\n",
      "enum" : [ "notAllowedForUser", "notAllowedForVoucher", "notAllowedToday", "notAllowedYet", "payment", "unexpected", "userBlocked" ]
    },
    "RoleEnum" : {
      "type" : "string",
      "description" : "The main role the user has. Possible values are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
      "enum" : [ "administrator", "broker", "member", "operator" ]
    },
    "ScheduledPaymentInstallmentStatusEnum" : {
      "type" : "string",
      "description" : "The status of a scheduled payment installment Possible values are:\n* blocked: The installment is blocked, and won't be automatically processed on its due date\n* canceled: The installment was canceled\n* failed: The installment processing failed, for example, because there was no funds in the source account\n* processed: The installment was processed, generating a transfer\n* scheduled: The installment is scheduled for a future date\n* settled: The installment was marked as settled by the receiver\n",
      "enum" : [ "blocked", "canceled", "failed", "processed", "scheduled", "settled" ]
    },
    "ScheduledPaymentStatusEnum" : {
      "type" : "string",
      "description" : "The status of a scheduled payment Possible values are:\n* blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again\n* canceled: The scheduled payment, as well as all open installments were canceled\n* closed: The scheduled payment is closed\n* open: The scheduled payment has open installments\n",
      "enum" : [ "blocked", "canceled", "closed", "open" ]
    },
    "SendMediumEnum" : {
      "type" : "string",
      "description" : "Mediums used to send information to the user (e.g: a confirmation code) Possible values are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
      "enum" : [ "email", "sms" ]
    },
    "ShoppingCartCheckoutErrorCode" : {
      "type" : "string",
      "description" : "Possible errors when checking out a shopping cart. Possible values are:\n* insufficientBalance: The origin account of the selected payment type used to make the amount reservation does not have enough balance.\n* products: There was an error related to the products contained in he shopping cart.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
      "enum" : [ "insufficientBalance", "products", "unexpected" ]
    },
    "ShoppingCartErrorCode" : {
      "type" : "string",
      "description" : "Possible errors when interacting with a shopping cart. Possible values are:\n* canNotBuyFromSeller: The authenticated user is not visible by the webshop's seller\n* notEnoughStock: There is not enough stock of the webshop ad to fulfill the requested quantity\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information. \n",
      "enum" : [ "canNotBuyFromSeller", "notEnoughStock", "unexpected" ]
    },
    "ShoppingCartItemAvailabilityEnum" : {
      "type" : "string",
      "description" : "The possible status of a webshop advertisement in relation to its availability  Possible values are:\n* available: The webshop advertisement is available and can be purchased\n* outOfStock: The webshop advertisement is now out of stock\n* unavailable: The webshop advertisement has been made unavailable and cannot be purchased anymore \n",
      "enum" : [ "available", "outOfStock", "unavailable" ]
    },
    "ShoppingCartItemQuantityAdjustmentEnum" : {
      "type" : "string",
      "description" : "The possible adjustments to a quantity-limited product added to shopping cart Possible values are:\n* max: The quantity was reduced to honor the maximum allowed quantity\n* min: The quantity was raised to honor the minimum allowed quantity\n* stock: The quantity was reduced to the maximum available stock quantity\n",
      "enum" : [ "max", "min", "stock" ]
    },
    "TempImageTargetEnum" : {
      "type" : "string",
      "description" : "The possible targets for a temporary image Possible values are:\n* advertisement: The image will be used for an advertisement of a specific user\n* contactInfo: The image will be used for an additional contact information of a specific user\n* customValue: The image will be used for a value of a specific custom field\n* userProfile: The image will be used as a profile image for an existing user\n* userRegistration: The image will be used as a profile image for a newly registered user\n",
      "enum" : [ "advertisement", "contactInfo", "customValue", "userProfile", "userRegistration" ]
    },
    "TicketStatusEnum" : {
      "type" : "string",
      "description" : "The status of a ticket Possible values are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
      "enum" : [ "approved", "canceled", "expired", "open", "processed" ]
    },
    "TimeFieldEnum" : {
      "type" : "string",
      "description" : "Determines a time field, such as seconds, hours or months Possible values are:\n* days: Day(s)\n* hours: Hour(s)\n* millis: Millisecond(s)\n* minutes: Minute(s)\n* months: Month(s)\n* seconds: Second(s)\n* weeks: Week(s)\n* years: Year(s)\n",
      "enum" : [ "days", "hours", "millis", "minutes", "months", "seconds", "weeks", "years" ]
    },
    "TimeFormatEnum" : {
      "type" : "string",
      "description" : "The format for times Possible values are:\n* h12: 12-hour with AM/PM indicator\n* h24: 24-hour\n",
      "enum" : [ "h12", "h24" ]
    },
    "TokenStatusEnum" : {
      "type" : "string",
      "description" : "The possible statuses for a token Possible values are:\n* activationExpired: The token has exceeded the activation deadline.\n* active: The token is active and can be used.\n* blocked: The token is blocked from being used.\n* canceled: The token is canceled and cannot be used.\n* expired: The token has exceeded the expiration date.\n* pending: The token has been assigned to an user, but it's still pending for activation.\n* unassigned: The token is not assigned to an user.\n",
      "enum" : [ "activationExpired", "active", "blocked", "canceled", "expired", "pending", "unassigned" ]
    },
    "TokenTypeEnum" : {
      "type" : "string",
      "description" : "The kind of a token principal type. Possible values are:\n* barcode: A barcode with the token\n* nfcDevice: A device (e.g. cell phone) with support for NFC\n* nfcTag: A NFC tag/card \n* other: Any other type containing a token\n* qrcode: A QR code containing a token\n* swipe: A swipe/magnetic card containing the token\n",
      "enum" : [ "barcode", "nfcDevice", "nfcTag", "other", "qrcode", "swipe" ]
    },
    "TransactionAuthorizationActionEnum" : {
      "type" : "string",
      "description" : "An action performed when a transaction was pending authorization Possible values are:\n* authorized: The transaction was authorized\n* canceled: The authorization process was canceled by the payer\n* denied: The transaction was denied (rejected)\n",
      "enum" : [ "authorized", "canceled", "denied" ]
    },
    "TransactionAuthorizationStatusEnum" : {
      "type" : "string",
      "description" : "The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are:\n* authorized: The transaction was fully authorized and is processed\n* canceled: The authorization submission was canceled by the submitter\n* denied: The authorization was denied\n* pending: The transaction is pending authorization\n",
      "enum" : [ "authorized", "canceled", "denied", "pending" ]
    },
    "TransactionAuthorizationTypeEnum" : {
      "type" : "string",
      "description" : "Defines which kind of authorization a transaction is through. Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Possible values are:\n* level: A transaction is going through some authorization level\n* operator: An operator performed a payment that needs to be authorized by his member or other operators\n",
      "enum" : [ "level", "operator" ]
    },
    "TransactionKind" : {
      "type" : "string",
      "description" : "The kind of a transaction  Possible values are:\n* chargeback: Chargeback of a given transfer\n* externalPayment: A payment to an external user\n* import: An imported transaction\n* order: Transaction generated by confirming an order\n* payment: A direct payment\n* paymentRequest: A request for another user to accept a payment \n* recurringPayment: A payment which is processed again periodically\n* scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments\n* ticket: A payment whose the payer is unknown\n",
      "enum" : [ "chargeback", "externalPayment", "import", "order", "payment", "paymentRequest", "recurringPayment", "scheduledPayment", "ticket" ]
    },
    "TransactionSubjectsEnum" : {
      "type" : "string",
      "description" : "Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are:\n* both: Reference to both from and to subjects of the transaction\n* from: Reference to the transaction from\n* none: Reference to none of the transaction subjects\n* to: Reference to the transaction to\n",
      "enum" : [ "both", "from", "none", "to" ]
    },
    "TransferDirectionEnum" : {
      "type" : "string",
      "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
      "enum" : [ "credit", "debit" ]
    },
    "TransferKind" : {
      "type" : "string",
      "description" : "Indicates the reason the transfer was created Possible values are:\n* accountFee: A transfer generated by an account fee charge\n* chargeback: A transfer which is a chargeback of another transfer\n* import: An imported transfer\n* initialCredit: A transfer which is the initial credit for a newly created account\n* payment: A transfer generated by a direct payment or accepting a webshop order\n* recurringPayment: A transfer generated when processing a recurring payment\n* scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment\n* transferFee: A transfer generated by a transfer fee charge\n",
      "enum" : [ "accountFee", "chargeback", "import", "initialCredit", "payment", "recurringPayment", "scheduledPaymentInstallment", "transferFee" ]
    },
    "UiKind" : {
      "type" : "string",
      "description" : "Indicates the type of user interface Possible values are:\n* custom: A custom front-end application. Has no headers, footers or theme\n* main: The main web user interface\n* mobile: The mobile application user interface\n* pay: The Ticket / Easy invoice confirmation application user interface\n",
      "enum" : [ "custom", "main", "mobile", "pay" ]
    },
    "UnauthorizedErrorCode" : {
      "type" : "string",
      "description" : "Error codes for 401 Unauthorized HTTP status.  Possible values are:\n* invalidAccessClient: The access client used for access is invalid\n* invalidChannelUsage: Attempt to login on a stateless-only channel, or use stateless in a stateful-only channel, or invoke as guest in a channel configuration which is only for users\n* invalidNetwork: Attempt to access a network that has been disabled\n* loggedOut: The session token used for access is invalid\n* login: Either user identification (principal) or password are invalid. May have additional information, such as the user / password status\n* missingAuthorization: Attempt to access an operation as guest, but the operation requires authentication\n* remoteAddressBlocked: The IP address being used for access has been blocked by exceeding tries with invalid users\n* unauthorizedAddress: The user cannot access the system using an IP address that is not white-listed\n* unauthorizedUrl: The user's configuration demands access using a specific URL, and this access is being done using another one\n",
      "enum" : [ "invalidAccessClient", "invalidChannelUsage", "invalidNetwork", "loggedOut", "login", "missingAuthorization", "remoteAddressBlocked", "unauthorizedAddress", "unauthorizedUrl" ]
    },
    "UserAddressResultEnum" : {
      "type" : "string",
      "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
      "enum" : [ "all", "nearest", "none", "primary" ]
    },
    "UserImageKind" : {
      "type" : "string",
      "description" : "Determines the kind of an user image Possible values are:\n* custom: User custom images are additional images that can be used on rich text contents.\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n",
      "enum" : [ "custom", "profile" ]
    },
    "UserOrderByEnum" : {
      "type" : "string",
      "description" : "Possible options for ordering the results of an user search. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* creationDate: Newly registered users are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* random: Users will be randomly returned\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
      "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "creationDate", "distance", "random", "relevance" ]
    },
    "UserRegistrationStatusEnum" : {
      "type" : "string",
      "description" : "The status of the user after the registration Possible values are:\n* active: The user is initially active\n* emailValidation: The user has received an e-mail, with a link to verify the e-mail address. Once verified, the registration will be complete\n* inactive: The user is initially inactive, and an administrator needs to manually activate the user\n",
      "enum" : [ "active", "emailValidation", "inactive" ]
    },
    "UserStatusEnum" : {
      "type" : "string",
      "description" : "The possible statuses for an user Possible values are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
      "enum" : [ "active", "blocked", "disabled", "pending", "purged", "removed" ]
    },
    "UsersWithBalanceOrderByEnum" : {
      "type" : "string",
      "description" : "Contains the possible 'order by' values when searching for users with balances  Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* balanceAsc: User are ordered by balance, lower balances first.\n* balanceDesc: User are ordered by balance, higher balances first.\n",
      "enum" : [ "alphabeticallyAsc", "alphabeticallyDesc", "balanceAsc", "balanceDesc" ]
    },
    "VoucherCancelActionEnum" : {
      "type" : "string",
      "description" : "Indicates what happens if a voucher is canceled, if it can be canceled Possible values are:\n* cancelAndRefund: A single bought voucher is canceled and the amount is refunded\n* cancelGenerated: Cancels a single generated voucher\n* cancelPendingPack: Cancels more than one bought vouchers whose buy payment is pending authorization\n* cancelPendingSingle: Cancels a single bought vouchers whose buy payment is pending authorization\n",
      "enum" : [ "cancelAndRefund", "cancelGenerated", "cancelPendingPack", "cancelPendingSingle" ]
    },
    "VoucherCreationTypeEnum" : {
      "type" : "string",
      "description" : "Indicates how a voucher was created Possible values are:\n* bought: The voucher was bought by an user\n* generated: The voucher was generated by an administrator\n",
      "enum" : [ "bought", "generated" ]
    },
    "VoucherRelationEnum" : {
      "type" : "string",
      "description" : "The ways a voucher is related to an user Possible values are:\n* bought: A voucher the user has bought\n* redeemed: A voucher the user has redeemed\n",
      "enum" : [ "bought", "redeemed" ]
    },
    "VoucherStatusEnum" : {
      "type" : "string",
      "description" : "The voucher statuses Possible values are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
      "enum" : [ "canceled", "expired", "open", "pending", "redeemed" ]
    },
    "WeekDayEnum" : {
      "type" : "string",
      "description" : "The days of the week Possible values are:\n* fri: Friday\n* mon: Monday\n* sat: Saturday\n* sun: Sunday\n* thu: Thursday\n* tue: Tuesday\n* wed: Wednesday\n",
      "enum" : [ "fri", "mon", "sat", "sun", "thu", "tue", "wed" ]
    },
    "AcceptOrReschedulePaymentRequest" : {
      "type" : "object",
      "properties" : {
        "comments" : {
          "type" : "string",
          "description" : "A comment the payer can set."
        },
        "processDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date the payment request must be processed."
        }
      },
      "description" : "Parameters for accepting or rescheduling payment requests."
    },
    "AcceptOrderByBuyer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderAction"
      }, {
        "type" : "object",
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "description" : "Either the internal name or id of the selected payment type (if any).\n"
          }
        }
      } ],
      "description" : "Parameters used to accept an order by the buyer."
    },
    "AcceptOrderBySeller" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderAction"
      }, {
        "type" : "object"
      } ],
      "description" : "Parameters used to accept an order by the seller."
    },
    "Account" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The account number"
          },
          "type" : {
            "description" : "Reference to the account type",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Contains basic data for an account"
    },
    "AccountHistoryQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransferQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "customFields" : {
            "type" : "array",
            "description" : "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`.\n      \n",
            "items" : {
              "type" : "string"
            }
          },
          "direction" : {
            "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
            "$ref" : "#/definitions/TransferDirectionEnum"
          }
        }
      } ],
      "description" : "Parameters for searching an account's history"
    },
    "AccountHistoryResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The transfer date and time"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The transfer amount. May be positive or negative."
          },
          "relatedAccount" : {
            "description" : "The account that either received / sent the balance",
            "$ref" : "#/definitions/AccountWithOwner"
          },
          "type" : {
            "description" : "The transfer type",
            "$ref" : "#/definitions/TransferType"
          },
          "description" : {
            "type" : "string",
            "description" : "The transaction description. Is optional."
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "The transaction number identifying this balance transfer. The\ncurrency configuration has the definition on whether transaction\nnumbers are enabled and which format they have.\n"
          },
          "customValues" : {
            "type" : "object",
            "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use the `GET /{owner}/accounts/{accountType}/data-for-history` operation, and lookup each field by either internal name (if configured) or id. Example: `{..., \"customValues\": {\"linkedAccount\": \"123456789\"}}`\n",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "transaction" : {
            "description" : "If this balance transfer was originated from a transaction (like a\npayment or scheduled payment), contains the reference to this\ntransaction.\n",
            "$ref" : "#/definitions/Transaction"
          },
          "statuses" : {
            "type" : "object",
            "description" : "contains the current status internal name or id, keyed by the flow\ninternal name or id\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Represents a balance transfer between accounts, as viewed from the\npoint-of-view account of a a specific account. This means that credits\nwill have a positive amount, while debits will be negative.\n"
    },
    "AccountHistoryStatus" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountStatus"
      }, {
        "type" : "object",
        "properties" : {
          "beginDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The reference begin date"
          },
          "balanceAtBegin" : {
            "type" : "string",
            "format" : "number",
            "description" : "The raw balance at the beginning of the informed period"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The reference end date"
          },
          "balanceAtEnd" : {
            "type" : "string",
            "format" : "number",
            "description" : "The raw balance at the end of the informed period"
          },
          "incoming" : {
            "description" : "The summary of incoming transfers",
            "$ref" : "#/definitions/AmountSummary"
          },
          "outgoing" : {
            "description" : "The summary of outgoing transfers",
            "$ref" : "#/definitions/AmountSummary"
          },
          "netInflow" : {
            "type" : "string",
            "format" : "number",
            "description" : "The raw difference between incoming and outgoing transfers in the informed period \n"
          }
        }
      } ],
      "description" : "Contains instant status information, as inherited from `AccountStatus`,  plus status that depend on an account history query parameters\n"
    },
    "AccountPermissions" : {
      "type" : "object",
      "properties" : {
        "account" : {
          "description" : "The account",
          "$ref" : "#/definitions/AccountWithCurrency"
        },
        "visible" : {
          "type" : "boolean",
          "description" : "Whether the account also is visible for the logged user or, if false means it is only accessible.\nA non visible account still is operative, i.e the user could make/receive payments from/to it \n(i.e is accessible) but can not make a transfers history search for it.\n"
        },
        "systemPayments" : {
          "type" : "array",
          "description" : "Payment types allowed to be performed to system accounts.",
          "items" : {
            "$ref" : "#/definitions/RelatedTransferType"
          }
        },
        "userPayments" : {
          "type" : "array",
          "description" : "Payment types allowed to be performed to other users",
          "items" : {
            "$ref" : "#/definitions/RelatedTransferType"
          }
        },
        "selfPayments" : {
          "type" : "array",
          "description" : "Payment types allowed to be performed to other self accounts.\nOnly returned for user accounts.\n",
          "items" : {
            "$ref" : "#/definitions/RelatedTransferType"
          }
        },
        "posPayments" : {
          "type" : "array",
          "description" : "Payment types allowed to be used on POS (receive payments\nfrom other users).\nOnly returned for user accounts.        \n",
          "items" : {
            "$ref" : "#/definitions/RelatedTransferType"
          }
        }
      },
      "description" : "Permissions over an account"
    },
    "AccountStatus" : {
      "type" : "object",
      "properties" : {
        "balance" : {
          "type" : "string",
          "format" : "number",
          "description" : "The raw account balance"
        },
        "creditLimit" : {
          "type" : "string",
          "format" : "number",
          "description" : "The maximum negative balance an account may get"
        },
        "upperCreditLimit" : {
          "type" : "string",
          "format" : "number",
          "description" : "The maximum positive balance an account may get"
        },
        "reservedAmount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The reserved amount is part of the raw balance, but cannot be used\nfor payments because of some other events, like payments pending\nauthorization, confirmed webshop orders, scheduled payments (when\nconfigured to reserve the total amount) and so on.\n"
        },
        "availableBalance" : {
          "type" : "string",
          "format" : "number",
          "description" : "The available balance to be used, taking into account the raw\nbalance, credit limit and reserved amount \n"
        },
        "negativeSince" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "If the account is negative, contains the date since it became so \n"
        },
        "aRate" : {
          "type" : "string",
          "format" : "number",
          "description" : "The balance aging counter"
        },
        "dRate" : {
          "type" : "string",
          "format" : "number",
          "description" : "The balance maturity"
        },
        "rateBalanceCorrection" : {
          "type" : "string",
          "format" : "number"
        },
        "virtualRatedBalance" : {
          "type" : "string",
          "format" : "number"
        }
      },
      "description" : "Status information for an account"
    },
    "AccountType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "Reference to the currency",
            "$ref" : "#/definitions/Currency"
          }
        }
      } ],
      "description" : "A reference for the account type, together with its currency\n"
    },
    "AccountWithCurrency" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Account"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "Reference to the currency",
            "$ref" : "#/definitions/Currency"
          }
        }
      } ],
      "description" : "Contains account data, plus currency reference"
    },
    "AccountWithHistoryStatus" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountWithCurrency"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The account history status",
            "$ref" : "#/definitions/AccountHistoryStatus"
          }
        }
      } ],
      "description" : "Account data plus account history status information"
    },
    "AccountWithOwner" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Account"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "Indicates whether an account belongs to system or user Possible values are:\n* system: System account, there is only one account per type in the system. Managed only by administrators\n* user: User account, there is one account of this type per user.\n",
            "$ref" : "#/definitions/AccountKind"
          },
          "user" : {
            "description" : "Only returned if `kind` is `user`. Is a reference to the owner user.\n",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Contains account data, plus account owner reference"
    },
    "AccountWithStatus" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountWithCurrency"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The account status",
            "$ref" : "#/definitions/AccountStatus"
          }
        }
      } ],
      "description" : "Account data plus status information"
    },
    "ActivateClientResult" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "The generated access client token. It should be passed using the `Access-Client-Token` header. If a prefix was informed on activation, it will not be returned, here, but should be sent prepending the returned token\n"
        },
        "accessClient" : {
          "description" : "A reference to the activated access client",
          "$ref" : "#/definitions/EntityReference"
        },
        "accessClientType" : {
          "description" : "A reference to the access client type",
          "$ref" : "#/definitions/EntityReference"
        }
      },
      "description" : "Data about an access client activation"
    },
    "Ad" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
            "$ref" : "#/definitions/AdKind"
          },
          "image" : {
            "description" : "The primary advertisement image",
            "$ref" : "#/definitions/Image"
          }
        }
      } ],
      "description" : "A advertisement is a structured data stored either for a user or for\nsystem (a general advertisement, unrelated to a user).\n"
    },
    "AdBasicData" : {
      "type" : "object",
      "properties" : {
        "customFields" : {
          "type" : "array",
          "description" : "The possible advertisement custom fields\n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "requiresAuthorization" : {
          "type" : "boolean",
          "description" : "Indicates whether advertisements require an authorization from the\nadministration in order to be published for other users to see\n"
        },
        "categories" : {
          "type" : "array",
          "description" : "The advertisement categoriesn each with its children, forming a tree\n",
          "items" : {
            "$ref" : "#/definitions/AdCategoryWithChildren"
          }
        },
        "addresses" : {
          "type" : "array",
          "description" : "The addresses of the advertisement owner, so specific ones can be linked to the advertisement.\n",
          "items" : {
            "$ref" : "#/definitions/Address"
          }
        }
      },
      "description" : "Contains data shared by both AdDataForNew and AdDataForEdit\n"
    },
    "AdCategoryWithChildren" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "image" : {
            "description" : "The category image.",
            "$ref" : "#/definitions/Image"
          },
          "children" : {
            "type" : "array",
            "description" : "The child categories",
            "items" : {
              "$ref" : "#/definitions/AdCategoryWithChildren"
            }
          }
        }
      } ],
      "description" : "An advertisement category, together with its children"
    },
    "AdCategoryWithParent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "parent" : {
            "description" : "The parent category",
            "$ref" : "#/definitions/AdCategoryWithParent"
          }
        }
      } ],
      "description" : "An advertisement category, together with its parent"
    },
    "AdDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "edit" : {
            "type" : "boolean",
            "description" : "Indicates whether the current ad can be edited by the currently authenticated used.    \n"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Indicates whether the current ad can be edited by the currently authenticated used.    \n"
          },
          "advertisement" : {
            "description" : "The advertisement that is being edited",
            "$ref" : "#/definitions/AdEdit"
          },
          "binaryValues" : {
            "description" : "Holds the current values for file / image custom fields as lists of\n`StoredFile`s / `Image`s.\n",
            "$ref" : "#/definitions/CustomFieldBinaryValues"
          }
        }
      } ],
      "description" : "Contains data for editing a new phone\n"
    },
    "AdDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "advertisement" : {
            "description" : "The advertisement that is being created",
            "$ref" : "#/definitions/AdNew"
          }
        }
      } ],
      "description" : "Contains data for creating a new phone\n"
    },
    "AdDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAdDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "groups" : {
            "type" : "array",
            "description" : "The groups the authenticated user can use to filter users. Admins\ncan always filter by groups, while users depend on a permission,\nwhich can be to only view group sets, only groups or none.\n",
            "items" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "defaultGroups" : {
            "type" : "array",
            "description" : "The internal names (or ids, if missing) of the groups which should\nbe presented by default on user search\n",
            "items" : {
              "type" : "string"
            }
          },
          "query" : {
            "description" : "Default query filters to search advertisements\n",
            "$ref" : "#/definitions/AdQueryFilters"
          }
        }
      } ],
      "description" : "Data for a general search of advertisements"
    },
    "AdDeliveryMethod" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "chargeType" : {
            "description" : "The possible charge types for a delivery method of a webshop ad. Possible values are:\n* fixed: The delivery method charge is fixed set by the seller.\n* negotiated: The delivery method charge can be be negotiated between the seller and the buyer.\n",
            "$ref" : "#/definitions/AdDeliveryMethodChargeEnum"
          },
          "deliveryTime" : {
            "description" : "The delivery time.",
            "$ref" : "#/definitions/TimeInterval"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the delivery method (if any)."
          },
          "chargeAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The delivery method charge amount. Required if `chargeType` is \n`fixed`.\n"
          }
        }
      } ],
      "description" : "Contains delivery information used when do shopping.\n"
    },
    "AdDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAdDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The advertisement description content, formatted as HTML\n"
          },
          "owner" : {
            "description" : "The user which owns this advertisement",
            "$ref" : "#/definitions/User"
          },
          "publicationPeriod" : {
            "description" : "The date period this advertisement is published",
            "$ref" : "#/definitions/DatePeriod"
          },
          "price" : {
            "type" : "string",
            "format" : "number",
            "description" : "The regular price."
          }
        }
      } ],
      "description" : "Contains data which is common for `AdResult` and `AdView`\n",
      "x-abstract" : true
    },
    "AdEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Parameters for editing an existing advertisement"
    },
    "AdManage" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The advertisement title"
        },
        "description" : {
          "type" : "string",
          "description" : "The advertisement description content, formatted as HTML\n"
        },
        "publicationPeriod" : {
          "description" : "The date period this advertisement is published",
          "$ref" : "#/definitions/DatePeriod"
        },
        "categories" : {
          "type" : "array",
          "description" : "Either internal name or id of categories this advertisement belongs to.\nIn most cases an advertisement will have a single category,\nbut this depends on the Cyclos configuration.\n",
          "items" : {
            "type" : "string"
          }
        },
        "currency" : {
          "type" : "string",
          "description" : "Either internal name or id of the advertisement's price currency\n"
        },
        "price" : {
          "type" : "string",
          "format" : "number",
          "description" : "The regular price"
        },
        "promotionalPrice" : {
          "type" : "string",
          "format" : "number",
          "description" : "The promotional price, if any"
        },
        "promotionalPeriod" : {
          "description" : "The promotional period, the one when `promotionalPrice` is valid\n",
          "$ref" : "#/definitions/DatePeriod"
        },
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "addresses" : {
          "type" : "array",
          "description" : "Ids of addresses (belogining to the advertisement owner) this \nadvertisement is available at.\n",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Common fields for either creating or editing a advertisement",
      "x-abstract" : true
    },
    "AdNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdManage"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "The advertisement kind to be created. Currently only `simple` advertisements can be managed through this API. The default is `simple`. Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
            "$ref" : "#/definitions/AdKind"
          },
          "submitForAuthorization" : {
            "type" : "boolean",
            "description" : "Only useful when authorization is required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `true`). Indicates whether the advertisement will be initially submitted for authorization (status = `pending`) or kept in the `draft` status. \n"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Only useful when authorization is not required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `false`). Indicates whether the initial status for the advertisement should be `hidden` (when `true`) or `active` (when `false`). \n"
          },
          "images" : {
            "type" : "array",
            "description" : "The ids of previously uploaded user temporary images to be\ninitially used as advertisement images\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Parameters for creating a new advertisement"
    },
    "AdQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicAdQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "owner" : {
            "type" : "string",
            "description" : "Either id or an identification, such as login name, e-mail, etc, for\nthe advertisement owner. The allowed identification methods are those\nthe authenticated user can use on keywords search.\n"
          },
          "broker" : {
            "type" : "string",
            "description" : "Either id or an identification, such as login name, e-mail, etc, for\nthe broker of the advertisement owner. The allowed identification\nmethods are those the authenticated user can use on keywords search.\n"
          },
          "groups" : {
            "type" : "array",
            "description" : "Array of either id or internal names of user groups the advertisement\nowner must belong to\n",
            "items" : {
              "type" : "string"
            }
          },
          "returnEditable" : {
            "type" : "boolean",
            "description" : "Whether to return the editable property. Passing `true` will impact\nthe performance a bit, as for each returned advertisement some\nstatuses and permissions need to be checked.\n"
          }
        }
      } ],
      "description" : "Definitions for a general advertisements search"
    },
    "AdQuestion" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object"
      }, {
        "properties" : {
          "question" : {
            "type" : "string",
            "description" : "The question text."
          },
          "questionDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The question date and time."
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer for the question (if any)."
          },
          "answerDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The answer date and time."
          }
        }
      } ],
      "description" : "A question asked for an advertisement.\n"
    },
    "AdQuestionView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdQuestion"
      }, {
        "type" : "object"
      }, {
        "properties" : {
          "user" : {
            "description" : "The user which asked the question",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "A question asked for an advertisement.\n"
    },
    "AdResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "promotionalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The promotional price, only returned if there is a promotional\nprice set and the promotional period is active\n"
          },
          "address" : {
            "description" : "Address to be placed on map. Is only returned when the search result type is `map`.\n",
            "$ref" : "#/definitions/Address"
          },
          "distance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Only returned when there is a base location to calculate the\ndistance from. The unit (kilometers or miles) depends on\nconfiguration.\n"
          },
          "categories" : {
            "type" : "array",
            "description" : "Either internal name or id of categories this advertisement belongs to.\nIn most cases an advertisement will have a single category,\nbut this depends on the Cyclos configuration.\n",
            "items" : {
              "type" : "string"
            }
          },
          "currency" : {
            "type" : "string",
            "description" : "Either internal name or id of the advertisement's price currency\n"
          },
          "editable" : {
            "type" : "boolean",
            "description" : "Indicates if the advertisement can be edited according to the logged \nuser's permissions and advertisement status.\n"
          }
        }
      } ],
      "description" : "Contains data returned when searching for advertisements\n"
    },
    "AdView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "description" : "Either internal name or id of categories this advertisement belongs to.\nIn most cases an advertisement will have a single category,\nbut this depends on the Cyclos configuration.\n",
            "items" : {
              "$ref" : "#/definitions/AdCategoryWithParent"
            }
          },
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values this advertisement has",
            "items" : {
              "$ref" : "#/definitions/CustomFieldValue"
            }
          },
          "currency" : {
            "description" : "The advertisement's price currency",
            "$ref" : "#/definitions/Currency"
          },
          "promotionalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The promotional price, to be applied on the promotional period\nis active\n"
          },
          "promotionalPeriod" : {
            "description" : "The promotional period, the one when `promotionalPrice` is valid\n",
            "$ref" : "#/definitions/DatePeriod"
          },
          "promotionalPeriodActive" : {
            "type" : "boolean",
            "description" : "Indicates whether the promotional period is active at the moment\nthis data is returned\n"
          },
          "canManage" : {
            "type" : "boolean",
            "description" : "Indicates if the authenticated user manage this advertisement"
          },
          "canBuy" : {
            "type" : "boolean",
            "description" : "Indicates if the authenticated user can buy this webshop ad.\n"
          },
          "canAsk" : {
            "type" : "boolean",
            "description" : "Indicates if the authenticated user can ask questions about this advertisement.\n"
          },
          "questionsEnabled" : {
            "type" : "boolean",
            "description" : "Indicates if the questions are anabled for the given advertisement."
          },
          "additionalImages" : {
            "type" : "array",
            "description" : "Holds the images other than the primary image, which is returned in the `image` field\n",
            "items" : {
              "$ref" : "#/definitions/Image"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "(Deprecated) The addresses (belonging to the advertisement's owner) where this  advertisement is available.\n",
            "items" : {
              "$ref" : "#/definitions/Address"
            },
            "x-deprecated" : "Use `userAddresses` instead\n",
            "x-remove-version" : 4.12
          },
          "userAddresses" : {
            "type" : "array",
            "description" : "The addresses (belonging to the advertisement's owner) where this  advertisement is available.\n",
            "items" : {
              "$ref" : "#/definitions/Address"
            }
          },
          "adAddresses" : {
            "type" : "array",
            "description" : "The custom addresses where this advertisement is available.\n",
            "items" : {
              "$ref" : "#/definitions/Address"
            }
          },
          "questions" : {
            "type" : "array",
            "description" : "The list of questions this advertisement has.\n",
            "items" : {
              "$ref" : "#/definitions/AdQuestionView"
            }
          },
          "allowDecimal" : {
            "type" : "boolean",
            "description" : "if true then this webshop ad can be ordered specifying the quantity \nas a decimal number.\n"
          },
          "deliveryMethods" : {
            "type" : "array",
            "description" : "The available delivery methods for this webshop ad.",
            "items" : {
              "$ref" : "#/definitions/AdDeliveryMethod"
            }
          },
          "maxAllowedInCart" : {
            "type" : "string",
            "format" : "number",
            "description" : "The maximum quantity that can be specified in the shopping cart.\n"
          },
          "minAllowedInCart" : {
            "type" : "string",
            "format" : "number",
            "description" : "The minimum quantity that can be specified in the shopping cart.      \n"
          },
          "productNumber" : {
            "type" : "string",
            "description" : "The product number according to the webshop settings."
          },
          "stockQuantity" : {
            "type" : "string",
            "format" : "number",
            "description" : "The stock disponibility. Only if `unlimitedStock` is false and the  'Stock type' was not marked as 'Not available' (through the web  interface).\n"
          },
          "unlimitedStock" : {
            "type" : "boolean",
            "description" : "If true then it means there is always disponibility of the webshop ad."
          },
          "operations" : {
            "type" : "array",
            "description" : "List of runnable custom operations.",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          }
        }
      } ],
      "description" : "Detailed information when viewing an advertisement"
    },
    "Address" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "The first line of the descriptive address\n"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The second line of the descriptive address\n"
          },
          "street" : {
            "type" : "string",
            "description" : "The street name\n"
          },
          "buildingNumber" : {
            "type" : "string",
            "description" : "The numeric identifier for a land parcel, house, building or other\n"
          },
          "complement" : {
            "type" : "string",
            "description" : "The complement (like apartment number)  \n"
          },
          "zip" : {
            "type" : "string",
            "description" : "A zip code that identifies a specific geographic (postal) delivery area\n"
          },
          "poBox" : {
            "type" : "string",
            "description" : "The post-office box, is an uniquely addressable box\n"
          },
          "neighborhood" : {
            "type" : "string",
            "description" : "The neighborhood name \n"
          },
          "city" : {
            "type" : "string",
            "description" : "The city name\n"
          },
          "region" : {
            "type" : "string",
            "description" : "The region or state\n"
          },
          "country" : {
            "type" : "string",
            "description" : "The country, represented as 2-letter, uppercase, ISO 3166-1 code\n"
          },
          "location" : {
            "description" : "The geolocation of the current address",
            "$ref" : "#/definitions/GeographicalCoordinate"
          }
        },
        "x-implements" : "IAddress"
      } ],
      "description" : "An address reference. The actually used fields depend on\nthe user configuration\n",
      "x-implements" : "IAddress"
    },
    "AddressBasicData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressConfiguration"
      }, {
        "type" : "object",
        "properties" : {
          "managePrivacy" : {
            "type" : "boolean",
            "description" : "Can the authenticated user manage the privacy of this address?"
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          }
        }
      } ],
      "description" : "Contains data shared by both AddressDataForNew and AddressDataForEdit\n"
    },
    "AddressConfiguration" : {
      "type" : "object",
      "properties" : {
        "useMap" : {
          "type" : "boolean",
          "description" : "Indicates whether maps are enabled in Cyclos"
        },
        "enabledFields" : {
          "type" : "array",
          "description" : "Contains the address fields that are enabled in Cyclos Possibles values for each array element are:\n* addressLine1: The first line of the descriptive address\n* addressLine2: The second line of the descriptive address\n* buildingNumber: The numeric identifier for a land parcel, house, building or other\n* city: The city name\n* complement: The complement (like apartment number)  \n* country: The country, represented as 2-letter, uppercase, ISO 3166-1 code\n* neighborhood: The neighborhood name \n* poBox: The post-office box, is an uniquely addressable box\n* region: The region or state\n* street: The street name\n* zip: A zip code that identifies a specific geographic (postal) delivery area\n",
          "items" : {
            "$ref" : "#/definitions/AddressFieldEnum"
          }
        },
        "requiredFields" : {
          "type" : "array",
          "description" : "Contains the address fields that are required in Cyclos Possibles values for each array element are:\n* addressLine1: The first line of the descriptive address\n* addressLine2: The second line of the descriptive address\n* buildingNumber: The numeric identifier for a land parcel, house, building or other\n* city: The city name\n* complement: The complement (like apartment number)  \n* country: The country, represented as 2-letter, uppercase, ISO 3166-1 code\n* neighborhood: The neighborhood name \n* poBox: The post-office box, is an uniquely addressable box\n* region: The region or state\n* street: The street name\n* zip: A zip code that identifies a specific geographic (postal) delivery area\n",
          "items" : {
            "$ref" : "#/definitions/AddressFieldEnum"
          }
        }
      },
      "description" : "Contains configuration information related to addresses"
    },
    "AddressConfigurationForUserProfile" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressConfiguration"
      }, {
        "type" : "object",
        "properties" : {
          "address" : {
            "description" : "Contains the default values for a new address",
            "$ref" : "#/definitions/AddressNew"
          },
          "availability" : {
            "description" : "The availability for addresses Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
            "$ref" : "#/definitions/AvailabilityEnum"
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Can edit addresses?"
          },
          "managePrivacy" : {
            "type" : "boolean",
            "description" : "Can manage the privacy of addresses?"
          },
          "maxAddresses" : {
            "type" : "integer",
            "description" : "The maximum number of addresses the user can own"
          }
        }
      } ],
      "description" : "Contains extended address configuration used on user registration"
    },
    "AddressDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "address" : {
            "description" : "The address that is being edited. This value can be modified and sent back on `PUT /addresses/{id}`.\n",
            "$ref" : "#/definitions/AddressEdit"
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Can the authenticated user edit this address?"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Can the authenticated user remove this address?"
          }
        }
      } ],
      "description" : "Contains data for editing an existing address\n"
    },
    "AddressDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "address" : {
            "description" : "The address populated with the default fields. This value can be modified and sent back on `POST /{user}/addresses`.\n",
            "$ref" : "#/definitions/AddressNew"
          }
        }
      } ],
      "description" : "Contains data for creating a new address\n"
    },
    "AddressEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Fields for editing an address. The actually used and required fields depend on the user configuration."
    },
    "AddressEditWithId" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressEdit"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The internal entity identifier"
          }
        }
      } ],
      "description" : "Parameters for editing an existing address"
    },
    "AddressManage" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The address name"
        },
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the descriptive address\n"
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the descriptive address\n"
        },
        "street" : {
          "type" : "string",
          "description" : "The street name\n"
        },
        "buildingNumber" : {
          "type" : "string",
          "description" : "The numeric identifier for a land parcel, house, building or other\n"
        },
        "complement" : {
          "type" : "string",
          "description" : "The complement (like apartment number)  \n"
        },
        "zip" : {
          "type" : "string",
          "description" : "A zip code that identifies a specific geographic (postal) delivery area\n"
        },
        "poBox" : {
          "type" : "string",
          "description" : "The post-office box, is an uniquely addressable box\n"
        },
        "neighborhood" : {
          "type" : "string",
          "description" : "The neighborhood name \n"
        },
        "city" : {
          "type" : "string",
          "description" : "The city name\n"
        },
        "region" : {
          "type" : "string",
          "description" : "The region or state\n"
        },
        "country" : {
          "type" : "string",
          "description" : "The country, represented as 2-letter, uppercase, ISO 3166-1 code\n"
        },
        "location" : {
          "description" : "The geolocation of the current address",
          "$ref" : "#/definitions/GeographicalCoordinate"
        },
        "defaultAddress" : {
          "type" : "boolean",
          "description" : "Indicates whether this is the default address for the user"
        },
        "hidden" : {
          "type" : "boolean",
          "description" : "Whether this address should be hidden for other users"
        }
      },
      "description" : "Common fields for either creating or editing an address",
      "x-abstract" : true,
      "x-implements" : "IAddress"
    },
    "AddressNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressManage"
      } ],
      "description" : "Fields for a new address. The actually used and required fields depend\non the user configuration.\n"
    },
    "AddressResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Address"
      }, {
        "type" : "object",
        "properties" : {
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Indicates whether this is the default address for the user"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this address is hidden for other users. Is only returned if the authenticated user manages the owner of this phone.\n"
          }
        }
      } ],
      "description" : "Information of an address as returned on list"
    },
    "AddressView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AddressResult"
      }, {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "The user which owns this address",
            "$ref" : "#/definitions/User"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this address should be hidden for other users  \n"
          }
        }
      } ],
      "description" : "Detailed information when viewing an address"
    },
    "Agreement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "The HTML formatted content of the agreement"
          },
          "contentVersion" : {
            "type" : "integer",
            "description" : "The content version (when updated, the version changes)\n"
          }
        }
      } ],
      "description" : "An agreement the user must accept in order to use the system\n"
    },
    "AgreementContent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "The agreement content, formatted as HTML text"
          }
        }
      } ],
      "description" : "Contains the content of a user agreement"
    },
    "AmountSummary" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "description" : "The number of entries"
        },
        "sum" : {
          "type" : "string",
          "format" : "number",
          "description" : "The amount sum"
        },
        "average" : {
          "type" : "string",
          "format" : "number",
          "description" : "The amount average"
        }
      },
      "description" : "Contains summarized statistics over amounts\n"
    },
    "Auth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAuth"
      }, {
        "type" : "object",
        "properties" : {
          "configuration" : {
            "description" : "The current configuration version",
            "$ref" : "#/definitions/VersionedEntity"
          }
        }
      } ],
      "description" : "Contains information for the currently authenticated user\n"
    },
    "BadRequestError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "description" : "Error codes for 400 Bad request HTTP status  Possible values are:\n* general: Bad request format\n* json: Error in the JSON format\n",
          "$ref" : "#/definitions/BadRequestErrorCode"
        },
        "message" : {
          "type" : "string",
          "description" : "A (technical) message explaining the problem"
        },
        "line" : {
          "type" : "integer",
          "description" : "The request body line that shows the problem"
        },
        "column" : {
          "type" : "integer",
          "description" : "The request body column that shows the problem"
        }
      },
      "description" : "Error returned when the request format / body is not in the expected format"
    },
    "BankingPermissions" : {
      "type" : "object",
      "properties" : {
        "accounts" : {
          "type" : "array",
          "description" : "Permissions over each owned account",
          "items" : {
            "$ref" : "#/definitions/AccountPermissions"
          }
        },
        "payments" : {
          "description" : "Payments permissions",
          "$ref" : "#/definitions/PaymentsPermissions"
        },
        "authorizations" : {
          "description" : "Transaction authorization permissions",
          "$ref" : "#/definitions/TransactionAuthorizationsPermissions"
        },
        "scheduledPayments" : {
          "description" : "Scheduled payments permissions",
          "$ref" : "#/definitions/ScheduledPaymentsPermissions"
        },
        "recurringPayments" : {
          "description" : "Recurring payments permissions",
          "$ref" : "#/definitions/RecurringPaymentsPermissions"
        },
        "externalPayments" : {
          "description" : "External payments permissions",
          "$ref" : "#/definitions/ExternalPaymentsPermissions"
        },
        "paymentRequests" : {
          "description" : "Payment requests permissions",
          "$ref" : "#/definitions/PaymentRequestsPermissions"
        },
        "tickets" : {
          "description" : "Tickets permissions",
          "$ref" : "#/definitions/TicketsPermissions"
        }
      },
      "description" : "Permissions for banking"
    },
    "BaseAdDataForSearch" : {
      "type" : "object",
      "properties" : {
        "visibleKinds" : {
          "type" : "array",
          "description" : "The advertisement kinds that can be searched by the authenticated user Possibles values for each array element are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
          "items" : {
            "$ref" : "#/definitions/AdKind"
          }
        },
        "categories" : {
          "type" : "array",
          "description" : "The advertisement categories each with its children, forming a tree\n",
          "items" : {
            "$ref" : "#/definitions/AdCategoryWithChildren"
          }
        },
        "customFields" : {
          "type" : "array",
          "description" : "The list of custom fields that are either to be used as search filter (if its internal name is present on either  `fieldsInBasicSearch` or `fieldsInAdvancedSearch`) and / or in the result list (if its internal name is present on `fieldsInList`). \n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "fieldsInBasicSearch" : {
          "type" : "array",
          "description" : "The internal names of the custom fields that should be used as\nsearch filters in the basic section (separated fields, not keywords)\n",
          "items" : {
            "type" : "string"
          }
        },
        "fieldsInAdvancedSearch" : {
          "type" : "array",
          "description" : "The internal names of the custom fields that should be used as\nsearch filters in the advanced section (separated fields, not keywords)\n",
          "items" : {
            "type" : "string"
          }
        },
        "fieldsInList" : {
          "type" : "array",
          "description" : "The internal names of the custom fields that will be returned\ntogether with each advertisement, and should be shown in the result list.\nThis feature is planned, but not yet available.\n",
          "items" : {
            "type" : "string"
          }
        },
        "basicProfileFields" : {
          "type" : "array",
          "description" : "The list of basic user profile fields that can be used as search filters. Only returned if searching user advertisements.\n",
          "items" : {
            "$ref" : "#/definitions/BasicProfileFieldInput"
          }
        },
        "addressFieldsInSearch" : {
          "type" : "array",
          "description" : "Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are:\n* address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`  \n* city: Filters by city name\n* country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)\n* neighborhood: Filters by neighborhood name \n* poBox: Filters by post-office box (exact match)\n* region: Filters by region or state\n* zip: Filters by zip (postal) code (exact match)\n",
          "items" : {
            "$ref" : "#/definitions/AddressQueryFieldEnum"
          }
        },
        "customProfileFields" : {
          "type" : "array",
          "description" : "The list of custom user profile fields that can be used as search filters. Only returned if searching user advertisements.\n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "currencies" : {
          "type" : "array",
          "description" : "The currencies the authenticated user may use to filter by price \n",
          "items" : {
            "$ref" : "#/definitions/Currency"
          }
        },
        "searchByDistanceData" : {
          "description" : "Data for searching advertisements by distance",
          "$ref" : "#/definitions/SearchByDistanceData"
        },
        "categoriesDisplay" : {
          "description" : "The category view configured for the logged user.",
          "$ref" : "#/definitions/AdCategoriesDisplayEnum"
        }
      },
      "description" : "Common definitions for searching advertisements",
      "x-abstract" : true
    },
    "BaseAdDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Ad"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The possible status for an advertisement Possible values are:\n* active: The advertisement is published and can be seen by other users.\n* disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.\n* draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.\n* expired: The advertisement publication period has already expired, and cannot be seen by other users.\n* hidden: The advertisement is manually hidden from other users\n* pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.\n* scheduled: The advertisement has a future publication period, and cannot be seen by other users. \n",
            "$ref" : "#/definitions/AdStatusEnum"
          }
        }
      } ],
      "description" : "Contains shared information of an ad."
    },
    "BaseAuth" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "description" : "The authenticated user, if any.",
          "$ref" : "#/definitions/User"
        },
        "language" : {
          "description" : "The current language version",
          "$ref" : "#/definitions/VersionedEntity"
        },
        "global" : {
          "type" : "boolean",
          "description" : "Indicates whether this user belongs to global mode.\nOnly returned if there is an authenticated user.\n"
        },
        "role" : {
          "description" : "The main user role. Only returned if there is an authenticated user. Possible values are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
          "$ref" : "#/definitions/RoleEnum"
        },
        "systemAdministrator" : {
          "type" : "boolean",
          "description" : "Indicates whether this user is a system administrator, that is, either\nbelongs to the global system administrators group or to the network\nsystem administrators group.\nOnly returned if `role` is `administrator`.\n"
        },
        "aliasOperator" : {
          "type" : "boolean",
          "description" : "Indicates whether this user is an operator which is an alias of his\nowner member, that is, has all member permissions, and is not\nrestricted to an operator group.\nOnly returned if `role` is `operator`.\n"
        },
        "permissions" : {
          "description" : "The granted permissions for the authenticated user or guest",
          "$ref" : "#/definitions/Permissions"
        },
        "sessionToken" : {
          "type" : "string",
          "description" : "A token that must be passed in on the Session-Token header on\nsubsequent requests instead of the login name and password.\nOnly returned if using a session authentication.\n"
        },
        "accessClient" : {
          "description" : "Only returned when authenticated as access client, contains \ninformation about it\n",
          "$ref" : "#/definitions/EntityReference"
        },
        "principalType" : {
          "description" : "Returns a reference to the principal type used for authentication.\nMay be some of the built-in types (login name, e-mail, mobile phone or\naccount number), a profile field, a token type or an access client type\n",
          "$ref" : "#/definitions/EntityReference"
        },
        "principal" : {
          "type" : "string",
          "description" : "The principal (user identification) used on authentication. Can be the\nvalue of the login name, e-mail, account number, custom field or token\nused on authentication or at the moment of login. Is not returned when\nthe authentication was performed via access client.\n"
        },
        "passwordType" : {
          "description" : "Returns a reference to the password type used on this channel.\n",
          "$ref" : "#/definitions/PasswordType"
        },
        "secondaryPasswordType" : {
          "description" : "Returns a reference to the secondary password type used on this\nchannel, if any.\n",
          "$ref" : "#/definitions/PasswordType"
        },
        "expiredPassword" : {
          "type" : "boolean",
          "description" : "Returns whether the current access password is expired.\nIf so, the user will have to change the password,\nor all other actions will be denied.\n"
        },
        "pendingAgreements" : {
          "type" : "boolean",
          "description" : "Returns whether the current user has some agreements pending accept.\nIf so, a call to GET /agreements/pending should be performed to get\nthe content of the pending agreements, and then a POST \n/agreements/pending{id_or_internal_name} to accept each agreement.\n"
        },
        "expiredSecondaryPassword" : {
          "type" : "boolean",
          "description" : "Returns whether the current secondary access password is expired.\nIf so, the user will have to change the password,\nor all other actions will be denied.\n"
        },
        "pendingSecondaryPassword" : {
          "type" : "boolean",
          "description" : "Returns whether the current session requires a secondary password.\nIf so, the user will have to validate it using its secondary access \npassword, otherwise, all other actions will be denied.\n"
        }
      },
      "description" : "Contains relevant information for the authenticated user and his granted\npermissions. \n",
      "x-abstract" : true
    },
    "BaseCustomFieldValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "stringValue" : {
            "type" : "string",
            "description" : "The field value if the field type is either `string`, `text`, `richText` or `url`.\n"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The field value if the field type is `date`.\n"
          },
          "booleanValue" : {
            "type" : "boolean",
            "description" : "The field value if the field type is `boolean`.\n"
          },
          "integerValue" : {
            "type" : "integer",
            "description" : "The field value if the field type is `integer`.\n"
          },
          "decimalValue" : {
            "type" : "string",
            "format" : "number",
            "description" : "The field value if the field type is `decimal`.\n"
          },
          "enumeratedValues" : {
            "type" : "array",
            "description" : "The field value if the field type is either `singleSelection` or `multiSelection`. For single selections will either be an empty array or an array with a single element\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldPossibleValue"
            }
          },
          "dynamicValue" : {
            "description" : "The field value if the field type is `dynamicSelection`.\n",
            "$ref" : "#/definitions/CustomFieldDynamicValue"
          },
          "fileValues" : {
            "type" : "array",
            "description" : "The field value if the field type is `file`\n",
            "items" : {
              "$ref" : "#/definitions/StoredFile"
            }
          },
          "imageValues" : {
            "type" : "array",
            "description" : "The field value if the field type is `image`\n",
            "items" : {
              "$ref" : "#/definitions/Image"
            }
          },
          "linkedEntityValue" : {
            "type" : "object",
            "description" : "(Deprecated) The field value if the field type is `linkedEntity`.\n",
            "properties" : {
              "internalName" : {
                "type" : "string",
                "description" : "The entity internal name, which can be seen as an extra identifier    \n"
              },
              "name" : {
                "type" : "string",
                "description" : "The entity name"
              },
              "id" : {
                "type" : "string",
                "description" : "Entity identifier"
              }
            },
            "x-type" : "EntityReference",
            "x-remove-version" : 4.13,
            "x-deprecated" : "Use one of the specific fields: - `userValue`: If the entity type is `user` - `recordValue`: If the entity type is `record` - `transactionValue`: If the entity type is `transaction` - `transferValue`: If the entity type is `transfer` - `adValue`: If the entity type is `advertisement`\n"
          },
          "adValue" : {
            "description" : "The field value if the field type is `linkedEntity` and the linked entity type is `advertisement`. If the currently set record is not accessible by the logged user, only the `name` field is sent, which contains the advertisement title.\n",
            "$ref" : "#/definitions/Ad"
          },
          "transactionValue" : {
            "description" : "The field value if the field type is `linkedEntity` and the linked entity type is `transaction`. If the currently set transaction is not accessible by the logged user, only the `display` field is sent.\n",
            "$ref" : "#/definitions/Transaction"
          },
          "transferValue" : {
            "description" : "The field value if the field type is `linkedEntity` and the linked entity type is `transfer`. If the currently set transfer is not accessible by the logged user, only the `display` field is sent.\n",
            "$ref" : "#/definitions/Transfer"
          },
          "recordValue" : {
            "description" : "The field value if the field type is `linkedEntity` and the linked entity type is `record`. If the currently set record is not accessible by the logged user, only the `display` field is sent.\n",
            "$ref" : "#/definitions/Record"
          },
          "userValue" : {
            "description" : "The field value if the field type is `linkedEntity` and the linked entity type is `user`. If the currently set user is not accessible by the logged user, only a limited set of fields is sent, namely `display` and `shortDisplay`.\n",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Holds detailed information about a custom field value. The actual value should be read from a property depending on the field type: - If the type is either `string`,\n  `text`,\n  `richText` or\n  `url`, the property is on `stringValue`;\n- If the type is `integer`, the property is `integerValue`; - If the type is `decimal`, the property is `decimalValue`; - If the type is `date`, the property is `dateValue`; - If the type is `boolean`, the property is `booleanValue`; - If the type is either `singleSelection` or\n  `multiSelection`, the property is `possibleValues`;\n- If the type is `dynamicSelection`, the property is `dynamicValue`; - If the type is `file`, the property is `fileValues`; - If the type is `image`, the property is `imageValues`; - Finally, if the type is `linkedEntity`, it depends on the value\n  of the field's `linkedEntityType`:\n  - If the entity type is `user`, the property is `userValue`;\n  - If the entity type is `record`, the property is `recordValue`;\n  - If the entity type is `transaction`, the property is `transactionValue`;\n  - If the entity type is `transfer`, the property is `transferValue`;\n  - If the entity type is `advertisement`, the property is `adValue`.  \n",
      "x-abstract" : true
    },
    "BaseNfcError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "token" : {
            "description" : "NFC Token reference.",
            "$ref" : "#/definitions/TokenDetailed"
          }
        }
      } ],
      "description" : "Base Error when work with a NFC card",
      "x-abstract" : true
    },
    "BaseOrder" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      } ],
      "description" : "Contains basic data shared by other related models.\n"
    },
    "BaseOrderAction" : {
      "type" : "object",
      "properties" : {
        "remarks" : {
          "type" : "string",
          "description" : "Optional comments by the authenticated user."
        }
      },
      "description" : "Commont data for order actions."
    },
    "BaseOrderItem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "string",
            "format" : "number",
            "description" : "It represents how much of the product was ordered.  It could be a decimal number only if it's allowed by the  product (i.e the webshop ad).\n"
          },
          "product" : {
            "description" : "The webshop ad added to the cart.",
            "$ref" : "#/definitions/WebshopAd"
          }
        }
      } ],
      "description" : "An item containing a quantity."
    },
    "BaseRecordDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordBasePermissions"
      }, {
        "type" : "object",
        "properties" : {
          "customFields" : {
            "type" : "array",
            "description" : "The list of record fields that are either to be used as search filter (if its internal name is present on `fieldsInSearch`) and / or in the result list (if its internal name is present on `fieldsInList`) \n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDetailed"
            }
          },
          "fieldsInSearch" : {
            "type" : "array",
            "description" : "The internal names of the record fields that should be used as\nsearch filters (separated fields, not keywords)\n",
            "items" : {
              "type" : "string"
            }
          },
          "addressFieldsInSearch" : {
            "type" : "array",
            "description" : "Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are:\n* address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`  \n* city: Filters by city name\n* country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)\n* neighborhood: Filters by neighborhood name \n* poBox: Filters by post-office box (exact match)\n* region: Filters by region or state\n* zip: Filters by zip (postal) code (exact match)\n",
            "items" : {
              "$ref" : "#/definitions/AddressQueryFieldEnum"
            }
          },
          "fieldsInList" : {
            "type" : "array",
            "description" : "The internal names of the record fields that will be returned\ntogether with each record, and should be shown in the result list\n",
            "items" : {
              "type" : "string"
            }
          },
          "basicProfileFields" : {
            "type" : "array",
            "description" : "The list of basic user profile fields that can be used as search filters. Only returned if searching user records.\n",
            "items" : {
              "$ref" : "#/definitions/BasicProfileFieldInput"
            }
          },
          "customProfileFields" : {
            "type" : "array",
            "description" : "The list of custom user profile fields that can be used as search filters. Only returned if searching user records.\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDetailed"
            }
          }
        }
      } ],
      "description" : "Common definitions for searching records",
      "x-abstract" : true
    },
    "BaseShoppingCart" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrder"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "The currency of the webshop ads contained in this element.",
            "$ref" : "#/definitions/Currency"
          },
          "seller" : {
            "description" : "The seller of the webshop ads contained in this element.",
            "$ref" : "#/definitions/User"
          },
          "insufficientBalance" : {
            "type" : "boolean",
            "description" : "Flag in `true` if there isn't any account in that currency with enough available balance to be able to fulfill the order from the shopping cart.\n"
          }
        }
      } ],
      "description" : "Contains basic data shared by other shopping cart related models.\n"
    },
    "BaseTransDataForSearch" : {
      "type" : "object",
      "properties" : {
        "transferFilters" : {
          "type" : "array",
          "description" : "References for transfer filters, which can be used to filter\nentries by transfer type\n",
          "items" : {
            "$ref" : "#/definitions/TransferFilter"
          }
        },
        "channels" : {
          "type" : "array",
          "description" : "References for channels which can be used to filter entries\nby transfers generated on a specific channel. Is only returned\nif the authenticated user is an administrator.\n",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "groups" : {
          "type" : "array",
          "description" : "Groups that can be used to filter entries, so that only transfers\nfrom or to users of those groups are returned on search. Is only\nreturned if the authenticated user is an administrator.\n",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "accessClients" : {
          "type" : "array",
          "description" : "References for access clients which can be used to filter entries\nby transfers generated by a specific access client \n",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "operators" : {
          "type" : "array",
          "description" : "References for operators, which can be used to filter entries\nby transfers performed or received by that specific operator \n",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "preselectedPeriods" : {
          "type" : "array",
          "description" : "Contains the pre-selected period filter ranges according to\nthe Cyclos configuration  \n",
          "items" : {
            "$ref" : "#/definitions/PreselectedPeriod"
          }
        }
      },
      "description" : "Contains basic information used to search for transfers / transactions\n",
      "x-abstract" : true
    },
    "BaseTransQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "datePeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum transfer date.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "transferFilters" : {
            "type" : "array",
            "description" : "Reference to the transfer filters, which filters transfers by type.\nMay be either the internal id or qualified transfer filter internal\nname, in the format `accountType.transferFilter`.\n",
            "items" : {
              "type" : "string"
            }
          },
          "transferTypes" : {
            "type" : "array",
            "description" : "Reference to the transfer types for filter. May be either the\ninternal id or qualified transfer type internal name, in the\nformat `accountType.transferType`.\n",
            "items" : {
              "type" : "string"
            }
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "The transaction number of the matching transfer\n"
          },
          "user" : {
            "type" : "string",
            "description" : "Reference a user that should have either received / performed the\ntransfer.\n"
          },
          "groups" : {
            "type" : "array",
            "description" : "Reference to the user group used to perform / receive the transfer.\nOnly taken into account if authenticated as administrator.\n",
            "items" : {
              "type" : "string"
            }
          },
          "by" : {
            "type" : "string",
            "description" : "Reference to the user that was authenticated when the transfer was\nperformed. Is only taken into account if authenticated as\nadministrator.\n"
          },
          "broker" : {
            "type" : "string",
            "description" : "Reference to the broker of users involved in transfers. Is only\ntaken into account if authenticated as administrator.\n"
          },
          "channels" : {
            "type" : "array",
            "description" : "Reference to the channel used to perform / receive the transfer.\nOnly taken into account if authenticated as administrator.\n",
            "items" : {
              "type" : "string"
            }
          },
          "excludedIds" : {
            "type" : "array",
            "description" : "List of transfers ids to be excluded from the result.\n",
            "items" : {
              "type" : "string"
            }
          },
          "accessClients" : {
            "type" : "array",
            "description" : "References to access clients (id or token) used to perform / receive the \ntransfer.\n",
            "items" : {
              "type" : "string"
            }
          },
          "includeGeneratedByAccessClient" : {
            "type" : "boolean",
            "description" : "Flag indicating whether to include or not the generated transfer.\nOnly valid if there is at least one access client specified. For example\nif a `ticket` or `paymentRequest` was processed then a new transfer will be\ngenerated.\n"
          },
          "fromCurrentAccessClient" : {
            "type" : "boolean",
            "description" : "Flag indicating whether to include only transfers by the current access client.\n"
          },
          "amountRange" : {
            "type" : "array",
            "description" : "The minimum / maximum amount.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "number"
            }
          }
        }
      } ],
      "description" : "Base definitions for searching either transactions or transfers",
      "x-abstract" : true
    },
    "BaseTransferDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransDataForSearch"
      }, {
        "type" : "object"
      }, {
        "properties" : {
          "transferStatusFlows" : {
            "type" : "array",
            "description" : "References to the allowed transfer status flows for this account \n",
            "items" : {
              "$ref" : "#/definitions/TransferStatusFlow"
            }
          }
        }
      } ],
      "description" : "Contains basic information used to search for transfers",
      "x-abstract" : true
    },
    "BaseTransferQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "transferKinds" : {
            "type" : "array",
            "description" : "Indicates the reason the transfer was created Possibles values for each array element are:\n* accountFee: A transfer generated by an account fee charge\n* chargeback: A transfer which is a chargeback of another transfer\n* import: An imported transfer\n* initialCredit: A transfer which is the initial credit for a newly created account\n* payment: A transfer generated by a direct payment or accepting a webshop order\n* recurringPayment: A transfer generated when processing a recurring payment\n* scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment\n* transferFee: A transfer generated by a transfer fee charge\n",
            "items" : {
              "$ref" : "#/definitions/TransferKind"
            }
          },
          "chargedBack" : {
            "type" : "boolean",
            "description" : "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.\n"
          },
          "statuses" : {
            "type" : "array",
            "description" : "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.\n",
            "items" : {
              "type" : "string"
            }
          },
          "orderBy" : {
            "description" : "Contains the possible 'order by' values when searching for transfers  Possible values are:\n* amountAsc: The result is ordered by amount descendant\n* amountDesc: The result is ordered by amount descendant\n* dateAsc: The result is ordered by date ascendant\n* dateDesc: The result is ordered by date descendant\n",
            "$ref" : "#/definitions/AccountHistoryOrderByEnum"
          }
        }
      } ],
      "description" : "Base definitions for searching transfers",
      "x-abstract" : true
    },
    "BaseUserDataForSearch" : {
      "type" : "object",
      "properties" : {
        "allowKeywords" : {
          "type" : "boolean",
          "description" : "Indicates whether using keywords is allowed"
        },
        "fieldsInSearch" : {
          "type" : "array",
          "description" : "The internal names of either basic or custom profile fields which \ncan be used as search filters (separated fields, not keywords) \n",
          "items" : {
            "type" : "string"
          }
        },
        "addressFieldsInSearch" : {
          "type" : "array",
          "description" : "Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are:\n* address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`  \n* city: Filters by city name\n* country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)\n* neighborhood: Filters by neighborhood name \n* poBox: Filters by post-office box (exact match)\n* region: Filters by region or state\n* zip: Filters by zip (postal) code (exact match)\n",
          "items" : {
            "$ref" : "#/definitions/AddressQueryFieldEnum"
          }
        },
        "basicFields" : {
          "type" : "array",
          "description" : "The list of basic profile fields that can be used either as search filters (if the internal names are present in the `fieldsInSearch` property) or on the result list (if the internal names are present in the `fieldsInList` property)\n",
          "items" : {
            "$ref" : "#/definitions/BasicProfileFieldInput"
          }
        },
        "customFields" : {
          "type" : "array",
          "description" : "The list of custom profile fields that can be used either as search filters (if the internal names are present in the `fieldsInSearch` property) or on the result list (if the internal names are present in the `fieldsInList` property)\n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "groups" : {
          "type" : "array",
          "description" : "The groups the authenticated user can use to filter users. Admins\ncan always filter by groups, while users depend on a permission,\nwhich can be to only view group sets, only groups or none.\n",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "searchByDistanceData" : {
          "description" : "Data for searching users by distance",
          "$ref" : "#/definitions/SearchByDistanceData"
        }
      },
      "description" : "Contains basic data used to search users in distinct contexts\n",
      "x-abstract" : true
    },
    "BasicAdQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FullTextWithDistanceQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "customFields" : {
            "type" : "array",
            "description" : "Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
            "items" : {
              "type" : "string"
            }
          },
          "category" : {
            "type" : "string",
            "description" : "Either id or internal name of a category"
          },
          "currency" : {
            "type" : "string",
            "description" : "Either id or internal name of a currency for the price"
          },
          "priceRange" : {
            "type" : "array",
            "description" : "The minumum / maximum price.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "number"
            }
          },
          "hasImages" : {
            "type" : "boolean",
            "description" : "When set to `true` only advertisements with images are returned\n"
          },
          "publicationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum publication date.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "expirationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum expiration date.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "kind" : {
            "description" : "The possible kinds of an advertisement Possible values are:\n* simple: A simple advertisement that can be viewed, but not directly bought\n* webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.\n",
            "$ref" : "#/definitions/AdKind"
          },
          "statuses" : {
            "type" : "array",
            "description" : "The possible status for an advertisement Possibles values for each array element are:\n* active: The advertisement is published and can be seen by other users.\n* disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.\n* draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.\n* expired: The advertisement publication period has already expired, and cannot be seen by other users.\n* hidden: The advertisement is manually hidden from other users\n* pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.\n* scheduled: The advertisement has a future publication period, and cannot be seen by other users. \n",
            "items" : {
              "$ref" : "#/definitions/AdStatusEnum"
            }
          },
          "orderBy" : {
            "description" : "Indicates how advertisements results are ordered. Possible values are:\n* date: Newest advertisements are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* priceAsc: Smaller prices are returned first. Advertisements without price are returned last.\n* priceDesc: Higher prices are returned first. Advertisements without price are returned last.\n* random: Without definite order\n* relevance: This is the default if keywords are used. Best matching advertisements come first.\n",
            "$ref" : "#/definitions/AdOrderByEnum"
          },
          "addressResult" : {
            "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n",
            "$ref" : "#/definitions/AdAddressResultEnum"
          }
        }
      } ],
      "description" : "Basic definitions for a advertisements search",
      "x-abstract" : true
    },
    "BasicOperatorQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "creationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum user creation date. Only taken into account\nif searching as administrator or managing broker.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "statuses" : {
            "type" : "array",
            "description" : "The possible statuses for an user Possibles values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
            "items" : {
              "$ref" : "#/definitions/UserStatusEnum"
            }
          }
        }
      } ],
      "description" : "Basic definitions for operators search filters",
      "x-abstract" : true
    },
    "BasicProfileFieldInput" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "description" : "The basic field this refers to Possible values are:\n* accountNumber: Account number\n* address: Address\n* email: E-mail\n* image: Image\n* name: Full name\n* phone: Phone (either mobile or land-line)\n* username: Login name\n",
          "$ref" : "#/definitions/BasicProfileFieldEnum"
        },
        "mask" : {
          "type" : "string",
          "description" : "If this field has a mask used for input, contains this mask.\nCurrently only the account number can (optionally) have one.\n"
        },
        "example" : {
          "type" : "string",
          "description" : "If this field has an example value, holds that example\n"
        }
      },
      "description" : "Definitions to input a basic profile field"
    },
    "BasicUserDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "emailPendingValidation" : {
            "type" : "string",
            "description" : "The new e-mail address, which is still pending validation. Is\nonly returned when e-mail validation is enabled for edit profile,\nand the user has changed the e-mail address.\n"
          },
          "binaryValues" : {
            "description" : "Holds the current values for file / image custom fields as lists of\n`StoredFile`s / `Image`s.\n",
            "$ref" : "#/definitions/CustomFieldBinaryValues"
          }
        }
      } ],
      "description" : "Contains basic data used to edit a user profile"
    },
    "BasicUserQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FullTextWithDistanceQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "usersToExclude" : {
            "type" : "array",
            "description" : "Indicated the users to be excluded from the result\n",
            "items" : {
              "type" : "string"
            }
          },
          "usersToInclude" : {
            "type" : "array",
            "description" : "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.\n",
            "items" : {
              "type" : "string"
            }
          },
          "activationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum user activation date. Only taken into account\nif searching as administrator or managing broker.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "creationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum user creation date. Only taken into account\nif searching as administrator or managing broker.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "lastLoginPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum user last login date. Only taken into account\nif searching as administrator or managing broker.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "groups" : {
            "type" : "array",
            "description" : "Either id or internal names of groups / group sets",
            "items" : {
              "type" : "string"
            }
          },
          "brokers" : {
            "type" : "array",
            "description" : "Either id or a principal (login name, e-mail, etc) for brokers",
            "items" : {
              "type" : "string"
            }
          },
          "mainBrokerOnly" : {
            "type" : "boolean",
            "description" : "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker. \n"
          },
          "includeGroup" : {
            "type" : "boolean",
            "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n"
          },
          "includeGroupSet" : {
            "type" : "boolean",
            "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n"
          },
          "addressResult" : {
            "description" : "Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are:\n* all: All addresses are returned.\n* nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)\n* none: Addresses are not returned.\n* primary: The primary (default) user address is returned\n",
            "$ref" : "#/definitions/UserAddressResultEnum"
          }
        }
      } ],
      "description" : "Base definitions for user search filters",
      "x-abstract" : true
    },
    "BrokerView" : {
      "type" : "object",
      "properties" : {
        "mainBroker" : {
          "type" : "boolean",
          "description" : "Indicates whether this broker is the main or not."
        },
        "since" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates when the brokerage relationship began."
        },
        "broker" : {
          "description" : "The broker user.",
          "$ref" : "#/definitions/User"
        }
      },
      "description" : "Contains data about a brokerage relationship"
    },
    "BuyVoucher" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "description" : "The number of vouchers to buy. Defaults to 1."
        },
        "amount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The amount per voucher"
        },
        "type" : {
          "type" : "string",
          "description" : "Either the `id` or `internalName` of the voucher type\n"
        },
        "customValues" : {
          "type" : "object",
          "description" : "Holds the payment custom field values, keyed by field internal name or id. The format of the value depends on the custom field type.\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Parameters for buying vouchers"
    },
    "BuyVoucherError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Possible errors when buying a voucher Possible values are:\n* maxAmountForPeriod: The maximum allowed buy amount for a period (example, a month) has been exceeded\n* maxOpenAmount: The maximum open amount for this voucher type for the buyer user has been exceeded\n* maxTotalOpenAmount: The maximum total open amount for this voucher type, for all users, has been exceeded\n* notAllowedForUser: The user attempting to buy vouchers is not allowed to buy vouchers of this type\n* payment: There was an error when performing the payment\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/BuyVoucherErrorCode"
          },
          "currency" : {
            "description" : "Currency reference. Only if `code` is `maxAmountForPeriod` or `maxTotalOpenAmount`          \n",
            "$ref" : "#/definitions/Currency"
          },
          "amountLeftForBuying" : {
            "type" : "string",
            "format" : "number",
            "description" : "Indicates the maximum amount the user can buy this time without exceeding the maximum. Only if `code` is `maxAmountForPeriod`.\n"
          },
          "dateAllowedAgain" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Indicates the date this user will be able to buy vouchers again for this type. Only if `code` is `maxAmountForPeriod`.\n"
          },
          "currentOpenAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "Indicates the current total amount that is open. Only if `code` is `maxOpenAmount` or `maxTotalOpenAmount`.\n"
          },
          "maxOpenAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "Indicates the maximum total open amount. Only if `code` is `maxOpenAmount` or `maxTotalOpenAmount`.\n"
          },
          "paymentError" : {
            "description" : "The `PaymentError` generated when the voucher payment was being created. Only if `code` is `payment`.\n",
            "$ref" : "#/definitions/PaymentError"
          }
        }
      } ],
      "description" : "Error when buying a voucher"
    },
    "CaptchaResponse" : {
      "type" : "object",
      "properties" : {
        "challenge" : {
          "type" : "string",
          "description" : "The captcha challenge identifier"
        },
        "response" : {
          "type" : "string",
          "description" : "The captcha response, as informed by the user"
        }
      },
      "description" : "Data sent to the server containing the response of a user to a captcha\nchallenge\n"
    },
    "ChangeForgottenPassword" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "The key received by e-mail on the forgotten password reset request\n"
        },
        "securityAnswer" : {
          "type" : "string",
          "description" : "When a security question is asked, this is the answer, and is required.\n"
        },
        "newPassword" : {
          "type" : "string",
          "description" : "The new password value. Required when the password is manual.\n"
        },
        "checkConfirmation" : {
          "type" : "boolean",
          "description" : "Depending on the client, if a confirm password field is shown to users, it might be useful to check the confirmation password value on the server. This way, if there are other validation exceptions, they are all shown together. In this case, this field should be set to `true` and the `confirmationValue` should be passed in with the user input. However, in cases where clients just want to register a user with a password non interactively (like in a bulk registration), passing the password value twice is not desirable. In such cases, this field can be left empty (or set to `false`), and the `newPasswordConfirmation` will be ignored.\n"
        },
        "newPasswordConfirmation" : {
          "type" : "string",
          "description" : "The new password confirmation value. Is ignored unless `checkConfirmation` is set to `true`.\n"
        }
      },
      "description" : "The parameters for confirming a forgotten password reset"
    },
    "ChangePassword" : {
      "type" : "object",
      "properties" : {
        "oldPassword" : {
          "type" : "string",
          "description" : "The current password value. Required when the user is changing his own\npassword. Not used when admins / brokers are changing the password\nof a user they manage.\n"
        },
        "newPassword" : {
          "type" : "string",
          "description" : "The new password value. Required."
        },
        "checkConfirmation" : {
          "type" : "boolean",
          "description" : "Depending on the client, if a confirm password field is shown to users, it might be useful to check the confirmation password value on the server. This way, if there are other validation exceptions, they are all shown together. In this case, this field should be set to `true` and the `confirmationValue` should be passed in with the user input. However, in cases where clients just want to register a user with a password non interactively (like in a bulk registration), passing the password value twice is not desirable. In such cases, this field can be left empty (or set to `false`), and the `newPasswordConfirmation` will be ignored.\n"
        },
        "newPasswordConfirmation" : {
          "type" : "string",
          "description" : "The new password confirmation value. Is ignored unless `checkConfirmation` is set to `true`.\n"
        },
        "forceChange" : {
          "type" : "boolean",
          "description" : "Indicates whether the new password needs to be changed on the next\nlogin. Only used when admins / brokers are changing the password\nof a user they manage.\n"
        }
      },
      "description" : "Contains fields used as parameters when changing a user's password\n"
    },
    "ChangePaymentRequestExpirationDate" : {
      "type" : "object",
      "properties" : {
        "comments" : {
          "type" : "string",
          "description" : "A comment the payee can set."
        },
        "newExpirationDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The new payment request expiration date."
        }
      },
      "description" : "Parameters for changing the payment request expiration date."
    },
    "ClientView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The status of an access client Possible values are:\n* active: The access client is active, and can operate normally\n* blocked: The access client is blocked and cannot be used until it is unblocked\n* removed: The access client was removed, but had transactions, so couldn't be physically removed\n* unassigned: The access client is unassigned (disconnected) from an (remote) application\n",
            "$ref" : "#/definitions/ClientStatusEnum"
          },
          "activationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the client was activated"
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          },
          "canGetActivationCode" : {
            "type" : "boolean",
            "description" : "Can the authenticated user get the activation code, to later\nactivate (assign) this client?\n"
          },
          "canUnassign" : {
            "type" : "boolean",
            "description" : "Can the authenticated user unassign this client?"
          },
          "canBlock" : {
            "type" : "boolean",
            "description" : "Can the authenticated user block this client?"
          },
          "canUnblock" : {
            "type" : "boolean",
            "description" : "Can the authenticated user unblock this client?"
          }
        }
      } ],
      "description" : "Details on an access client"
    },
    "ConflictError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "description" : "Error codes for 409 Conflict entity HTTP status  Possible values are:\n* constraintViolatedOnRemove: An attempt to remove some entity has failed, probably because that entity is in use, that is, is being referenced by some other entity. \n* staleEntity: Failure in the optimistic lock. It means some entity was fetched for editing by 2 clients. Then they both saved it. The first one is successful, but the second one will fail. If you get this error, make sure the `version` field is being sent with the correct value, as fetched from the server.\n",
          "$ref" : "#/definitions/ConflictErrorCode"
        }
      },
      "description" : "Error returned when there was a conflict with some expected status vs the actual database status"
    },
    "Contact" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "contact" : {
            "description" : "The contact user (not the contact owner)",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "A contact is a relation between 2 users: the contact owner and the\ncontact user. It can also contain custom fields.\n"
    },
    "ContactBasicData" : {
      "type" : "object",
      "properties" : {
        "customFields" : {
          "type" : "array",
          "description" : "The contact custom fields",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "contactUser" : {
          "description" : "The contact user details",
          "$ref" : "#/definitions/User"
        }
      },
      "description" : "Contains data shared by both ContactDataForNew and ContactDataForEdit\n"
    },
    "ContactDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "editableFields" : {
            "type" : "array",
            "description" : "The internal names of custom fields that can be edited",
            "items" : {
              "type" : "string"
            }
          },
          "contact" : {
            "description" : "The contact that is being edited. This value can be modified and sent back to `PUT /contact/{id}`\n",
            "$ref" : "#/definitions/ContactEdit"
          },
          "binaryValues" : {
            "description" : "Holds the current values for file / image custom fields as lists of\n`StoredFile`s / `Image`s.\n",
            "$ref" : "#/definitions/CustomFieldBinaryValues"
          }
        }
      } ],
      "description" : "Contains data for editing an existing contact\n"
    },
    "ContactDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "contact" : {
            "description" : "The contact populated with the default fields. This value can be modified and sent back to `POST /{owner}/contacts/{contactUser}`.\n",
            "$ref" : "#/definitions/ContactNew"
          }
        }
      } ],
      "description" : "Contains data for creating a new contact\n"
    },
    "ContactEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Parameters for editing an existing contact"
    },
    "ContactInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "The e-mail for this additional contact information"
          },
          "mobilePhone" : {
            "type" : "string",
            "description" : "The formatted mobile phone for this additional contact information\n"
          },
          "landLinePhone" : {
            "type" : "string",
            "description" : "The formatted landline phone for this additional contact information\n"
          },
          "landLineExtension" : {
            "type" : "string",
            "description" : "The landline phone extension for this additional contact information\n"
          },
          "normalizedMobilePhone" : {
            "type" : "string",
            "description" : "The mobile phone, normalized to the E.164 format\n"
          },
          "normalizedLandLinePhone" : {
            "type" : "string",
            "description" : "The land-line phone, normalized to the E.164 format\n"
          },
          "address" : {
            "description" : "The address for this additional contact information",
            "$ref" : "#/definitions/Address"
          },
          "image" : {
            "description" : "The image for this additional contact information",
            "$ref" : "#/definitions/Image"
          }
        }
      } ],
      "description" : "An additional contact information reference",
      "x-implements" : "IContactInfo"
    },
    "ContactInfoBasicData" : {
      "type" : "object",
      "properties" : {
        "customFields" : {
          "type" : "array",
          "description" : "The additional contact information custom fields",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "addresses" : {
          "type" : "array",
          "description" : "The available user addresses, which can be referenced by id\n",
          "items" : {
            "$ref" : "#/definitions/Address"
          }
        },
        "phoneConfiguration" : {
          "description" : "Contains configuration data for phones\n",
          "$ref" : "#/definitions/PhoneConfiguration"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        }
      },
      "description" : "Contains data shared by both ContactInfoDataForNew and\nContactInfoDataForEdit\n"
    },
    "ContactInfoBinaryValuesForUserProfile" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomFieldBinaryValues"
      }, {
        "type" : "object",
        "properties" : {
          "image" : {
            "description" : "The image for this additional contact information",
            "$ref" : "#/definitions/Image"
          }
        }
      } ],
      "description" : "Holds the current additional contact image and binary field values\n"
    },
    "ContactInfoConfigurationForUserProfile" : {
      "type" : "object",
      "properties" : {
        "contactInfo" : {
          "description" : "Contains the default values for a new additional contact",
          "$ref" : "#/definitions/ContactInfoNew"
        },
        "availability" : {
          "description" : "The availability for additional contacts Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "customFields" : {
          "type" : "array",
          "description" : "The custom fields for additional contact informations",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "edit" : {
          "type" : "boolean",
          "description" : "Can the authenticated user edit additional contacts?"
        },
        "managePrivacy" : {
          "type" : "boolean",
          "description" : "Can the authenticated user manage the privacy of additional contacts?\n"
        },
        "maxContactInfos" : {
          "type" : "integer",
          "description" : "The maximum number of additional contacts the user can own"
        }
      },
      "description" : "User additional contacts data sent when editing the full profile\n"
    },
    "ContactInfoDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "contactInfo" : {
            "description" : "The additional contact information that is being edited. This value can be modified and sent back on `PUT /contactInfos/{id}`.\n",
            "$ref" : "#/definitions/ContactInfoEdit"
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Indicates whether the current contact info can be edited by the currently authenticated used.\n"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Indicates whether the current contact info can be removed by the currently authenticated used.          \n"
          },
          "image" : {
            "description" : "The image for this additional contact information",
            "$ref" : "#/definitions/Image"
          },
          "binaryValues" : {
            "description" : "Holds the current values for file / image custom fields as lists of\n`StoredFile`s / `Image`s.\n",
            "$ref" : "#/definitions/CustomFieldBinaryValues"
          }
        }
      } ],
      "description" : "Contains data for editing an existing additional contact information\n"
    },
    "ContactInfoDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "contactInfo" : {
            "description" : "The additional contact information populated with the default fields. This value can be modified and sent back on `POST /{user}/contactInfos`.\n",
            "$ref" : "#/definitions/ContactInfoNew"
          }
        }
      } ],
      "description" : "Contains data for creating a new additional contact information\n"
    },
    "ContactInfoDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfo"
      }, {
        "type" : "object",
        "properties" : {
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values on this additional contact\ninformation\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldValue"
            }
          },
          "operations" : {
            "type" : "array",
            "description" : "The list of custom operations the logged user can run over this\nadditional contact information\n",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          }
        }
      } ],
      "description" : "Contains extra details of an additional contact information"
    },
    "ContactInfoEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Fields for editing an additional contact information"
    },
    "ContactInfoEditWithId" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoEdit"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The internal entity identifier"
          }
        }
      } ],
      "description" : "Parameters for editing an existing additional contact"
    },
    "ContactInfoManage" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The address name"
        },
        "email" : {
          "type" : "string",
          "description" : "The e-mail for this additional contact information"
        },
        "mobilePhone" : {
          "type" : "string",
          "description" : "The formatted mobile phone for this additional contact information\n"
        },
        "landLinePhone" : {
          "type" : "string",
          "description" : "The formatted landline phone for this additional contact information\n"
        },
        "landLineExtension" : {
          "type" : "string",
          "description" : "The landline phone extension for this additional contact information\n"
        },
        "image" : {
          "type" : "string",
          "description" : "The identifier of either an uploaded temporary image, or an existing\nadditional contact image.\n"
        },
        "address" : {
          "type" : "string",
          "description" : "The identifier for the user address to be used as address of this\nadditional contact information\n"
        },
        "hidden" : {
          "type" : "boolean",
          "description" : "Whether this additional contact information should be hidden\nfor other users\n"
        },
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Common fields for either creating or editing an additional\ncontact information\n",
      "x-abstract" : true,
      "x-implements" : "IContactInfo"
    },
    "ContactInfoNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoManage"
      } ],
      "description" : "Fields for a new additional contact information\n"
    },
    "ContactInfoResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfo"
      }, {
        "type" : "object",
        "properties" : {
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this additional contact information is hidden\nfor other users.\n"
          },
          "customValues" : {
            "type" : "object",
            "description" : "Holds the values for custom fields, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "An additional contact information as a result item"
    },
    "ContactInfoView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactInfoDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "The user which owns this additional contact information",
            "$ref" : "#/definitions/User"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this additional contact information should be\nhidden for other users  \n"
          }
        }
      } ],
      "description" : "Contains details of an additional contact information"
    },
    "ContactListDataForSearch" : {
      "type" : "object",
      "properties" : {
        "customFields" : {
          "type" : "array",
          "description" : "The list of contact custom fields that are either to be used as search filter (if its internal name is present on `fieldsInSearch`) and / or in the result list (if its internal name is present on `fieldsInList`) \n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "fieldsInSearch" : {
          "type" : "array",
          "description" : "The internal names of the contact custom fields that should be used as\nsearch filters (separated fields, not keywords)\n",
          "items" : {
            "type" : "string"
          }
        },
        "addressFieldsInSearch" : {
          "type" : "array",
          "description" : "Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are:\n* address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`  \n* city: Filters by city name\n* country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)\n* neighborhood: Filters by neighborhood name \n* poBox: Filters by post-office box (exact match)\n* region: Filters by region or state\n* zip: Filters by zip (postal) code (exact match)\n",
          "items" : {
            "$ref" : "#/definitions/AddressQueryFieldEnum"
          }
        },
        "fieldsInList" : {
          "type" : "array",
          "description" : "The internal names of the contact custom fields that will be returned\ntogether with each record, and should be shown in the result list\n",
          "items" : {
            "type" : "string"
          }
        },
        "query" : {
          "description" : "Default query filters for searching records\n",
          "$ref" : "#/definitions/ContactListQueryFilters"
        },
        "hasVisibleFields" : {
          "type" : "boolean",
          "description" : "This flag can be used to know whether selecting a contact in the \ncontact list should show direclty the user profile or a contact details\npage to show additional custom fields.\n"
        },
        "hasEditableFields" : {
          "type" : "boolean",
          "description" : "This flag can be used to know whether the contact should be added\ndirectly to the user's contact list or a page should be shown\nfor the user to fill in the contact custom fields.\n"
        }
      },
      "description" : "Data for searching an user's contact list"
    },
    "ContactListQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "keywords" : {
            "type" : "string",
            "description" : "Textual search keywords. Sometimes, like in user search, the fields\nmatched depends on what is configured on the products.\n"
          },
          "customFields" : {
            "type" : "array",
            "description" : "Concat custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customValues=extraDate:|2001-12-31`.      \n",
            "items" : {
              "type" : "string"
            }
          },
          "orderBy" : {
            "description" : "Possible options for ordering the results of a contact list. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
            "$ref" : "#/definitions/ContactOrderByEnum"
          }
        }
      } ],
      "description" : "Search filters for an user's contact list"
    },
    "ContactManage" : {
      "type" : "object",
      "properties" : {
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Common fields for either creating or editing a contact",
      "x-abstract" : true
    },
    "ContactNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactManage"
      }, {
        "type" : "object",
        "properties" : {
          "contact" : {
            "type" : "string",
            "description" : "The user which is the contact of a given owner. Can be either the id\nor another identifier, such as login name or e-mail, depending on\nthe Cyclos configuration. \n"
          }
        }
      } ],
      "description" : "Parameters for creating a new contact"
    },
    "ContactResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Contact"
      }, {
        "type" : "object",
        "properties" : {
          "customValues" : {
            "type" : "object",
            "description" : "Holds the values for contact custom fields which are set to be returned on list, keyed by field internal name\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Contains data returned when searching for an user's contact list\n"
    },
    "ContactView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Contact"
      }, {
        "type" : "object",
        "properties" : {
          "owner" : {
            "description" : "The user which owns this contact",
            "$ref" : "#/definitions/User"
          },
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values this contact has",
            "items" : {
              "$ref" : "#/definitions/CustomFieldValue"
            }
          },
          "canManage" : {
            "type" : "boolean",
            "description" : "Can the authenticated user manage this contact?"
          },
          "operations" : {
            "type" : "array",
            "description" : "List of runnable custom operations.",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          }
        }
      } ],
      "description" : "Detailed information when viewing a contact"
    },
    "ContactsPermissions" : {
      "type" : "object",
      "properties" : {
        "enable" : {
          "type" : "boolean",
          "description" : "Permission to own a contact list."
        },
        "hasVisibleFields" : {
          "type" : "boolean",
          "description" : "Permission to view contacts custom fields."
        },
        "hasEditableFields" : {
          "type" : "boolean",
          "description" : "Permission to manage contacts custom fields."
        }
      },
      "description" : "Permissions over contacts"
    },
    "ContactsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FullTextQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "ignoreProfileFieldsInList" : {
            "type" : "boolean",
            "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n"
          },
          "includeGroup" : {
            "type" : "boolean",
            "description" : "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users. \n"
          },
          "includeGroupSet" : {
            "type" : "boolean",
            "description" : "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users. \n"
          }
        }
      } ],
      "description" : "Search filters for users that are contacts, not contacts themselves\n"
    },
    "Country" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "The 2-letter, `ISO 3166-1 alpha-2` code"
        },
        "name" : {
          "type" : "string",
          "description" : "The display name (in the user's language)"
        }
      },
      "description" : "Represents a country, with a code and display name"
    },
    "Currency" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "symbol" : {
            "type" : "string",
            "description" : "The currency symbol"
          },
          "prefix" : {
            "type" : "string",
            "description" : "The currency prefix when formatting numbers"
          },
          "suffix" : {
            "type" : "string",
            "description" : "The currency suffix when formatting numbers"
          },
          "transactionNumberPattern" : {
            "type" : "string",
            "description" : "If transaction number is enabled for this currency, contains\nthe pattern which is expected, in case of rendering a field for\nusers to type in a transaction number\n"
          },
          "decimalDigits" : {
            "type" : "integer",
            "description" : "The number of decimal digits used by this currency"
          }
        }
      } ],
      "description" : "Reference to a currency"
    },
    "CustomField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The data type for the custom field Possible values are:\n* boolean: A boolean value\n* date: A date value\n* decimal: A decimal value\n* dynamicSelection: Single selection based on options generated by a custom script\n* file: Multiple binary files\n* image: Multiple images\n* integer: An integer value\n* linkedEntity: Another entity. Uses the `linkedEntityType` to define which kind of entity is it\n* multiSelection: Multiple enumerated values\n* richText: A multi line string formatted as HTML\n* singleSelection: A single enumerated value\n* string: A single line string\n* text: A multi line string\n* url: An URL\n",
            "$ref" : "#/definitions/CustomFieldTypeEnum"
          },
          "linkedEntityType" : {
            "description" : "When the type is linkedEntity, indicates the entity type Possible values are:\n* advertisement: An advertisement\n* record: A record (user or system)\n* transaction: A transaction (payment, scheduled payment, payment request, etc)\n* transfer: A transfer\n* user: An user\n",
            "$ref" : "#/definitions/LinkedEntityTypeEnum"
          },
          "control" : {
            "description" : "The UI control (widget) type that should be used to render this field for edit. Most notably, the types that can have distinct controls are singleSelection, that could be rendered as a single selection widget or radio button group, and multi selection, which could be rendered as a multi selection widget or a checkbox group. Possible values are:\n* checkbox: A checkbox group\n* entitySelection: A widget to select a linked entity (for example, an auto-complete for users)\n* multiSelection: A multi-selection field\n* radio: A radio button group\n* richEditor: An HTML editor\n* singleSelection: A single-selection field\n* text: A single line text\n* textarea: A multi line text\n* upload: A widget to upload a file\n",
            "$ref" : "#/definitions/CustomFieldControlEnum"
          },
          "kind" : {
            "description" : "Determines the kind if a custom field Possible values are:\n* contact: Contact fields.\n* contactInfo: Additional contact information fields.\n* custom_operation: Custom operation fields.\n* document: Document fields.\n* marketplace: Advertisements field.\n* record: Record fields.\n* transaction: Transaction fields.\n* user: User profile fields.\n",
            "$ref" : "#/definitions/CustomFieldKind"
          },
          "decimalDigits" : {
            "type" : "integer",
            "description" : "The number of decimal digits. Only available if `type` is\n"
          }
        }
      } ],
      "description" : "Contains reference to a custom field\n"
    },
    "CustomFieldBinaryValues" : {
      "type" : "object",
      "properties" : {
        "fileValues" : {
          "type" : "object",
          "description" : "The values for custom fields of type `file`",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/StoredFile"
            }
          }
        },
        "imageValues" : {
          "type" : "object",
          "description" : "The values for custom fields of type `image`",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Image"
            }
          }
        }
      },
      "description" : "Holds the values for uploaded files / images which are used as\ncustom field values\n"
    },
    "CustomFieldDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomField"
      }, {
        "type" : "object",
        "properties" : {
          "informationText" : {
            "type" : "string",
            "description" : "Additional text that can be shown to the user as a hint of this field\n"
          },
          "size" : {
            "description" : "The size of the widget that should be rendered Possible values are:\n* full: The widget should occupy 100% of the available area\n* large: A large widget\n* medium: A medium widget\n* small: A small widget\n* tiny: A very small widget\n",
            "$ref" : "#/definitions/CustomFieldSizeEnum"
          },
          "pattern" : {
            "type" : "string",
            "description" : "The (optional) mask to be applied to string values"
          },
          "required" : {
            "type" : "boolean",
            "description" : "Indicates whether this field is required"
          },
          "allSelectedLabel" : {
            "type" : "string",
            "description" : "The label to be shown when all values are selected for a \nmulti selection field.\n"
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "The value that should be suggested as default. For multi selection\nwill be a comma-separated string with possible values ids or internal\nnames.\n"
          },
          "possibleValueCategories" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is enumerated (single or multi\nselect). Contains the possible value categories.\n",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          },
          "hasValuesList" : {
            "type" : "boolean",
            "description" : "Returns whether this custom field has a list of possible values,\naccording to its type.\n"
          },
          "possibleValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is enumerated (single or multi\nselection). Contains the possible values for selection.\nEach value may or may not have a category.\nWhen they have, it will be a string pointing to the internal name\n(if available) or id of the possible value category,\nwhich can be looked up in the categories property.\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldPossibleValue"
            }
          },
          "dynamicValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is dynamic selection.\nContains the script-generated possible values.\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDynamicValue"
            }
          },
          "stringValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field type is `string` and `hasValuesList` is `true`. Contains the possible string values.\n",
            "items" : {
              "type" : "string"
            }
          },
          "dateValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field type is `date` and `hasValuesList` is `true`. Contains the possible date values.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "integerValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field type is `integer` and `hasValuesList` is `true`. Contains the possible integer values.\n",
            "items" : {
              "type" : "integer"
            }
          },
          "decimalValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field type is `decimal` and `hasValuesList` is `true`. Contains the possible decimal values.\n",
            "items" : {
              "type" : "string",
              "format" : "number"
            }
          },
          "adValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is linked entity of type `advertisement` and `hasValuesList` is `true`. Contains the possible advertisements.\n",
            "items" : {
              "$ref" : "#/definitions/Ad"
            }
          },
          "transactionValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is linked entity of type `transaction` and `hasValuesList` is `true`. Contains the possible transactions.\n",
            "items" : {
              "$ref" : "#/definitions/Transaction"
            }
          },
          "transferValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is linked entity of type `transfer` and `hasValuesList` is `true`. Contains the possible transfers.\n",
            "items" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "recordValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is linked entity of type `record` and `hasValuesList` is `true`. Contains the possible records.\n",
            "items" : {
              "$ref" : "#/definitions/Record"
            }
          },
          "userValues" : {
            "type" : "array",
            "description" : "Only applicable when the custom field is linked entity of type `user` and `hasValuesList` is `true`. Contains the possible users.\n",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          },
          "maxFiles" : {
            "type" : "integer",
            "description" : "Only applicable when the custom field type is \n`file` or `image`.\nThe maximun files that can be uploaded\n"
          },
          "mimeTypes" : {
            "type" : "array",
            "description" : "The allowed mime types for binary custom fields.\nOnly applicable when the custom field type is either \n`file` or `image` \n",
            "items" : {
              "type" : "string"
            }
          },
          "allowedMimeTypes" : {
            "type" : "array",
            "description" : "(deprecated) Only applicable when the custom field type is \n`file`.\nContains the possible built-in mime types allowed for the file being \nuploaded\n",
            "items" : {
              "$ref" : "#/definitions/FileMimeTypeEnum"
            },
            "x-deprecated" : "Use `mimeTypes` instead",
            "x-remove-version" : 4.13
          },
          "otherMimeTypes" : {
            "type" : "array",
            "description" : "(deprecated) Only applicable when the custom field type is \n`file`and the `others`\noption was selected in `allowedMimeTypes`.\nContains the other mime types allowed for the file being uploaded \n",
            "items" : {
              "type" : "string"
            },
            "x-deprecated" : "Use `mimeTypes` instead",
            "x-remove-version" : 4.13
          }
        }
      } ],
      "description" : "Contains all information needed to render a widget for a custom field value\n"
    },
    "CustomFieldDynamicValue" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "The internal value"
        },
        "label" : {
          "type" : "string",
          "description" : "The display label"
        },
        "defaultValue" : {
          "type" : "boolean",
          "description" : "The value that should be suggested as default."
        }
      },
      "description" : "Represents a single possible value of a dynamic custom field\n"
    },
    "CustomFieldPossibleValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The display value"
          },
          "default" : {
            "type" : "boolean",
            "description" : "Indicates if this possible value is the default one."
          },
          "internalName" : {
            "type" : "string",
            "description" : "The entity internal name, which can be seen as an extra identifier\n"
          },
          "category" : {
            "description" : "The internal name (if available) or id of the possible value\ncategory. Optional, and never used if custom field type is\ndynamic selection.\n",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Represents a single possible value of an enumerated (single or multi\nselection) custom field\n"
    },
    "CustomFieldValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseCustomFieldValue"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "description" : "The custom field reference",
            "$ref" : "#/definitions/CustomField"
          }
        }
      } ],
      "description" : "See the description on `BaseCustomFieldValue`   \n"
    },
    "DataForAccountHistory" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransferDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "account" : {
            "description" : "Information about this specific account",
            "$ref" : "#/definitions/AccountWithCurrency"
          },
          "transactionNumberMask" : {
            "type" : "string",
            "description" : "If a transaction number is used for this account, is a pattern that\nrepresent it.\n"
          },
          "canFilterByDirection" : {
            "type" : "boolean",
            "description" : "Whether the current user can use the direction filter by direction.\nIn some cases, such as restricted operators that can only see\nincoming or outgoing payments, this flag will be `false`.\n"
          },
          "showDescriptionInFilters" : {
            "type" : "boolean",
            "description" : "Whether to show the description as filter or not"
          },
          "showDescriptionInList" : {
            "type" : "boolean",
            "description" : "Whether to show the description in the result list or not"
          },
          "customFieldsInSearch" : {
            "type" : "array",
            "description" : "Detailed references for custom fields that are set to be used\nas search filters \n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDetailed"
            }
          },
          "customFieldsInList" : {
            "type" : "array",
            "description" : "Simple references for custom fields that are set to be used\non the search result list \n",
            "items" : {
              "$ref" : "#/definitions/CustomField"
            }
          },
          "query" : {
            "description" : "Default query filters for the account history\n",
            "$ref" : "#/definitions/AccountHistoryQueryFilters"
          }
        }
      } ],
      "description" : "Contains data used to search the history of a given account"
    },
    "DataForChangeForgottenPassword" : {
      "type" : "object",
      "properties" : {
        "generated" : {
          "type" : "boolean",
          "description" : "Indicates whether the password that is being affected is generated (when `true`) or manual (when `false`).\n"
        },
        "securityQuestion" : {
          "type" : "string",
          "description" : "If configured in Cyclos, and defined by the user, will be the security question that needs to be answered in order to complete the forgotten password reset request.\n"
        }
      },
      "description" : "Definitions for a user to confirm a forgotten password request"
    },
    "DataForEasyInvoice" : {
      "type" : "object",
      "properties" : {
        "to" : {
          "description" : "The destination user details. Is only returned if called with a logged\nuser or if the user's group is visible to guests accoerding to the\ncurrent configuration. \n",
          "$ref" : "#/definitions/User"
        },
        "amount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The easy invoice amount"
        },
        "currency" : {
          "description" : "The easy invoice currency.",
          "$ref" : "#/definitions/Currency"
        },
        "paymentTypeData" : {
          "description" : "Contains the detailed data for the selected (or first) payment type.\nOnly returned if there is a logged user. The custom fields will\nonly contain those without a fixed value.\n",
          "$ref" : "#/definitions/TransactionTypeData"
        },
        "paymentTypes" : {
          "type" : "array",
          "description" : "Only returned if there is a logged user, and a specific payment type\nwas not informed.\nContains the allowed payment types to the given user.\n",
          "items" : {
            "$ref" : "#/definitions/TransferTypeWithCurrency"
          }
        },
        "customValues" : {
          "type" : "array",
          "description" : "The list of custom field values with a fixed value, as requested. \n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldValue"
          }
        }
      },
      "description" : "Contains data for an easy invoice. When called as guest, a subset of the fields are returned.\n"
    },
    "DataForEditFullProfile" : {
      "type" : "object",
      "properties" : {
        "display" : {
          "type" : "string",
          "description" : "Contains the formatting of the user according to the \nconfiguration. Is only returned if no profile fields are marked to\nreturn in user list\n"
        },
        "shortDisplay" : {
          "type" : "string",
          "description" : "Contains the short formatting of the user according to\nthe configuration. Is only returned if no profile fields are marked\nto return in user list\n"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        },
        "userConfiguration" : {
          "description" : "Data for editing the basic fields",
          "$ref" : "#/definitions/BasicUserDataForEdit"
        },
        "user" : {
          "description" : "User model which can be modified and sent back",
          "$ref" : "#/definitions/UserEdit"
        },
        "phoneConfiguration" : {
          "description" : "Configuration data regarding phones",
          "$ref" : "#/definitions/PhoneConfigurationForUserProfile"
        },
        "landLinePhones" : {
          "type" : "array",
          "description" : "The existing land-line phones that can be modified and posted back\n",
          "items" : {
            "$ref" : "#/definitions/PhoneEditWithId"
          }
        },
        "mobilePhones" : {
          "type" : "array",
          "description" : "The existing mobile phones that can be modified and posted back\n",
          "items" : {
            "$ref" : "#/definitions/PhoneEditWithId"
          }
        },
        "addressConfiguration" : {
          "description" : "Configuration data regarding addresses",
          "$ref" : "#/definitions/AddressConfigurationForUserProfile"
        },
        "addresses" : {
          "type" : "array",
          "description" : "The existing addresses that can be modified and posted back\n",
          "items" : {
            "$ref" : "#/definitions/AddressEditWithId"
          }
        },
        "contactInfoConfiguration" : {
          "description" : "Configuration data regarding additional contacts",
          "$ref" : "#/definitions/ContactInfoConfigurationForUserProfile"
        },
        "contactInfos" : {
          "type" : "array",
          "description" : "The existing additional contacts that can be modified and posted back\n",
          "items" : {
            "$ref" : "#/definitions/ContactInfoEditWithId"
          }
        },
        "contactInfoBinaryValues" : {
          "type" : "object",
          "description" : "Values for images and binary custom fields for additional contacts\n",
          "additionalProperties" : {
            "$ref" : "#/definitions/ContactInfoBinaryValuesForUserProfile"
          }
        },
        "imageConfiguration" : {
          "description" : "Configuration data regarding images",
          "$ref" : "#/definitions/ImageConfigurationForUserProfile"
        },
        "images" : {
          "type" : "array",
          "description" : "All current user images",
          "items" : {
            "$ref" : "#/definitions/Image"
          }
        }
      },
      "description" : "Contains data for editing the full profile of a user"
    },
    "DataForLogin" : {
      "type" : "object",
      "properties" : {
        "accessPasswordType" : {
          "description" : "The password type used for login access\n",
          "$ref" : "#/definitions/EntityReference"
        },
        "principalTypes" : {
          "type" : "array",
          "description" : "The identification methods accepted for login",
          "items" : {
            "$ref" : "#/definitions/PrincipalTypeInput"
          }
        },
        "defaultPrincipalType" : {
          "type" : "string",
          "description" : "The internal name of the identification method that is marked as\ndefault for the current channel configuration. This is optional, and\nif there is no default, all possible identification methods will be\nattempted for login.\n"
        },
        "extraForgotPasswordPrincipalTypes" : {
          "type" : "array",
          "description" : "The additional identification methods also accepted for the \nforgotten password request.\n",
          "items" : {
            "$ref" : "#/definitions/PrincipalTypeInput"
          }
        },
        "loginPasswordInput" : {
          "description" : "Contains data for the password used on login",
          "$ref" : "#/definitions/PasswordInput"
        },
        "forgotPasswordCaptchaProvider" : {
          "description" : "If the forgot password request requires a captcha, will be the  provider used to request one. Otherwise will be null. Possible values are:\n* internal: Default provider using images\n",
          "$ref" : "#/definitions/CaptchaProviderEnum"
        },
        "forgotPasswordMediums" : {
          "type" : "array",
          "description" : "If the forgot password request is enabled, returns the mediums the user can choose to receive the confirmation key or code.  If nothing is returned, forgot password is not enabled. Possibles values for each array element are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
          "items" : {
            "$ref" : "#/definitions/SendMediumEnum"
          }
        }
      },
      "description" : "Contains data useful for a login form, as well as forgot password\n"
    },
    "DataForMobileGuest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/MobileBaseData"
      }, {
        "type" : "object",
        "properties" : {
          "allowQuickPayment" : {
            "type" : "boolean",
            "description" : "Enables a quick payment action by showing the option to scan a QR code at login page.\n"
          },
          "dataForLogin" : {
            "description" : "The data for user login",
            "$ref" : "#/definitions/DataForLogin"
          },
          "groupsForRegistration" : {
            "type" : "array",
            "description" : "The list of groups the authenticated user can use to perform a new user registration",
            "items" : {
              "$ref" : "#/definitions/GroupForRegistration"
            }
          },
          "header" : {
            "description" : "The mobile header",
            "$ref" : "#/definitions/UIElementWithContent"
          },
          "footer" : {
            "description" : "The mobile footer",
            "$ref" : "#/definitions/UIElementWithContent"
          }
        }
      } ],
      "description" : "Contains definitions for the data for UI for guests  \n"
    },
    "DataForMobileUser" : {
      "allOf" : [ {
        "$ref" : "#/definitions/MobileBaseData"
      }, {
        "type" : "object",
        "properties" : {
          "autoCompleteResults" : {
            "type" : "integer",
            "description" : "Number of search results for user autocomplete component"
          },
          "hideUsersSearchMenu" : {
            "type" : "boolean",
            "description" : "Indicates if the user search menu should be hidden."
          },
          "auth" : {
            "description" : "The authenticated user",
            "$ref" : "#/definitions/Auth"
          },
          "nameOfUser" : {
            "type" : "string",
            "description" : "The name of the current user (if any)"
          },
          "mobileHelp" : {
            "description" : "The help content for mobile mode",
            "$ref" : "#/definitions/UIElementWithContent"
          },
          "posHelp" : {
            "description" : "The help content for mobile mode",
            "$ref" : "#/definitions/UIElementWithContent"
          },
          "mapBrowserApiKey" : {
            "type" : "string",
            "description" : "The Google Maps browser API key"
          },
          "pages" : {
            "type" : "array",
            "description" : "The visible mobile pages",
            "items" : {
              "$ref" : "#/definitions/MobilePage"
            }
          },
          "operations" : {
            "type" : "array",
            "description" : "The custom operations the user can run",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "canReceiveFromNfcTag" : {
            "type" : "boolean",
            "description" : "Indicates whether there is at least one NFC tag the user can use\nto receive payments\n"
          },
          "personalizeOtherUsers" : {
            "type" : "boolean",
            "description" : "Indicates if the current user can personalize NFC tags for other users (as member)"
          },
          "mobileCameraOnPayment" : {
            "type" : "boolean",
            "description" : "Indicates whether the scan QR code option should be displayed for payments         \n"
          },
          "principalsAllowingQRCode" : {
            "type" : "array",
            "description" : "Indicates the possible principals which are allowed to be used in QR code generation",
            "items" : {
              "$ref" : "#/definitions/Principal"
            }
          },
          "shoppingCartWebShopCount" : {
            "type" : "integer",
            "description" : "The total number of webshop ads present in the shopping cart"
          },
          "notificationsStatus" : {
            "description" : "Status of user notifications, like new received or unread notifications",
            "$ref" : "#/definitions/NotificationsStatus"
          },
          "allowedOperations" : {
            "type" : "array",
            "description" : "The possible operations the mobile application can perform Possibles values for each array element are:\n* acceptTicket: Accepts a generated QR code for performing a payment\n* activateNfcDevice: Activate the phone as NFC device\n* assignPos: Assign an access client for POS mode\n* boughtVouchers: View bought vouchers\n* buyVoucher: Buy a voucher\n* createTicket: Generate a QR Code for receive payment\n* deactivateNfcDevice: Deactivate the phone as NFC device\n* formatNfc: Format NFC tags\n* initializeNfc: Initialize NFC tags\n* makeSystemPayment: Perform payments to system\n* makeUserPayment: Perform payments to other users\n* manageContacts: Manage own contacts\n* manageOperators: Manage own/user operators\n* managePasswords: Manage passwords\n* mapDirectory: View the user directory (map)\n* paymentRequests: Search and view payment requests\n* personalizeNfc: Personalize NFC tags \n* personalizeNfcSelf: Personalize NFC tags for the logged user or its operators\n* purchases: Search and view purchased webshops\n* readNfc: Read NFC tags\n* receivePayment: Receive payments from other users\n* redeemVoucher: Redeem vouchers\n* registerUsersAsManager: Register other users as user manager\n* registerUsersAsMember: Register other users as member or operator\n* sendPaymentRequestToSystem: Send payment requests to system\n* sendPaymentRequestToUser: Send payment requests to users\n* unassignPos: Unassign the current access client from POS mode\n* usersSearch: Search other users\n* viewAccountInformation: View own accounts\n* viewAdvertisements: Search and view advertisements and webshop\n* viewRedeemed: View redeemed vouchers\n* viewUserProfile: View the profile of other users\n",
            "items" : {
              "$ref" : "#/definitions/MobileOperationEnum"
            }
          }
        }
      } ],
      "description" : "Contains definitions for the data for UI for users  \n"
    },
    "DataForTransaction" : {
      "type" : "object",
      "properties" : {
        "accounts" : {
          "type" : "array",
          "description" : "Only returned when the payment type is not selected.\nContains the possible accounts which can be used either as source\n(when performing the payment) or destination (when receiving the\npayment, on POS).\n",
          "items" : {
            "$ref" : "#/definitions/AccountWithStatus"
          }
        },
        "fromKind" : {
          "description" : "Indicates the account kind that will perform the payment",
          "$ref" : "#/definitions/AccountKind"
        },
        "fromUser" : {
          "description" : "Only returned if `fromKind` is `user`. Is the payer user.\n",
          "$ref" : "#/definitions/User"
        },
        "toKind" : {
          "description" : "Indicates the account kind that will receive the payment",
          "$ref" : "#/definitions/AccountKind"
        },
        "toUser" : {
          "description" : "Only returned if `toKind` is `user`. Is the payee user.\n",
          "$ref" : "#/definitions/User"
        },
        "paymentTypeData" : {
          "description" : "Contains the detailed data for the selected (or first) payment type\n",
          "$ref" : "#/definitions/TransactionTypeData"
        },
        "paymentTypes" : {
          "type" : "array",
          "description" : "Only returned when the payment type is not selected.\nContains the allowed payment types for a payment between the\nselected from and to owners.\n",
          "items" : {
            "$ref" : "#/definitions/TransferTypeWithCurrency"
          }
        },
        "allowAutocomplete" : {
          "type" : "boolean",
          "description" : "Only returned when no subject is selected.\nIndicates whether the payee can be obtaining by freely searching users\n"
        },
        "allowContacts" : {
          "type" : "boolean",
          "description" : "Only returned when no subject is selected.\nIndicates whether the payee can be obtaining from the contact list\n"
        },
        "allowedUsers" : {
          "type" : "array",
          "description" : "If the authorized user is a restricted operator, it may be that the owner user has defined exactly to which users the operator can pay. If this is the case, this will be the list with such users.\n",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "principalTypes" : {
          "type" : "array",
          "description" : "Only returned when no subject is selected.\nThe possible principal types that can be used to locate the payee\n",
          "items" : {
            "$ref" : "#/definitions/PrincipalTypeInput"
          }
        },
        "defaultIdMethod" : {
          "description" : "Only returned when no subject is selected. The default option for the identification method when performing a payment. Possible values are:\n* autocomplete: The client application should search for an user and pass in the id\n* contacts: The client application should access the contact list of the authenticated user and pass the id\n* principalType: The client application should pass in an identification (principal) of the user, such as login name, e-mail and so on\n",
          "$ref" : "#/definitions/IdentificationMethodEnum"
        },
        "defaultPrincipalType" : {
          "type" : "string",
          "description" : "Only returned when no subject is selected. If the `defaultIdMethod` is `principalType`, contains the internal name or id of the principal type that should be the default. If there is a default, the user should be provided with the option to choose which principal type he's using. If there is no default, all possible principal types will be attempted. In this case, the UI will normally not show the option for which principal type should be used.\n"
        }
      },
      "description" : "Contains basic configuration data used when performing a transaction. The path that returns it will normally receive the main transaction owner (system or user), plus 2 other optional parameters: - The other subject (system or user) that will either receive or perform\n  the payment.\n- The payment type. There are 3 possibilities when returning: - When the other subject wasn't selected. In this case, will contain very\n  few information, mostly the accounts.\n- The other subject is selected, but not a payment type. If so, the\n  payment types will be returned, but not information on how to pick\n  the subject user, or the accounts.\n- Both other subject and payment type are selected: In this case\n  only the payment type data will be returned\n"
    },
    "DataForUi" : {
      "type" : "object",
      "properties" : {
        "cyclosVersion" : {
          "type" : "string",
          "description" : "The version of the Cyclos server. It will of the form x.y[.z]    \n"
        },
        "currentClientTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The current time in the the user's time zone.\n"
        },
        "auth" : {
          "description" : "The logged user authentication. Not returned for guests.",
          "$ref" : "#/definitions/Auth"
        },
        "dataForLogin" : {
          "description" : "The data used for logging the user in. Not returned for logged users.\n",
          "$ref" : "#/definitions/DataForLogin"
        },
        "publicRegistrationGroups" : {
          "type" : "array",
          "description" : "Groups that can be used for a public registration. Not returned\nfor logged users.\n",
          "items" : {
            "$ref" : "#/definitions/GroupForRegistration"
          }
        },
        "mapData" : {
          "description" : "Configuration data for map usage. Is null when maps are not used. \n",
          "$ref" : "#/definitions/MapData"
        },
        "decimalSeparator" : {
          "type" : "string",
          "description" : "The character used to specify the decimal point   \n"
        },
        "groupingSeparator" : {
          "type" : "string",
          "description" : "The character used to separate thousands.    \n"
        },
        "dateFormat" : {
          "type" : "string",
          "description" : "The pattern string used to format dates.\n\nThe following are the letters used in each supported pattern:\n\n* dd: The day of the month;\n\n* MM: The month ranging from 1 to 12;\n\n* yyyy: The full year number.  \n"
        },
        "timeFormat" : {
          "type" : "string",
          "description" : "The pattern string used to format time.\n\nThe following are the letters used in each supported pattern:\n\n* hh: The hour of the morning or afternoon (12-hour clock);\n\n* HH: The hour of the day (24-hour clock);\n\n* mm: The minute within the hour;\n\n* a: Marker to idicate whether the hour (hh) is before or after noon. \n"
        },
        "timeZoneId" : {
          "type" : "string",
          "description" : "The time zone ID set in the configuration (e.g `Europe/Amsterdam`)"
        },
        "distanceUnit" : {
          "description" : "The unit used to measure distances",
          "$ref" : "#/definitions/DistanceUnitEnum"
        },
        "rootUrl" : {
          "type" : "string",
          "description" : "The main URL set in the configuration"
        },
        "country" : {
          "type" : "string",
          "description" : "The ISO 3166-1 alpha-2 country code, as set in the configuration"
        },
        "maxImageWidth" : {
          "type" : "integer",
          "description" : "Maximum width (in pixels) for uploaded images"
        },
        "maxImageHeight" : {
          "type" : "integer",
          "description" : "Maximum height (in pixels) for uploaded images"
        },
        "maxUploadSize" : {
          "type" : "integer",
          "description" : "Maximum size (in bytes) for uploaded files"
        },
        "jpegQuality" : {
          "type" : "integer",
          "description" : "Quality for JPEG image types (higher means better quality)"
        },
        "language" : {
          "description" : "The language set in the configuration",
          "$ref" : "#/definitions/Language"
        },
        "resourceCacheKey" : {
          "type" : "string",
          "description" : "A new key is generated after each server restart"
        },
        "theme" : {
          "description" : "The theme content (i.e the CSS or its components according). \nOnly returned when changed or if the corresponding `themeIf` parameter \nwas not specified.\n\nThe returned theme will be the following according to the UI kind:\n\n* `main`: If there is a logged user then the theme for users\nassociated to the configuration. Otherwise the theme for guests;\n \n* `mobile`: only returned for guest;\n\n* `pay`: The theme defined for the ticket/easy invoice \nconfirmation application interface (it's the same for logged users and \nguest).        \n",
          "$ref" : "#/definitions/ThemeUIElement"
        },
        "header" : {
          "description" : "The header content. Only returned when changed or if the \ncorresponding `headerIf` parameter was not specified. For all cases\nthe content returned will be the same for logged users an for guests.\n\nThe returned header will be the following according to the UI kind:\n\n* `main`: The header configured for the main web interface;\n\n* `mobile`: The header configured for the mobile \napplication. Only returned for guests;\n\n* `pay`: The header defined for the ticket/easy invoice \nconfirmation application interface.\n",
          "$ref" : "#/definitions/UIElementWithContent"
        },
        "footer" : {
          "description" : "The footer content. Only returned when changed or if the \ncorresponding `footerIf` parameter was not specified. For all cases\nthe content returned will be the same for logged users an for guests.\n\nThe returned footer will be the following according to the UI kind:\n\n* `main`: The footer configured for the main web interface;\n\n* `mobile`: The footer configured for the mobile \napplication. Only returned for guests;\n\n* `pay`: The footer defined for the ticket/easy invoice \nconfirmation application interface.\n",
          "$ref" : "#/definitions/UIElementWithContent"
        }
      },
      "description" : "Contains data to display an alternative user interface\n"
    },
    "DataForUserBalancesSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseUserDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "accountTypes" : {
            "type" : "array",
            "description" : "The available account types for the search",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          },
          "query" : {
            "description" : "Default query parameters",
            "$ref" : "#/definitions/UsersWithBalanceQueryFilters"
          }
        }
      } ],
      "description" : "Data used for a user search together with account balances"
    },
    "DataForUserPasswords" : {
      "type" : "object",
      "properties" : {
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        },
        "passwords" : {
          "type" : "array",
          "description" : "The status and possible actions for each password",
          "items" : {
            "$ref" : "#/definitions/PasswordStatusAndActions"
          }
        }
      },
      "description" : "Contains the data used to manage passwords of a user"
    },
    "DatePeriod" : {
      "type" : "object",
      "properties" : {
        "begin" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The period begin date, if any. Generally a period without a begin date\ncan be seen as since all time.\n"
        },
        "end" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The period end date, if any. Generally a period without an end date\ncan be seen as without a limit.\n"
        }
      },
      "description" : "A period comprised of a begin and an end date"
    },
    "DecimalRange" : {
      "type" : "object",
      "properties" : {
        "min" : {
          "type" : "string",
          "format" : "number",
          "description" : "The minimum value"
        },
        "max" : {
          "type" : "string",
          "format" : "number",
          "description" : "The maximum value"
        }
      },
      "description" : "Represents a range of minimum / maximum decimal values (both optional).\nIn general if both values are null the entire range is returned as null.\n"
    },
    "Entity" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The internal entity identifier"
        }
      },
      "description" : "Basic definition of a persistent entity",
      "x-abstract" : true
    },
    "EntityReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object"
      } ],
      "description" : "Represents an entity that is being referenced from another one,\nwithout caring about the type of the referenced entity.\n",
      "x-final" : true
    },
    "Error" : {
      "type" : "object",
      "required" : [ "exceptionType" ],
      "properties" : {
        "kind" : {
          "description" : "Error types associated to the HTTP Status 500 Possible values are:\n* buyVoucher: An error has occurred when buying a voucher \n* forgottenPassword: An error has occurred when changing a forgotten password.\n* general: An unexpected error has occurred\n* initializeNfc: An error has occurred when initializing a NFC token\n* nested: An error which has another internal error at a given property / index\n* nfcAuth: An error has occurred when making an external NFC authentication\n* otp: An error has occurred requesting an OTP\n* payment: An error has occurred when making a payment\n* personalizeNfc: An error has occurred when personalizing a NFC token\n* pos: An error has occurred when receiving a payment on a POS operation\n* redeemVoucher: An error has occurred when redeeming a voucher\n* shoppingCart: An error has occurred when interacting with a shopping cart.\n* shoppingCartCheckout: An error has occurred when checking out a shopping cart.\n",
          "$ref" : "#/definitions/ErrorKind"
        },
        "exceptionType" : {
          "type" : "string",
          "description" : "The server exception class name (not intended to be shown to \nfinal users. Only for logging purposes)\n"
        },
        "exceptionMessage" : {
          "type" : "string",
          "description" : "The server exception message (not intended to be shown to \nfinal users. Only for logging purposes)\n"
        }
      },
      "description" : "An error that happened during the request processing"
    },
    "ExternalPaymentsPermissions" : {
      "type" : "object",
      "properties" : {
        "view" : {
          "type" : "boolean",
          "description" : "Can view external payments?"
        }
      },
      "description" : "Permissions over own external payments"
    },
    "ForbiddenError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "description" : "Error codes for 403 Forbidden HTTP status.  Possible values are:\n* expiredPassword: The password being used has expired\n* illegalAction: Attempt to perform an action that is not allowed on this context\n* inaccessibleChannel: This channel cannot be accessed by the user \n* inaccessiblePrincipal: The used identification method (principal type) cannot be used in this channel\n* indefinitelyBlocked: The password was indefinitely blocked by exceeding the allowed attempts \n* invalidPassword: The password being used is invalid (normally the confirmation password)\n* operatorWithPendingAgreements: The operator cannot access because his owner member has pending agreements\n* pendingAgreements: There is at least one agreement which needs to be accepted in order to access the syste\n* permissionDenied: The operation was denied because a required permission was not granted\n* resetPassword: The password being used was manually reset\n* temporarilyBlocked: The password was temporarily blocked by exceeding the allowed attempts\n",
          "$ref" : "#/definitions/ForbiddenErrorCode"
        },
        "passwordType" : {
          "description" : "The password type of the failed password. Only sent if `code` is one of: - `invalidPassword` - `expiredPassword` - `temporarilyBlocked` - `indefinitelyBlocked`\n",
          "$ref" : "#/definitions/EntityReference"
        }
      },
      "description" : "Error returned when a HTTP status code 403 occurs"
    },
    "ForgottenPasswordError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for a ForgottenPassword error. Possible values are:\n* invalidSecurityAnswer: if the answer for the security question was incorrect.\n* unexpected: An unexpected error has occurred. \n",
            "$ref" : "#/definitions/ForgottenPasswordErrorCode"
          },
          "keyInvalidated" : {
            "type" : "boolean",
            "description" : "Flag indicating if the key received on the forgotten password reset \nrequest was invalidated because the maximum tries was reached.  \nOnly if code is `invalidSecurityAnswer`\n"
          }
        }
      } ],
      "description" : "Error when changing a forgotten password"
    },
    "ForgottenPasswordRequest" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string",
          "description" : "An identification method for the user. Allows the same identification\nmethods (principal types) as the login, plus e-mail.\n"
        },
        "captcha" : {
          "description" : "The captcha response required when something is returned in `DataForLogin.forgotPasswordCaptchaProvider`.",
          "$ref" : "#/definitions/CaptchaResponse"
        }
      },
      "description" : "Definitions to request a forgotten password reset"
    },
    "FullProfileEdit" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "description" : "The basic fields. If null, the fields are not modified",
          "$ref" : "#/definitions/UserEdit"
        },
        "createLandLinePhones" : {
          "type" : "array",
          "description" : "Land-line phones to be created. If not sent / empty, no land-line\nphones are created.\n",
          "items" : {
            "$ref" : "#/definitions/PhoneNew"
          }
        },
        "createMobilePhones" : {
          "type" : "array",
          "description" : "Mobile phones to be created. If not sent / empty, no mobile\nphones are created.\n",
          "items" : {
            "$ref" : "#/definitions/PhoneNew"
          }
        },
        "modifyLandLinePhones" : {
          "type" : "array",
          "description" : "Land-line phones to be modified. If not sent / empty, no\nland-line phones are modified\n",
          "items" : {
            "$ref" : "#/definitions/PhoneEditWithId"
          }
        },
        "modifyMobilePhones" : {
          "type" : "array",
          "description" : "Mobile phones to be modified. If not sent / empty, no mobile\nphones are modified.\n",
          "items" : {
            "$ref" : "#/definitions/PhoneEditWithId"
          }
        },
        "removePhones" : {
          "type" : "array",
          "description" : "Phones (both land-line and mobile) to be removed. If not sent /\nempty, no phones are removed.\n",
          "items" : {
            "type" : "string"
          }
        },
        "createAddresses" : {
          "type" : "array",
          "description" : "Addresses to be created. If not sent / empty, no \naddresses are created.\n",
          "items" : {
            "$ref" : "#/definitions/AddressNew"
          }
        },
        "modifyAddresses" : {
          "type" : "array",
          "description" : "Addresses to be modified. If not sent / empty, no \naddresses are modified.\n",
          "items" : {
            "$ref" : "#/definitions/AddressEditWithId"
          }
        },
        "removeAddresses" : {
          "type" : "array",
          "description" : "Addresses to be removed. If not sent /\nempty, no addresses are removed.\n",
          "items" : {
            "type" : "string"
          }
        },
        "createContactInfos" : {
          "type" : "array",
          "description" : "Additional contacts to be created. If not sent / empty,\nno additional contacts are created.\n",
          "items" : {
            "$ref" : "#/definitions/ContactInfoNew"
          }
        },
        "modifyContactInfos" : {
          "type" : "array",
          "description" : "Additional contacts to be modified. If not sent / empty, no \nadditional contacts are modified.\n",
          "items" : {
            "$ref" : "#/definitions/ContactInfoEditWithId"
          }
        },
        "removeContactInfos" : {
          "type" : "array",
          "description" : "Additional contacts to be removed. If not sent /\nempty, no additional contacts are removed.\n",
          "items" : {
            "type" : "string"
          }
        },
        "addImages" : {
          "type" : "array",
          "description" : "Identifiers of previously uploaded temporary images to be added\nas profile images. If not sent / empty, no images are added.\n",
          "items" : {
            "type" : "string"
          }
        },
        "removeImages" : {
          "type" : "array",
          "description" : "Identifiers of existing profile images to be removed. If not sent /\nempty, no images are removed.\n",
          "items" : {
            "type" : "string"
          }
        },
        "reorderImages" : {
          "type" : "array",
          "description" : "Identifiers of either existing or added profile images in the\norder they should be listed.\n",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Data sent to the server to edit the full profile at once"
    },
    "FullProfileEditResult" : {
      "type" : "object",
      "properties" : {
        "createdLandLinePhones" : {
          "type" : "array",
          "description" : "Identifiers of created land-line phones",
          "items" : {
            "type" : "string"
          }
        },
        "createdMobilePhones" : {
          "type" : "array",
          "description" : "Identifiers of created mobile phones",
          "items" : {
            "type" : "string"
          }
        },
        "createdAddresses" : {
          "type" : "array",
          "description" : "Identifiers of created addresses",
          "items" : {
            "type" : "string"
          }
        },
        "createdContactInfos" : {
          "type" : "array",
          "description" : "Identifiers of created additional contacts",
          "items" : {
            "type" : "string"
          }
        },
        "createdImages" : {
          "type" : "array",
          "description" : "Identifiers of created profile images",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Result of saving the full profile at once"
    },
    "FullTextQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "keywords" : {
            "type" : "string",
            "description" : "Textual search keywords. Sometimes, like in user search, the fields\nmatched depends on what is configured on the products.\n"
          },
          "profileFields" : {
            "type" : "array",
            "description" : "User profile fields, both basic (full name, login name, phone,\ne-mail, etc) and custom fields, that are used for search. Is a\ncomma-separated array, where each part consists in two parts: the\ninternal name (or custom field id) of the field, and a value, both\nseparated by : (colon). For example,\n`profileFields=field1:value1,field2:value2`. Sometimes multiple\nvalues are accepted. In this case, the multiple values are separated\nby pipes. For example, `profileFields=field1:valueA|valueB`. The\naccepted fields depend on the products the authenticated user has.\nEnumerated fields accept multiple values, while numeric and date\nfields also accept ranges, which are two values, pipe-separated.\nFor example,\n`profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31`\nwould match results whose custom field with internal name 'rank' is\neither bronze or silver, and whose 'birthDate' is between January 1,\n2000 and December 31, 2001. To specify a single bound in ranges\n(like birth dates before December 31, 2001), use a pipe in one of\nthe values, like `profileFields=birthDate:|2001-12-31`.\n\nThe basic profile fields have one of the following identifiers:\n\n* `name` or `fullName`: Full name;\n\n* `username`, `loginName` or `login`: Login name;\n\n* `email`: E-mail;\n\n* `phone`: Phone;\n\n* `accountNumber`, `account`: Account number;\n\n* `image`: Image (accepts a boolean value, indicating that either it\n  is required that users either have images or not).\n\nIf address is an allowed profile field for search, specific address\nfields may be searched. The allowed ones are normally returned as\nthe `addressFieldsInSearch` field in the corresponding result from a\ndata-for-search request. \n\nThe specific address fields are:\n\n* `address`: Searches on any address field (not a specific field);\n\n* `address.address`: Searches on the fields that represent the\n  street address, which are `addressLine1`, \n  `addressLine2`,\n  `street`,\n  `buildingNumber` and\n  `complement`. Note that normally only a\n  subset of them should be enabled in the configuration (either line\n  1 / 2 or street + number + complement);\n\n* `address.zip`: Searches for matching zip (postal) code;\n\n* `address.poBox`: Searches for matching postal box;\n\n* `address.neighborhood`: Searches by neighborhood;\n\n* `address.city`: Searches by city;\n\n* `address.region`: Searches by region (or state);\n\n* `address.country`: Searches by ISO 3166-1 alpha-2 country code.\n\n\nA note for dynamic custom fields: If a script is used to generate\npossible values for search, the list will be returned in the \ncorresponding data, and it is sent as a pipe-separated list of\nvalues (not labels). For example:\n`profileFields=dynamic:a|b|c`. However, it is also possible to\nperform a keywords-like (full-text) search using the dynamic\nvalue label. In this case a single value, prefixed by single\nquotes should be used. For example:\n`profileFields=dynamic:'business`.\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Base definitions for search filters which have keywords and user profile fields\n",
      "x-abstract" : true
    },
    "FullTextWithDistanceQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FullTextQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "double",
            "description" : "The reference latitude for distance searches"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double",
            "description" : "The reference longitude for distance searches"
          },
          "maxDistance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.\n"
          }
        }
      } ],
      "description" : "Base definitions for full-text search filters which also can search\nby distance\n",
      "x-abstract" : true
    },
    "GeneralOperatorsDataForSearch" : {
      "type" : "object",
      "properties" : {
        "userGroups" : {
          "type" : "array",
          "description" : "The groups the authenticated user can use to filter users. Admins\ncan always filter by groups, while users depend on a permission,\nwhich can be to only view group sets, only groups or none.\n",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "query" : {
          "description" : "Default query filters to search operators\n",
          "$ref" : "#/definitions/GeneralOperatorsQueryFilters"
        }
      }
    },
    "GeneralOperatorsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicOperatorQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "userGroups" : {
            "type" : "array",
            "description" : "Either id or internal names of user groups / group sets",
            "items" : {
              "type" : "string"
            }
          },
          "broker" : {
            "type" : "string",
            "description" : "Either id or a principal (login name, e-mail, etc) of the user broker"
          }
        }
      } ],
      "description" : "Definitions for general operators search filters"
    },
    "GeneralRecordsDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseRecordDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "query" : {
            "description" : "Default query filters for searching records\n",
            "$ref" : "#/definitions/GeneralRecordsQueryFilters"
          }
        }
      } ],
      "description" : "Data for searching records of a type, from any user"
    },
    "GeneralRecordsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "brokers" : {
            "type" : "array",
            "description" : "Either the ids or identification methods of record owners' brokers\n",
            "items" : {
              "type" : "string"
            }
          },
          "groups" : {
            "type" : "array",
            "description" : "Either the ids or internal names of record owners' groups\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Query filters for searching records of a type, regardless the user\n"
    },
    "GeographicalCoordinate" : {
      "type" : "object",
      "properties" : {
        "latitude" : {
          "type" : "number",
          "format" : "double",
          "description" : "The latitude"
        },
        "longitude" : {
          "type" : "number",
          "format" : "double",
          "description" : "The longitude"
        }
      },
      "description" : "A geographical coordinate with latitude and longitude"
    },
    "Group" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "The possible kinds of group or group set Possible values are:\n* adminGroup: An administrator group\n* brokerGroup: A broker group\n* groupSet: A group set\n* memberGroup: A member (regular user) group\n",
            "$ref" : "#/definitions/GroupKind"
          },
          "groupSet" : {
            "type" : "string",
            "description" : "The internal name or id of the group set of this group.\nOnly makes sense if is a user or broker group. Administrator\ngroups or group sets cannot have a group set.\n"
          }
        }
      } ],
      "description" : "Contains data of a group\n"
    },
    "GroupForRegistration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description set on the group to be displayed to the user\n"
          }
        }
      } ],
      "description" : "Contains data for a possible group for user registration"
    },
    "HttpRequestData" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string",
          "description" : "The HTTP method"
        },
        "headers" : {
          "type" : "object",
          "description" : "The HTTP request headers",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "parameters" : {
          "type" : "object",
          "description" : "The HTTP request query parameters",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "body" : {
          "type" : "string",
          "description" : "The HTTP request body"
        }
      },
      "description" : "Contains data of an HTTP request"
    },
    "IAddress" : {
      "type" : "object",
      "properties" : {
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the descriptive address\n"
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the descriptive address\n"
        },
        "street" : {
          "type" : "string",
          "description" : "The street name\n"
        },
        "buildingNumber" : {
          "type" : "string",
          "description" : "The numeric identifier for a land parcel, house, building or other\n"
        },
        "complement" : {
          "type" : "string",
          "description" : "The complement (like apartment number)  \n"
        },
        "zip" : {
          "type" : "string",
          "description" : "A zip code that identifies a specific geographic (postal) delivery area\n"
        },
        "poBox" : {
          "type" : "string",
          "description" : "The post-office box, is an uniquely addressable box\n"
        },
        "neighborhood" : {
          "type" : "string",
          "description" : "The neighborhood name \n"
        },
        "city" : {
          "type" : "string",
          "description" : "The city name\n"
        },
        "region" : {
          "type" : "string",
          "description" : "The region or state\n"
        },
        "country" : {
          "type" : "string",
          "description" : "The country, represented as 2-letter, uppercase, ISO 3166-1 code\n"
        },
        "location" : {
          "description" : "The geolocation of the current address",
          "$ref" : "#/definitions/GeographicalCoordinate"
        }
      },
      "description" : "Interface containing the common address properties",
      "x-interface" : true
    },
    "IContactInfo" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "The e-mail for this additional contact information"
        },
        "mobilePhone" : {
          "type" : "string",
          "description" : "The formatted mobile phone for this additional contact information\n"
        },
        "landLinePhone" : {
          "type" : "string",
          "description" : "The formatted landline phone for this additional contact information\n"
        },
        "landLineExtension" : {
          "type" : "string",
          "description" : "The landline phone extension for this additional contact information\n"
        }
      },
      "description" : "Interface containing the common contact info properties",
      "x-interface" : true
    },
    "IPhone" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The phone name"
        },
        "number" : {
          "type" : "string",
          "description" : "The formatted number"
        },
        "extension" : {
          "type" : "string",
          "description" : "The number extension, only for landLine phones, and is only used if the\nphone configuration states that extensions are enabled. \n"
        }
      },
      "description" : "Interface containing the common phone properties",
      "x-interface" : true
    },
    "IPhoneDetailed" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The phone name"
        },
        "number" : {
          "type" : "string",
          "description" : "The formatted number"
        },
        "extension" : {
          "type" : "string",
          "description" : "The number extension, only for landLine phones, and is only used if the\nphone configuration states that extensions are enabled. \n"
        },
        "hidden" : {
          "type" : "boolean",
          "description" : "Indicates whether this phone is hidden for other users (`true`)\nor visible to all users (`false`).\n"
        },
        "enabledForSms" : {
          "type" : "boolean",
          "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile phone is enabled for SMS, both receiving\nnotifications and sending SMS operations. Can only be set if the\nmobile phone is verified.\n"
        },
        "verified" : {
          "type" : "boolean",
          "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile is verified. Can only be directly set by\nadministrators. Regular users need to verify it.\n"
        }
      },
      "description" : "Interface containing additional common phone properties",
      "x-interface" : true,
      "x-implements" : "IPhone"
    },
    "IUser" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The user's full name"
        },
        "username" : {
          "type" : "string",
          "description" : "The user's login name"
        },
        "email" : {
          "type" : "string",
          "description" : "The user's e-mail"
        }
      },
      "description" : "Interface containing the common user properties",
      "x-interface" : true
    },
    "Image" : {
      "allOf" : [ {
        "$ref" : "#/definitions/StoredFile"
      }, {
        "type" : "object",
        "properties" : {
          "width" : {
            "type" : "integer",
            "description" : "The image width, in pixels"
          },
          "height" : {
            "type" : "integer",
            "description" : "The image height, in pixels"
          }
        }
      } ],
      "description" : "Contains data for displaying an image"
    },
    "ImageConfigurationForUserProfile" : {
      "type" : "object",
      "properties" : {
        "manage" : {
          "type" : "boolean",
          "description" : "Can the authenticated user has permission to manage images?\n"
        },
        "availability" : {
          "description" : "The availability for images Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "maxImages" : {
          "type" : "integer",
          "description" : "The maximum allowed number of profile images"
        }
      },
      "description" : "User images data sent when editing the full profile\n"
    },
    "ImageView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Image"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "Determines the kind of an image Possible values are:\n* contactInfo: An image of an additional contact information\n* customFieldValue: An image used as custom field value\n* marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop.\n* marketplaceCategory: An image of an advertisement (simple or webshop)\n* profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.\n* systemCustom: System custom images are additional images an administrator that can be used on rich text contents.\n* temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement).\n* userCustom: User custom images are additional images that can be used on rich text contents.\n* voucherType: An image of a voucher type\n",
            "$ref" : "#/definitions/ImageKind"
          },
          "convertedToJpeg" : {
            "type" : "boolean",
            "description" : "Indicates whether this was originally a PNG format that exceeded the\nmaximum allowed size and was automatically converted to JPEG.\n"
          }
        }
      } ],
      "description" : "Details about an image"
    },
    "ImagesListData" : {
      "type" : "object",
      "properties" : {
        "canManage" : {
          "type" : "boolean",
          "description" : "Does the authenticated user has permission to manage these images?\n"
        },
        "canCreate" : {
          "type" : "boolean",
          "description" : "Does the authenticated user has permission to create a new image?\n"
        },
        "maxImages" : {
          "type" : "integer",
          "description" : "The maximum number of images allowed"
        },
        "availability" : {
          "description" : "The availability for images Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "images" : {
          "type" : "array",
          "description" : "The list of images",
          "items" : {
            "$ref" : "#/definitions/Image"
          }
        }
      },
      "description" : "Contains information for a list of images, such as permissions and\nthe list of images itself\n"
    },
    "IncomingMessage" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The message date"
          },
          "category" : {
            "description" : "The message category, for messages from system",
            "$ref" : "#/definitions/EntityReference"
          },
          "fromUser" : {
            "description" : "The user that sent this message",
            "$ref" : "#/definitions/User"
          },
          "subject" : {
            "type" : "string",
            "description" : "The message subject"
          },
          "body" : {
            "type" : "string",
            "description" : "The message body"
          }
        }
      } ],
      "description" : "An incoming message (in the user's inbox)"
    },
    "InitializeNfcError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseNfcError"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for an initialize NFC error  Possible values are:\n* tokenInUse: The token specified for initialization is already in use (exists and it is active)\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/InitializeNfcErrorCode"
          }
        }
      } ],
      "description" : "Error when initialize a NFC card"
    },
    "InputError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "description" : "Error codes for 422 Unprocessable entity HTTP status. It means there was an error with the input sent to the operation.  Possible values are:\n* aggregated: Represents an aggregation of other input errors\n* dataConversion: Some data conversion has failed. For example, when sending a date with an invalid format\n* fileUploadSize: An uploaded file size exceeds the maximum allowed \n* maxItems: There was an attempt to create an item, but the maximum number of allowed items was exceeded\n* missingParameter: Missing a required request parameter\n* queryParse: A full-text query keywords contained an invalid text\n* validation: One or more of the fields sent contains invalid values\n",
          "$ref" : "#/definitions/InputErrorCode"
        },
        "generalErrors" : {
          "type" : "array",
          "description" : "A list of errors that cannot be attributed to a specific property. Only returned if `code` is `validation`.\n",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "array",
          "description" : "An array of properties which contains errors, in the order they were processed. As `propertyErrors` is an object (without a guaranteed order for its keys) the original order would be lost otherwise. Only returned if `code` is `validation`.\n",
          "items" : {
            "type" : "string"
          }
        },
        "propertyErrors" : {
          "type" : "object",
          "description" : "An object keyed by property name, whose values are lists of errors for that property. Only returned if `code` is `validation`.\n",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "customFields" : {
          "type" : "array",
          "description" : "An array of custom field internal names which contains errors, in the order they were processed. As `propertyErrors` is an object (without a guaranteed order for its keys) the original order would be lost otherwise. Only returned if `code` is `validation`.\n",
          "items" : {
            "type" : "string"
          }
        },
        "customFieldErrors" : {
          "type" : "object",
          "description" : "An object keyed by custom field internal name, whose values are lists of errors for that custom field. Only returned if `code` is `validation`.\n",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "maxItems" : {
          "type" : "integer",
          "description" : "The maximum allowed items. Only returned if `code` is `maxItems`.\n"
        },
        "maxFileSize" : {
          "type" : "integer",
          "description" : "The maximum file size, in bytes, allowed for uploads. Only returned if `code` is `fileUploadSize`.\n"
        },
        "value" : {
          "type" : "string",
          "description" : "The value that failed conversion to the expected data type, or the original full-text query keywords that failed parsing. Only returned if `code` is either `dataConversion` or `queryParse`.\n"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the required request parameter Only returned if `code` is `missingParameter`.\n"
        },
        "errors" : {
          "type" : "object",
          "description" : "The aggregated `InputError`s for each regular property, that is, those that have a single input. Only returned if `code` is `aggregated`.\n",
          "additionalProperties" : {
            "$ref" : "#/definitions/InputError"
          }
        },
        "indexedErrors" : {
          "type" : "object",
          "description" : "The aggregated `InputError`s for each list property, that is, those that have a list of inputs. It is guaranteed that the indexes in the input array correspond to the indexes in the corresponding value. The positions with no errors will contain `null`. Only returned if `code` is `aggregated`.\n",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/InputError"
            }
          }
        }
      },
      "description" : "Error returned when some input data failed validation"
    },
    "InternalNamedEntity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "internalName" : {
            "type" : "string",
            "description" : "The entity internal name, which can be seen as an extra identifier\n"
          }
        }
      } ],
      "description" : "Basic definition of a persistent entity which has both a\nname and an internal name\n",
      "x-abstract" : true
    },
    "InternalTransactionPreview" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TransactionPreview"
      }, {
        "type" : "object",
        "properties" : {
          "pendingAuthorization" : {
            "type" : "boolean",
            "description" : "Indicates whether the transaction would be initially pending\nauthorization in order to be processed\n"
          },
          "toAccount" : {
            "description" : "A reference to the destination account",
            "$ref" : "#/definitions/AccountWithOwner"
          }
        }
      } ],
      "description" : "Base definitions for a preview before performing an internal transaction\n"
    },
    "Language" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VersionedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The ISO 639-1 language code"
          }
        }
      } ],
      "description" : "Reference to a language in Cyclos"
    },
    "LoginUser" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string",
          "description" : "The user identification for login. The accepted kind of identification\n(login name, e-mail, etc) depend on the channel configuration.\n"
        },
        "password" : {
          "type" : "string",
          "description" : "The user password. The password type is set in the channel configuration.\n"
        },
        "remoteAddress" : {
          "type" : "string",
          "description" : "The IP address of the user requesting the login.\n"
        },
        "channel" : {
          "type" : "string",
          "description" : "The channel internal name. Defaults to `main`.\n"
        },
        "sessionTimeout" : {
          "description" : "The amount of time the session is valid. The channel configuration has the\nsession timeout, which is the maximum amount of time that can be set.\nIf the given value is higher than the one in the configuration, it will be\nignored. Defaults to the timeout set in the configuration. \n",
          "$ref" : "#/definitions/TimeInterval"
        }
      },
      "description" : "Contains fields to login an user as administrator\n"
    },
    "MapData" : {
      "type" : "object",
      "properties" : {
        "googleMapsApiKey" : {
          "type" : "string",
          "description" : "The Google Maps API key to be used by clients    \n"
        },
        "defaultLocation" : {
          "description" : "The default location, if any, for map displays    \n",
          "$ref" : "#/definitions/GeographicalCoordinate"
        },
        "defaultZoomMobile" : {
          "type" : "integer",
          "description" : "The default zoom level for mobile views    \n"
        },
        "defaultZoom" : {
          "type" : "integer",
          "description" : "The default zoom level for larger views    \n"
        },
        "distanceUnit" : {
          "description" : "Determines the unit used to measure distances\n",
          "$ref" : "#/definitions/DistanceUnitEnum"
        }
      },
      "description" : "Contains data relative to maps displayed in the application\n"
    },
    "MarketplacePermissions" : {
      "type" : "object",
      "properties" : {
        "search" : {
          "type" : "boolean",
          "description" : "Can search for simple and webshop advertisements?"
        },
        "ownAdvertisements" : {
          "type" : "boolean",
          "description" : "Can own simple advertisements?\nOnly returned if there is an authenticated user.\n"
        },
        "manageOwnAdvertisements" : {
          "type" : "boolean",
          "description" : "Can manage own simple advertisements?\nOnly returned if there is an authenticated user.\n"
        },
        "purchase" : {
          "type" : "boolean",
          "description" : "Can buy webwop ads?\nOnly returned if there is an authenticated user.\n"
        },
        "viewAdvertisements" : {
          "type" : "boolean",
          "description" : "Can view simple advertisements?\nOnly returned if there is an authenticated user.\n"
        },
        "viewWebshop" : {
          "type" : "boolean",
          "description" : "Can view webshop advertisements?\nIf this permission is granted then the user can can buy webshop ads too.\nOnly returned if there is an authenticated user.\n"
        }
      },
      "description" : "Permissions for the marketplace"
    },
    "MobileBaseData" : {
      "type" : "object",
      "properties" : {
        "cyclosVersion" : {
          "type" : "string",
          "description" : "The version of the Cyclos server"
        },
        "currentClientTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The current client time according to the server"
        },
        "numberFormat" : {
          "description" : "The format for numbers Possible values are:\n* commaAsDecimal: 9.999,99\n* periodAsDecimal: 9,999.99\n",
          "$ref" : "#/definitions/NumberFormatEnum"
        },
        "dateFormat" : {
          "description" : "The format for dates Possible values are:\n* dmyDash: DD-MM-YYYY\n* dmyPeriod: DD.MM.YYYY\n* dmySlash: DD/MM/YYYY\n* mdyDash: MM-DD-YYYY\n* mdyPeriod: MM.DD.YYYY\n* mdySlash: MM/DD/YYYY\n* ymdDash: YYYY-MM-DD\n* ymdPeriod: YYYY.MM.DD\n* ymdSlash: YYYY/MM/DD\n",
          "$ref" : "#/definitions/DateFormatEnum"
        },
        "timeFormat" : {
          "description" : "The format for times Possible values are:\n* h12: 12-hour with AM/PM indicator\n* h24: 24-hour\n",
          "$ref" : "#/definitions/TimeFormatEnum"
        },
        "locale" : {
          "type" : "string",
          "description" : "The current locale"
        },
        "rootUrl" : {
          "type" : "string",
          "description" : "The main URL set in the configuration"
        },
        "theme" : {
          "description" : "The mobile theme. Only returned when changed.",
          "$ref" : "#/definitions/ThemeUIElement"
        },
        "translations" : {
          "description" : "The mobile translations. Only returned when changed.",
          "$ref" : "#/definitions/MobileTranslations"
        },
        "maxImageWidth" : {
          "type" : "integer",
          "description" : "Maximum width (in pixels) for uploaded images"
        },
        "maxImageHeight" : {
          "type" : "integer",
          "description" : "Maximum height (in pixels) for uploaded images"
        },
        "maxUploadSize" : {
          "type" : "integer",
          "description" : "Maximum size (in bytes) for uploaded files"
        },
        "jpegQuality" : {
          "type" : "integer",
          "description" : "Quality for JPEG image types (higher means better quality)"
        }
      },
      "description" : "Contains basic definitions for the data for UI results for the mobile  \n"
    },
    "MobilePage" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          },
          "icon" : {
            "type" : "string",
            "description" : "The character that represents the icon in the Cyclos font"
          }
        }
      } ],
      "description" : "Represents a content page for the mobile application"
    },
    "MobileTranslations" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VersionedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "locale" : {
            "type" : "string",
            "description" : "The locale represented by this language, in either of the following formats: `<2-letter lowercase language code>` or `<2-letter lowercase language code>`_`<2-letter uppercase country code>`.\n"
          },
          "translations" : {
            "type" : "object",
            "description" : "The translation keys / values for the mobile application",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "countries" : {
            "type" : "array",
            "description" : "The list of countries, with translated display names. Whenever the\ntranslations are returned, the country list is returned as well. \n",
            "items" : {
              "$ref" : "#/definitions/Country"
            }
          }
        }
      } ],
      "description" : "Contains definitions for translations that are returned for the mobile app\n"
    },
    "NamedEntity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The entity name"
          }
        }
      } ],
      "description" : "Basic definition of a persistent entity which has a name",
      "x-abstract" : true
    },
    "NestedError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "inputError" : {
            "description" : "The nested error when `InputError`",
            "$ref" : "#/definitions/InputError"
          },
          "forbiddenError" : {
            "description" : "The nested error when `ForbiddenError`",
            "$ref" : "#/definitions/ForbiddenError"
          },
          "unauthorizedError" : {
            "description" : "The nested error when `UnauthorizedError`",
            "$ref" : "#/definitions/UnauthorizedError"
          },
          "notFoundError" : {
            "description" : "The nested error when `NotFoundError`",
            "$ref" : "#/definitions/NotFoundError"
          },
          "conflictError" : {
            "description" : "The nested error when `ConflictError`",
            "$ref" : "#/definitions/ConflictError"
          },
          "error" : {
            "description" : "The nested error when `Error`",
            "$ref" : "#/definitions/Error"
          },
          "property" : {
            "type" : "string",
            "description" : "The property name that generated the error"
          },
          "index" : {
            "type" : "integer",
            "description" : "If the property is indexed, contains the index with error           \n"
          }
        }
      } ],
      "description" : "Error when an operation may generate another error for a specific property.\nAn example of this is when saving the full profile, which can have an\nerror in the basic fields, or in the n-th new land-line phone, or in the\nn-th removed image. \n"
    },
    "NewMessagePush" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "The message details",
          "$ref" : "#/definitions/IncomingMessage"
        },
        "newMessages" : {
          "type" : "integer",
          "description" : "The number of new messages since the last login"
        },
        "unreadMessages" : {
          "type" : "integer",
          "description" : "The current number of unread messages"
        }
      },
      "description" : "A new message has been received"
    },
    "NewNotificationPush" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NotificationsStatus"
      }, {
        "type" : "object",
        "properties" : {
          "notification" : {
            "description" : "The notification details",
            "$ref" : "#/definitions/Notification"
          }
        }
      } ],
      "description" : "A new notification has been received"
    },
    "NfcAuthError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for an NFC authentication error  Possible values are:\n* pos: A POS exception has happened when trying to make an external authenticate. See the `posError` field for more details.  \n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/NfcAuthErrorCode"
          },
          "posError" : {
            "description" : "The POS error details. Only if `code` is `pos`          \n",
            "$ref" : "#/definitions/PosError"
          }
        }
      } ],
      "description" : "Error when make a NFC external authentication"
    },
    "NfcDataForInitialize" : {
      "type" : "object",
      "properties" : {
        "initilizeTypes" : {
          "type" : "array",
          "description" : "The NFC token types the authenticated user can initialize tags\n",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "personalizeTypes" : {
          "type" : "array",
          "description" : "The NFC token types the authenticated user can parsonalize tags\n",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        }
      },
      "description" : "Contains data NFC tag initialization and personalization\n"
    },
    "NfcDataForPersonalize" : {
      "type" : "object",
      "properties" : {
        "tokenType" : {
          "description" : "The token type reference",
          "$ref" : "#/definitions/EntityReference"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        }
      },
      "description" : "Contains data NFC tag personalization\n"
    },
    "NfcExternalAuthenticateParameter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NfcTokenParameter"
      }, {
        "type" : "object",
        "properties" : {
          "key" : {
            "description" : "The NFC key over which the authentication is performed. Defaults to `operational`.         Possible values are:\n* appMaster: The application master key. Not used for now (it could be used for application management).\n* operational: A key stored within the application that is used to guarantee the presence of the card in sensitive operations, such as receive payment (POS) or personalize the tag\n* piccMaster: The PICC master key, used to format the tag\n",
            "$ref" : "#/definitions/NfcTagKeyEnum"
          },
          "tagChallenge" : {
            "type" : "string",
            "description" : "The challenge generated by the NFC tag, encoded as hex"
          },
          "user" : {
            "type" : "string",
            "description" : "If informed then it means we are requesting for external authentication \nto personalize a tag for that user, also the `group` property will be \nignored.\n"
          },
          "group" : {
            "type" : "string",
            "description" : "In case of registering a user and personalizing a tag at the same time we need to inform the group in which the user is registering."
          },
          "asMember" : {
            "type" : "boolean",
            "description" : "Only valid if the logged user is a broker, for that case we need to \ndistinguish if the user registration is as member or as broker. \nThis option must be specified in conjunction with the `group` property.\n"
          }
        }
      } ],
      "description" : "Parameters for an external authentication\n"
    },
    "NfcExternalAuthenticateResult" : {
      "type" : "object",
      "properties" : {
        "cyclosChallenge" : {
          "type" : "string",
          "description" : "The Cyclos-generated challenge encoded as hex. This challenge has\nto be encrypted by the NFC tag\n"
        },
        "sessionKey" : {
          "type" : "string",
          "description" : "The session key to be used on subsequent NFC operations, encoded as hex\n"
        }
      },
      "description" : "Result for a NFC external authenticate\n"
    },
    "NfcInitializeParameter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NfcTokenWithUserParameter"
      }, {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "A label to be displayed on the tokens list."
          }
        }
      } ],
      "description" : "Parameters for initializing an NFC tag\n"
    },
    "NfcInitializeResult" : {
      "type" : "object",
      "properties" : {
        "tagKey" : {
          "type" : "string",
          "description" : "The PICC Master Key that should be used to seal the NFC tag,\nencoded as hex.\n"
        },
        "applicationKey" : {
          "type" : "string",
          "description" : "The Application Master Key that should be used on the application\nentry of the NFC tag, encoded as hex.\n"
        },
        "operationalKey" : {
          "type" : "string",
          "description" : "The Application Key used to operate with the tag, encoded as hex.\nUsed when making a payment or to assign an already initialized tag to a user.\n"
        },
        "tokenLabel" : {
          "type" : "string",
          "description" : "The same label given by the client at initialization or the label\ngenerated according the the pattern defined.\n"
        }
      },
      "description" : "Contains the keys that should be stored on the NFC tag\n"
    },
    "NfcPersonalizeOtpParameter" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string",
          "description" : "a user to whom this tag is being personalized \n"
        },
        "type" : {
          "type" : "string",
          "description" : "Either the identifier or internal name of fhe NFC token type"
        }
      },
      "description" : "Parameters for requesting an OTP (One Time Password) when personalizing\nan NFC tag.\n"
    },
    "NfcPersonalizeParameter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NfcTokenWithUserParameter"
      }, {
        "type" : "object",
        "properties" : {
          "cyclosChallenge" : {
            "type" : "string",
            "description" : "The challenge that was previously generated by Cyclos, encrypted\nby the NFC tag. Encoded as hex.\n"
          }
        }
      } ],
      "description" : "Parameters for personalizing an NFC tag\n"
    },
    "NfcTokenParameter" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Either the identifier or internal name of fhe NFC token type"
        },
        "token" : {
          "type" : "string",
          "description" : "The token value. Is normally the internal tag idenfifier, encoded\nas hex  \n"
        }
      },
      "description" : "Definitions for parameters of actions over NFC tokens\n"
    },
    "NfcTokenPermissions" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The token type",
          "$ref" : "#/definitions/EntityReference"
        },
        "initialize" : {
          "type" : "boolean",
          "description" : "Can initialize tokens of this type?"
        },
        "personalize" : {
          "type" : "boolean",
          "description" : "Can personalize tokens of this type?"
        },
        "personalizeAsMember" : {
          "type" : "boolean",
          "description" : "Can personalize tokens of this type as member?\nOnly send if the authenticated user is a broker. \n"
        }
      },
      "description" : "Permissions over a specific nfc token"
    },
    "NfcTokenWithChallengeParameter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NfcTokenParameter"
      }, {
        "type" : "object",
        "properties" : {
          "cyclosChallenge" : {
            "type" : "string",
            "description" : "The challenge that was previously generated by Cyclos, encrypted\nby the NFC tag. Encoded as hex.\n"
          }
        }
      } ],
      "description" : "Parameters for personalizing an NFC tag for a new user\n"
    },
    "NfcTokenWithUserParameter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NfcTokenParameter"
      }, {
        "type" : "object",
        "properties" : {
          "user" : {
            "type" : "string",
            "description" : "a user to whom this tag is being initialized/personalized.\n"
          }
        }
      } ],
      "description" : "Contains shared properties by NfcInitializeParameter and NfcPersonalizeParameter\n"
    },
    "NotFoundError" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "description" : "The name of the entity being attempted, but not found"
        },
        "key" : {
          "type" : "string",
          "description" : "The identifier used to attempt to find the entity,\nsuch as id, internal name, principal, etc  \n"
        }
      },
      "description" : "Error returned when some expected data was not found"
    },
    "Notification" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The notification date"
          },
          "relatedUser" : {
            "description" : "a user related to this message",
            "$ref" : "#/definitions/User"
          },
          "subject" : {
            "type" : "string",
            "description" : "The notification subject"
          },
          "message" : {
            "type" : "string",
            "description" : "The notification message"
          },
          "type" : {
            "description" : "The different notification types generated for for users / administrators. Possible values are:\n* adAuthorized: A notification generated if a notification created when an advertisement is authorized.\n* adExpired: A notification generated if a notification created when an advertisement expires.\n* adInterestNotification: A notification generated if a notification created by a new advertisement (Simple or Webshop).\n* adPendingAuthorization: A notification generated if an ad is pending by broker authorization.\n* adPendingByAdminAuthorization: An admin notification generated if an advertisement is pending for authorization.\n* adQuestionAnswered: A notification generated if a question answered to some AD (Simple or Webshop).\n* adQuestionCreated: A notification generated if a question created to some AD (Simple or Webshop).\n* adRejected: A notification generated if a notification created when an advertisement authorization is rejected.\n* allNonSmsPerformedPayments: A notification generated if a user performed a new payment through a channel that is not the SMS channel.\n* applicationError: An admin notification generated if an application error has occurred.\n* articleOutOfStock: A notification generated if a webshop product is out of stock.\n* authorizedPaymentCanceled: A notification generated if the authorization of a payment was canceled. This notification is to be sent to the payer.\n* authorizedPaymentDenied: A notification generated if a the authorization of a payment was denied. This notification is to be sent to the payer.\n* authorizedPaymentSucceeded: A notification generated if the authorization of a payment succeeded (the payment went successfully through its final authorization and is now processed). This notification is to be sent to the payer.\n* boughtVouchersAboutToExpire: A notification generated if a one or more bought vouchers are about to expire.\n* boughtVouchersExpirationDateChanged: A notification generated if a bought voucher has new expiration date.\n* boughtVouchersExpired: A notification generated if one or more bought vouchers have expired.\n* brokerAssigned: A notification generated if a broker has been assigned to a user.\n* brokerUnassigned: A notification generated if a broker has been unassigned from a user.\n* externalPaymentExpired: A notification generated if the external payment has reached the expiration date.\n* externalPaymentPerformedFailed: A notification generated if the performed external payment has failed processing.\n* externalPaymentReceivedFailed: A notification generated if the received external payment has failed processing.\n* externalUserPaymentExpired: An admin notification generated if an external payment has expired.\n* externalUserPaymentPerformedFailed: An admin notification generated if an external payment failed processing.\n* feedbackChanged: A notification generated if a transaction feedback was modified.\n* feedbackCreated: A notification generated if a transaction feedback was created.\n* feedbackExpirationReminder: A notification generated if a transaction feedback is about to expire.\n* feedbackOptional: A notification generated if a performed payment can have an optional feedback.\n* feedbackReplyCreated: A notification generated if a transaction feedback was replied.\n* feedbackRequired: A notification generated if a performed payment needs to be given a feedback.\n* generatedVouchersAboutToExpire: An admin notification generated if a voucher will expire in a few days.\n* generatedVouchersExpired: An admin notification generated if a voucher has expired.\n* incomingRecurringPaymentCanceled: A notification generated if a recurring payment to a user has been canceled (only if the recurring payment is shown to receiver).\n* incomingRecurringPaymentFailed: A notification generated if a recurring payment to a user has failed (only if the recurring payment is shown to receiver).\n* incomingRecurringPaymentReceived: A notification generated if a recurring payment to a user was received (only if the recurring payment is shown to receiver).\n* incomingScheduledPaymentCanceled: A notification generated if a scheduled payment to a user has been canceled (only if the scheduled payment is shown to receiver).\n* incomingScheduledPaymentFailed: A notification generated if a scheduled payment to a user has failed (only if the scheduled payment is shown to receiver).\n* incomingScheduledPaymentReceived: A notification generated if a scheduled payment to a user was received (only if the scheduled payment is shown to receiver).\n* limitChange: A notification generated if a limit (lower/upper) has changed on an account.\n* lowStockQuantity: A notification generated if a product with stock quantity under limit.\n* maxSmsPerMonthReached: A notification generated if the maximum number of SMS messages per month has been reached.\n* memberAssigned: A notification generated if an user has been assigned to a broker.\n* memberUnassigned: A notification generated if an user has been unassigned from a broker.\n* networkCreated: An admin notification generated if a network is created.\n* newToken: A notification generated if a token / card has been created.\n* newTokenPendingActivation: A notification generated if a token / card has been created, but needs to be activated before being used.\n* operatorAuthorizedPaymentApprovedStillPending: A notification generated if a payment performed by an operator with auhorization type `operator` was approved, but there is at least one authorization level.\n* operatorAuthorizedPaymentCanceled: A notification generated if a payment performed by an operator with authorization type `operator` was canceled.\n* operatorAuthorizedPaymentDenied: A notification generated if a payment performed by an operator with authorization type `operator` was denied.\n* operatorAuthorizedPaymentSucceeded: A notification generated if a payment performed by an operator with authorization type `operator` was approved and there was no further authorization.\n* operatorPaymentAwaitingAuthorization: A notification generated if a payment performed by an operator with authorization type `operator` is pending by authorization.\n* orderCanceledBuyer: A notification generated if a pending order has been canceled.\n* orderCanceledSeller: A notification generated if a pending order has been canceled.\n* orderCreated: A notification generated if a new web shop order created from a shopping cart checkout.\n* orderPaymentCanceledBuyer: A notification generated if an order payment was canceled by authorizer.\n* orderPaymentCanceledSeller: A notification generated if an order payment was canceled by authorizer.\n* orderPaymentDeniedBuyer: A notification generated if an order payment was denied by authorizer.\n* orderPaymentDeniedSeller: A notification generated if an order payment was denied by authorizer.\n* orderPendingAuthorizationBuyer: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.\n* orderPendingAuthorizationSeller: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.\n* orderPendingBuyer: A notification generated if an order pending buyer approval.\n* orderPendingDeliveryDataBuyer: A notification generated if an order buyer needs to fill in the delivery data.\n* orderPendingDeliveryDataSeller: A notification generated if an order seller needs to fill in the delivery data.\n* orderRealizedBuyer: A notification generated if an order accepted by buyer (sent to seller).\n* orderRealizedSeller: A notification generated if an order accepted by seller (sent to buyer).\n* orderRejectedByBuyer: A notification generated if an order rejected by buyer.\n* orderRejectedBySeller: A notification generated if an order rejected by seller.\n* passwordStatusChanged: A notification generated if a password status has changed.\n* paymentAwaitingAdminAuthorization: An admin notification generated if a payment is awaiting for authorization.\n* paymentAwaitingAuthorization: A notification generated if a user must authorize a pending payment.\n* paymentPerformed: An admin notification generated if a payment is performed.\n* paymentReceived: A notification generated if a user received a new payment.\n* paymentRequestCanceled: A notification generated if a payment request was canceled.\n* paymentRequestDenied: A notification generated if a payment request was denied.\n* paymentRequestExpirationDateChanged: A notification generated if the payment request's expiration date has changed.\n* paymentRequestExpired: A notification generated if a payment request has expired.\n* paymentRequestProcessed: A notification generated if a payment request was processed.\n* paymentRequestReceived: A notification generated if a payment request was received.\n* recurringPaymentFailed: A notification generated if a recurring payment from a user has failed (probably because of lack of funds).\n* recurringPaymentOccurrenceProcessed: A notification generated if an occurrence of an outgoing recurring payment was processed.\n* referenceChanged: A notification generated if a reference was modified.\n* referenceCreated: A notification generated if a reference has been set.\n* salePendingBuyer: A notification generated if a sale pending buyer approval.\n* saleRealizedBuyer: A notification generated if a sale accepted by buyer (sent to seller).\n* saleRejectedSeller: A notification generated if a sale rejected by seller.\n* scheduledPaymentFailed: A notification generated if a scheduled payment from a user has failed (probably because of lack of funds).\n* scheduledPaymentInstallmentProcessed: A notification generated if a scheduled payment to a user has been processed.\n* scheduledPaymentRequestFailed: A notification generated if a payment request which was scheduled has failed processing (probably because of lack of funds), and is being reopened.\n* smsPerformedPayment: A notification generated if a user performed a new payment through SMS.\n* systemAlert: An admin notification generated if a system alert as occurred.\n* ticketWebhookFailed: A notification generated if the invocation of a webhook after (a successful) ticket approval has failed.\n* tokenStatusChanged: A notification generated if a token / card status has changed.\n* userAlert: An admin notification generated if a member alert as occurred.\n* userImport: An admin notification generated if a user import has been done.\n* userRegistration: An admin notification generated if a new user has been registered.\n* userStatusChanged: A notification generated if a user status has changed.\n* voucherBuyingAboutToExpire: An admin notification generated if a voucher type allowing buy is about to expire.\n",
            "$ref" : "#/definitions/NotificationTypeEnum"
          },
          "entityType" : {
            "description" : "The type of the entity referenced by the notification, if any. Possible values are:\n* adQuestion: The entity is an advertisement question\n* errorLog: The entity is an error log\n* feedback: The entity is a transaction feedback\n* installment: The entity is a scheduled payment installment\n* marketplace: The entity is a `simple` or `webshop` advertisement \n* network: The entity is a network\n* occurrence: The entity is a failed occurrence of a recurring payment\n* order: The entity is an order\n* passwordType: The entity is a password type\n* reference: The entity is an user reference\n* systemAlert: The entity is a system alert\n* token: The entity is a token (user identification)\n* transaction: The entity is a transaction\n* transfer: The entity is a transfer\n* user: The entity is an user\n* userAlert: The entity is an user alert\n* userImportedFile: The entity is an user imported file\n* voucher: The entity is a voucher\n* voucherType: The entity is a voucher type\n",
            "$ref" : "#/definitions/NotificationEntityTypeEnum"
          },
          "read" : {
            "type" : "boolean",
            "description" : "Indicates whether the notification was marked as already read or not"
          },
          "location" : {
            "type" : "string",
            "description" : "(Deprecated) The standard location to which the notification points to",
            "x-deprecated" : "Use `entityType` instead.",
            "x-remove-version" : 4.13
          },
          "entityId" : {
            "type" : "string",
            "description" : "The identifier of the entity referenced by the notification, if any.\nThe `entityType` and `entityId` attributes are both not null or both null in case there is a referenced entity. \n"
          }
        }
      } ],
      "description" : "A received notification"
    },
    "NotificationQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "onlyUnread" : {
            "type" : "boolean",
            "description" : "Boolean value indicating wether return only the unread notifications\n"
          },
          "onlyNew" : {
            "type" : "boolean",
            "description" : "Boolean value indicating wether return only the new notifications received after the last view date tracked using `POST /notifications/viewed` \n"
          }
        }
      } ],
      "description" : "Definitions for a notifications search.\n"
    },
    "NotificationsPermissions" : {
      "type" : "object",
      "properties" : {
        "enable" : {
          "type" : "boolean",
          "description" : "Whether the own notifications are enabled or not."
        }
      },
      "description" : "Permissions over notifications"
    },
    "NotificationsStatus" : {
      "type" : "object",
      "properties" : {
        "newNotifications" : {
          "type" : "integer",
          "description" : "Indicates the number of received notifications after the last view date (i.e `lastViewDate`)."
        },
        "unreadNotifications" : {
          "type" : "integer",
          "description" : "Indicates the total number of unread notifications."
        },
        "lastViewDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The last view date tracked by the server through `POST /notifications/viewed`"
        }
      },
      "description" : "Contains details about the notifications"
    },
    "Operation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "scope" : {
            "description" : "The scope determines where does a custom operation can be executed Possible values are:\n* advertisement: A custom operation which is executed over an advertisement\n* bulkAction: A custom operation executed over a set of users (one at a time)\n* contact: A custom operation which is executed over a contact in a user's contact list\n* contactInfo: A custom operation which is executed over an additional contact information, which is part of the user profile\n* internal: A custom operation which is executed by another custom operation\n* menu: A custom operation which is visible in a custom menu item\n* record: A custom operation which is executed over a record\n* system: A general, system custom operation\n* transfer: A custom operation which is executed over a transfer\n* user: A custom operation over a single user\n",
            "$ref" : "#/definitions/OperationScopeEnum"
          },
          "resultType" : {
            "description" : "The kind of data a custom operation execution is expected to return Possible values are:\n* externalRedirect: The main execution returns an URL for another service. Then a second execution is expected when this other service redirects the client back to Cyclos\n* fileDownload: Returns a file, which can be downloaded\n* notification: Returns a text to be displayed as a simple notification\n* plainText: Returns a plain text to be displayed in a page, and optionally printed\n* resultPage: Returns a page or list of results, which should be displayed in a table like any other search / list\n* richText: Returns an HTML formatted text to be displayed in a page, and optionally printed\n* url: The result should be an URL to which the client should be redirected to\n",
            "$ref" : "#/definitions/OperationResultTypeEnum"
          },
          "icon" : {
            "type" : "string",
            "description" : "The character that represents the icon in the Cyclos font"
          },
          "label" : {
            "type" : "string",
            "description" : "A representative label about the operation"
          },
          "informationText" : {
            "type" : "string",
            "description" : "A message to be displayed to the user when displaying the\nparameters form\n"
          },
          "confirmationText" : {
            "type" : "string",
            "description" : "A message to be shown to the user in order to confirm the\noperation execution\n"
          },
          "requireConfirmationPassword" : {
            "type" : "boolean",
            "description" : "Indicates whether this operation requires confirmation password\n"
          },
          "hasFileUpload" : {
            "type" : "boolean",
            "description" : "Indicates whether this operation accepts a file upload as input\n"
          },
          "allowExport" : {
            "type" : "boolean",
            "description" : "Does this operation allows exporting the results as CSV? Only returned if `resultType` is `resultPage`\n"
          },
          "allowPrint" : {
            "type" : "boolean",
            "description" : "Does this operation allows printing the results as PDF? Only returned if `resultType` is `resultPage`\n"
          },
          "missingOptionalParameters" : {
            "type" : "array",
            "description" : "The optional custom fields without a value.\nThe front-end could opt-in to rely on the `showFormForMissingOptionalParameters` flag to wether show or not \nan input form\n",
            "items" : {
              "type" : "string"
            }
          },
          "missingRequiredParameters" : {
            "type" : "array",
            "description" : "The required custom fields without a value. \nThis means the operation will fail with a validation error if the parameters present in this list are not \ngiven when run it\n",
            "items" : {
              "type" : "string"
            }
          },
          "showFormForMissingOptionalParameters" : {
            "type" : "boolean",
            "description" : "Indicates whether a form to enter the missing optional parameters must be shown. Only returned if the `missingOptionalParameters` list is not empty and `scope` is  `internal`\n"
          },
          "canRunDirectly" : {
            "type" : "boolean",
            "description" : "(Deprecated) Indicates whether this operation can be executed directly, without showing a form page. More specifically, this flag is true if:\n* There are no confirmation text nor informational text\n* File upload is not allowed\n* Confirmation password is not required\n* All required parameters were set\n* All optional parametes were set or, if not, the option to show the form in case of missing parameters is false.\n",
            "x-deprecated" : "Use the other flags instead.  This flag was decomposed in several others to allow better control at the moment of run a custom operation.  For example, if your front-end asks for the confirmation password in a popup instead of in its own page and  the only thing you need to run the operation is that (i.e there are no missing parameters, no file upload, etc)  then you could show the popup to collect the password and then run the custom operation directly in the same  page on which you are.\n",
            "x-remove-version" : 4.13
          }
        }
      } ],
      "description" : "Contains definitions used to run a custom operation\n"
    },
    "OperationDataForRun" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Operation"
      }, {
        "type" : "object",
        "properties" : {
          "resultInformationText" : {
            "type" : "string",
            "description" : "A message to be displayed to the user when displaying the page \nresults.\nOnly returned if `resultType`\nis `resultPage`.\n"
          },
          "customSubmitLabel" : {
            "type" : "string",
            "description" : "A label to be shown on the submit button.\nWhen not returned, a generic 'Submit' should be displayed.\n"
          },
          "formParameters" : {
            "type" : "array",
            "description" : "The custom fields which are used in a form as parameters for the\noperation execution.\n",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDetailed"
            }
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          },
          "rowAction" : {
            "description" : "The action that should be performed when the user clicks a row in the results table Possible values are:\n* location: Navigate to a standard Cyclos location\n* operation: Run an internal custom operation, which is set on the custom operation itself\n* url: Navigate to an arbitrary URL, which is set in the custom operation itself\n",
            "$ref" : "#/definitions/OperationRowActionEnum"
          },
          "searchAutomatically" : {
            "type" : "boolean",
            "description" : "Should the operation be immediately executed by the third party client software when first presenting the form to the user  (when `true`) or only when the user clicks submit (when `false`)? Only returned if `resultType` is `resultPage`.\n"
          },
          "rowLocation" : {
            "type" : "string",
            "description" : "The location to which the client should be redirected when selecting a row in the results table. Only returned if `resultType` is `resultPage` and `rowAction` is `location`.\n"
          },
          "rowOperation" : {
            "description" : "The custom operation that should be executed when clicking a row. Only returned if `resultType` is `resultPage` and `rowAction` is `operation`.\n",
            "$ref" : "#/definitions/Operation"
          },
          "rowUrl" : {
            "type" : "string",
            "description" : "The URL the client should be redirected when clicking a row. Only returned if `resultType` is `resultPage` and `rowAction` is `url`.\n"
          },
          "rowParameters" : {
            "type" : "array",
            "description" : "The names of parameters belonging to each custom operation result that should be passed as parameter to the custom operation or URL which is executed when selecting a row in the table. Only returned if `resultType` is `resultPage`.\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Contains definitions used to run a custom operation\n"
    },
    "OperationPermissions" : {
      "type" : "object",
      "properties" : {
        "operation" : {
          "description" : "The custom operation",
          "$ref" : "#/definitions/Operation"
        },
        "run" : {
          "type" : "boolean",
          "description" : "Can run this operation?"
        }
      },
      "description" : "Permissions over a specific custom operation"
    },
    "OperationsPermissions" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "array",
          "description" : "Permissions over custom operations applied to the authenticated user, with `scope` = `user`.\n",
          "items" : {
            "$ref" : "#/definitions/OperationPermissions"
          }
        },
        "system" : {
          "type" : "array",
          "description" : "Custom operations the authenticated has access, with `scope` = `system`. Only returned for administrators.\n",
          "items" : {
            "$ref" : "#/definitions/OperationPermissions"
          }
        }
      },
      "description" : "Permissions over own or system operations"
    },
    "OrderDataForAcceptByBuyer" : {
      "type" : "object",
      "properties" : {
        "paymentTypes" : {
          "type" : "array",
          "description" : "Contains the allowed payment types.",
          "items" : {
            "$ref" : "#/definitions/TransferType"
          }
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        }
      },
      "description" : "Data used to accept an order by the buyer."
    },
    "OrderDataForSetDeliveryMethod" : {
      "type" : "object",
      "properties" : {
        "currency" : {
          "description" : "The order currency.",
          "$ref" : "#/definitions/Currency"
        },
        "deliveryMethods" : {
          "type" : "array",
          "description" : "List with all delivery methods shared by all products contained in the order. \n",
          "items" : {
            "$ref" : "#/definitions/AdDeliveryMethod"
          }
        }
      },
      "description" : "Data used to to set a delivery method."
    },
    "OrderItem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderItem"
      }, {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "string",
            "format" : "number",
            "description" : "The charged price of the product."
          },
          "totalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The total price for this item, i.e the charged price of the product  multiplied by its corresponding quantity. \n"
          }
        }
      } ],
      "description" : "Data for an order item."
    },
    "OrderQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "relatedUser" : {
            "type" : "string",
            "description" : "Either id or an identification, such as login name, e-mail, etc, for\nthe seller or buyer according whether we are searching for purchases \nor sales. The allowed identification methods are those\nthe authenticated user can use on keywords search.    \n"
          },
          "statuses" : {
            "type" : "array",
            "description" : "The possible statuses for an order Possibles values for each array element are:\n* completed: The order was accepted by the seller and/or buyer and the related payment was done.\n* disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency.\n* draft: The order has been created by the seller, but has not yet been sent to the buyer for approval\n* paymentCanceled: The related payment was not done because was canceled after finish the authorization process.\n* paymentDenied: The related payment was not done because was denied.\n* paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization.\n* pendingBuyer: The order is pending by the buyer's action.\n* pendingSeller: The order is pending by the seller's action.\n* rejectedByBuyer: The order was rejected by the buyer.\n* rejectedBySeller: The order was rejected by the seller.\n",
            "items" : {
              "$ref" : "#/definitions/OrderStatusEnum"
            }
          },
          "number" : {
            "type" : "string",
            "description" : "The generated order number according to the webshop settings."
          },
          "creationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum order creation date.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "sales" : {
            "type" : "boolean",
            "description" : "Are we searching for sales or purchases? If not specified it's assumed purchases (i.e `false`)"
          }
        }
      } ],
      "description" : "Search filters for orders."
    },
    "OrderResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrder"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The possible statuses for an order Possible values are:\n* completed: The order was accepted by the seller and/or buyer and the related payment was done.\n* disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency.\n* draft: The order has been created by the seller, but has not yet been sent to the buyer for approval\n* paymentCanceled: The related payment was not done because was canceled after finish the authorization process.\n* paymentDenied: The related payment was not done because was denied.\n* paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization.\n* pendingBuyer: The order is pending by the buyer's action.\n* pendingSeller: The order is pending by the seller's action.\n* rejectedByBuyer: The order was rejected by the buyer.\n* rejectedBySeller: The order was rejected by the seller.\n",
            "$ref" : "#/definitions/OrderStatusEnum"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The creation date corresponding to the date when the first item of  this order was added to the shopping cart.\n"
          },
          "currency" : {
            "description" : "The currency of the order.",
            "$ref" : "#/definitions/Currency"
          },
          "number" : {
            "type" : "string",
            "description" : "The generated order number according to the webshop settings."
          },
          "totalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The total price of the order, i.e the sum of the total price of all  of its `items` and the delivery method (if any).\n"
          },
          "image" : {
            "description" : "This represents the first image of the first item in the \norder (if any)\n",
            "$ref" : "#/definitions/Image"
          }
        }
      } ],
      "description" : "Data of an order as returned on list."
    },
    "OrderView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/OrderResult"
      }, {
        "type" : "object",
        "properties" : {
          "buyer" : {
            "description" : "The buyer of the order.",
            "$ref" : "#/definitions/User"
          },
          "seller" : {
            "description" : "The seller of the order.",
            "$ref" : "#/definitions/User"
          },
          "deliveryAddress" : {
            "$ref" : "#/definitions/Address"
          },
          "deliveryMethodName" : {
            "type" : "string",
            "description" : "The delivery method name."
          },
          "deliveryPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The delivery method price."
          },
          "deliveryTime" : {
            "$ref" : "#/definitions/TimeInterval"
          },
          "paymentType" : {
            "$ref" : "#/definitions/TransferType"
          },
          "items" : {
            "type" : "array",
            "description" : "The order items",
            "items" : {
              "$ref" : "#/definitions/OrderItem"
            }
          },
          "remarks" : {
            "type" : "string",
            "description" : "The current order remarks (i.e those for check-out, accept  or reject). \n"
          },
          "sale" : {
            "type" : "boolean",
            "description" : "Is it a sale?"
          }
        }
      } ],
      "description" : "Detailed information when viewing an order"
    },
    "OtpError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for an OTP error. Possible values are:\n* errorSendingSms: An error has occurred trying to send the OTP through SMS.\n* unexpected: An unexpected error has occurred. \n",
            "$ref" : "#/definitions/OtpErrorCode"
          },
          "smsStatus" : {
            "description" : "Only if code is `errorSendingSms` Possible values are:\n* gatewayUreachable: Network problem, or gateway server down\n* invalid: The parameters for sending an SMS message were invalid\n* maxMessagesReached: The maximum SMS messages for the user (or guest) have been reached\n* rejected: The gateway has rejected the SMS message\n* success: The SMS message was successfully sent\n* timeout: Timeout while connecting or waiting for a gateway server reply\n* unexpected: An unexpected error has occurred\n",
            "$ref" : "#/definitions/OutboundSmsStatusEnum"
          }
        }
      } ],
      "description" : "Error when requesting a new One-time-Password (OTP)"
    },
    "OwnerRecordPermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordBasePermissions"
      }, {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "The current number of records of this type for this owner"
          },
          "singleRecordId" : {
            "type" : "string",
            "description" : "If this record type layout is single, and the record exists,\ncontains its identifier\n"
          }
        }
      } ],
      "description" : "Permissions over a user record for a given owner"
    },
    "PasswordActions" : {
      "type" : "object",
      "properties" : {
        "change" : {
          "type" : "boolean",
          "description" : "Manually change the password.\n"
        },
        "changeGenerated" : {
          "type" : "boolean",
          "description" : "Manually generate another value for a generated password. Can only be  done for the authenticated user himself.\n"
        },
        "generate" : {
          "type" : "boolean",
          "description" : "Generate the password value for the first time. Can only be done for the authenticated user himself.\n"
        },
        "allowGeneration" : {
          "type" : "boolean",
          "description" : "Granted only for those generated passwords that have a setting to  require administration authorization and have the status  `neverCreated`. Can only be done by administrators with permissions to enable/disable  the password.\n"
        },
        "disable" : {
          "type" : "boolean",
          "description" : "Disables a password, making it unusable until being enabled again.\n"
        },
        "enable" : {
          "type" : "boolean",
          "description" : "Enables a disabled password, either manually disabled or by exceeding the wrong tries, depending on the password type configuration.\n"
        },
        "resetGenerated" : {
          "type" : "boolean",
          "description" : "Resets a generated password, making it go back to the  `pending` state. The user will then be able to generate a new value for it.\n"
        },
        "resetAndSend" : {
          "type" : "boolean",
          "description" : "Resets a manual password to a generated value and send it to the user. Can also be used to reset and send the main channel's access password if it is generated. The new password is initially expired, so the user needs to change it on first login.\n"
        },
        "unblock" : {
          "type" : "boolean",
          "description" : "Unblocks a password which has been blocked by exceeding the wrong tries\n"
        }
      },
      "description" : "Indicates the possible actions the authenticated user can perform over this password\n"
    },
    "PasswordInput" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "inputMethod" : {
            "description" : "The explanation for the value that should be sent for `virtualKeyboard`  cases is given above, in the description of this type. Possible values are:\n* textBox: A simple string should be requested\n* virtualKeyboard: A series of buttons should be presented to allow enter the password.\n",
            "$ref" : "#/definitions/PasswordInputMethodEnum"
          },
          "mode" : {
            "description" : "Indicates how a password is handled Possible values are:\n* generated: Passwords are always generated\n* manual: Passwords are manually typed by users\n* otp: One Time Passwords. are always generated and can be used only once\n* script: Passwords are not stored in Cyclos, but handed-over for a script to verify them.  Is normally used to implement single-sign-on with other apps.\n",
            "$ref" : "#/definitions/PasswordModeEnum"
          },
          "hasActivePassword" : {
            "type" : "boolean",
            "description" : "Only returned when there is an authenticated user (not for login).\nDescribes whether the user has created a password of this type.\nIf not, a proper message can be shown to the user indicating that\nthis password needs to be created.\n"
          },
          "confirmationPasswordOncePerSession" : {
            "type" : "boolean",
            "description" : "Only returned when there is an authenticated user (not for login).\nDetermines whether this password, when used as confirmation, should\nbe requested only once until the user logs out.\n"
          },
          "minLength" : {
            "type" : "integer",
            "description" : "For text passwords, the minimum password length"
          },
          "maxLength" : {
            "type" : "integer",
            "description" : "For text passwords, the maximum password length"
          },
          "otpSendMediums" : {
            "type" : "array",
            "description" : "Only for `otp`, the available mediums for the password to be sent Possibles values for each array element are:\n* email: The user will receive an email with the information\n* sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)\n",
            "items" : {
              "$ref" : "#/definitions/SendMediumEnum"
            }
          },
          "numberOfButtons" : {
            "type" : "integer",
            "description" : "Only for `virtualKeyboard`, is the number of buttons to be displayed\n"
          },
          "buttonsPerRow" : {
            "type" : "integer",
            "description" : "Only for `virtualKeyboard`, is the number of buttons that should be\ndisplayed on each row\n"
          },
          "buttons" : {
            "type" : "array",
            "description" : "Only for `virtualKeyboard`, contains the sequences of buttons that\nshould be displayed for the user. The explanation for the value that\nshould be sent on virtual keyboard mode is shown above, in the\ndescription of this type.\n",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      } ],
      "description" : "Contains all information for a password entry. Passwords in Cyclos may be entered as regular texts or as virtual keyboards. For `virtualKeyboard`, a number of information is sent, such as an unique id, the number of buttons to be displayed, the number of rows that should visually hold those buttons, the sequences of characters that should be displayed on each button. When sending the value of a password of type virtual keyboard, unique id should be sent, together with the entire sequence for each button, all separated by pipes. So, suppose a very simple (and weakly configured) example where the id is `987654321` and the sequences are: `[[\"abc\", \"def\", \"fgh\"], [\"ijk\", \"lmn\", \"opq\"]]`. This describes 2 sequences of 3 buttons each. First, the buttons with the options `abc`, `def` and `fgh` should be shown. Suppose the user chooses the second one. Then the button labels should be changed to `ijk`, `lmn` and `opq`. Now the user picks the first one. The value sent to the server should be `987654321|def|ijk`. \n"
    },
    "PasswordPermissions" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The password type",
          "$ref" : "#/definitions/PasswordType"
        },
        "change" : {
          "type" : "boolean",
          "description" : "Can change this password?"
        },
        "enable" : {
          "type" : "boolean",
          "description" : "Can enable / disable this password?"
        },
        "reset" : {
          "type" : "boolean",
          "description" : "Can reset this password?"
        },
        "unblock" : {
          "type" : "boolean",
          "description" : "Can unblock this password if blocked by exceeding tries?"
        }
      },
      "description" : "Permissions a single password"
    },
    "PasswordRegistration" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The password type"
        },
        "value" : {
          "type" : "string",
          "description" : "The password value"
        },
        "checkConfirmation" : {
          "type" : "boolean",
          "description" : "Depending on the client, if a confirm password field is shown to users, it might be useful to check the confirmation password value on the server. This way, if there are other validation exceptions, they are all shown together. In this case, this field should be set to `true` and the `confirmationValue` should be passed in with the user input. However, in cases where clients just want to register a user with a password non interactively (like in a bulk registration), passing the password value twice is not desirable. In such cases, this field can be left empty (or set to `false`), and the `confirmationValue` will be ignored.\n"
        },
        "confirmationValue" : {
          "type" : "string",
          "description" : "The password confirmation value. Is ignored unless `checkConfirmation` is set to `true`.\n"
        },
        "forceChange" : {
          "type" : "boolean",
          "description" : "When set to true will force the user to change it after the first login\n"
        }
      },
      "description" : "Data regarding a password being registered with the user"
    },
    "PasswordStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The password status Possible values are:\n* active: The password is active and valid\n* disabled: The password has been manually disabled\n* expired: The password is expired\n* indefinitelyBlocked: The password is blocked by exceeding the maximum attempts until it is manually unblocked\n* neverCreated: The password has never been created for the user\n* pending: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords)\n* reset: The password has been reset (can be used for login but must then be changed)\n* temporarilyBlocked: The password is temporarily blocked by exceeding the maximum attempts\n",
          "$ref" : "#/definitions/PasswordStatusEnum"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date this status took place"
        }
      },
      "description" : "Contains the status of a password\n"
    },
    "PasswordStatusAndActions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PasswordStatus"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The password type along with the description",
            "$ref" : "#/definitions/PasswordTypeWithDescription"
          },
          "requireOldPasswordForChange" : {
            "type" : "boolean",
            "description" : "Indicates whether the `change` action, if enabled, requires the old password to be sent. This is the case when changing the password of the logged user, and the current password was ever set and is not currently expired / reset.\n"
          },
          "permissions" : {
            "description" : "The permissions over actions the authenticated user can perform on\nthis password\n",
            "$ref" : "#/definitions/PasswordActions"
          }
        }
      } ],
      "description" : "Contains the status and possible actions over a password\n"
    },
    "PasswordStatusAndType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PasswordStatus"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The password type",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Contains the status of a password and its type.\n"
    },
    "PasswordType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "global" : {
            "type" : "boolean",
            "description" : "Indicates whether this password type is defined in global mode (`true`) or in a network (`false`)\n"
          },
          "mode" : {
            "description" : "Indicates how a password is handled Possible values are:\n* generated: Passwords are always generated\n* manual: Passwords are manually typed by users\n* otp: One Time Passwords. are always generated and can be used only once\n* script: Passwords are not stored in Cyclos, but handed-over for a script to verify them.  Is normally used to implement single-sign-on with other apps.\n",
            "$ref" : "#/definitions/PasswordModeEnum"
          }
        }
      } ],
      "description" : "Contains definitions for a password type\n"
    },
    "PasswordTypeRegistration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description to be show on the registration form\n"
          },
          "canForceChange" : {
            "type" : "boolean",
            "description" : "Whether the current user can set the password to be changed on\nthe first user login\n"
          }
        }
      } ],
      "description" : "Data for a given password type to be used on user registration"
    },
    "PasswordTypeWithDescription" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PasswordType"
      }, {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the password type. Useful to know what a password \nmust contain to meet the restrictions of this type.    \n"
          }
        }
      } ],
      "description" : "Password type definition plus a description."
    },
    "PasswordsPermissions" : {
      "type" : "object",
      "properties" : {
        "manage" : {
          "type" : "boolean",
          "description" : "Can manage any password?"
        },
        "passwords" : {
          "type" : "array",
          "description" : "Permissions over each password type",
          "items" : {
            "$ref" : "#/definitions/PasswordPermissions"
          }
        }
      },
      "description" : "Permissions over own passwords"
    },
    "PaymentError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for a payment error  Possible values are:\n* dailyAmountExceeded: The maximum amount allowed per day was exceeded.  \n* dailyPaymentsExceeded: The maximum count of payments allowed per day was exceeded.\n* destinationUpperLimitReached: The upper balance limit of the destination account was exceeded.\n* insufficientBalance: The account selected for the payment does not have enough balance\n* monthlyAmountExceeded: The maximum amount allowed per month was exceeded.\n* monthlyPaymentsExceeded: The maximum count of payments allowed per month was exceeded.\n* pos: A POS exception has happened when performing this payment. See the `posError` field for more details.   \n* timeBetweenPaymentsNotMet: The minimum time between payments was not met.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n* weeklyAmountExceeded: The maximum amount allowed per week was exceeded.\n* weeklyPaymentsExceeded: The maximum count of payments allowed per week was exceeded.\n",
            "$ref" : "#/definitions/PaymentErrorCode"
          },
          "currency" : {
            "description" : "Currency reference. Only if `code` is `dailyAmountExceeded`, `weeklyAmountExceeded` or `monthlyAmountExceeded`          \n",
            "$ref" : "#/definitions/Currency"
          },
          "maxAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The maximum amount. Only if `code` is `dailyAmountExceeded`, `weeklyAmountExceeded` or `monthlyAmountExceeded`          \n"
          },
          "maxPayments" : {
            "type" : "integer",
            "description" : "The maximum payments count. Only if `code` is `dailyPaymentsExceeded`, `weeklyPaymentsExceeded` or `monthlyPaymentsExceeded`          \n"
          },
          "posError" : {
            "description" : "The POS error details. Only if `code` is `pos`          \n",
            "$ref" : "#/definitions/PosError"
          }
        }
      } ],
      "description" : "Error when performing a payment"
    },
    "PaymentPreview" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalTransactionPreview"
      }, {
        "type" : "object",
        "properties" : {
          "mainAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "This reflects the new transaction amount. Depending on the configured fees, it could happen that the fee amount is deducted from transaction amount. If no fees deduct, it will be the same as transaction amount.  E.g: payment from A to B by 100 units with two fees: 10 units deducted from payment amount and other of 15 not deducted. Then the `totalAmount` will be 115, 90 for the `mainAmount`, 10 for the first fee and 15 for  the other fee. \n"
          },
          "fees" : {
            "type" : "array",
            "description" : "Only returned for direct payments. Contains the fees that would be\npaid by the payer if the payment is confirmed.\n",
            "items" : {
              "$ref" : "#/definitions/TransferFeePreview"
            }
          },
          "installments" : {
            "type" : "array",
            "description" : "Only returned for scheduled payments. Contains the previews of each\ninstallment, if the payment is confirmed.\n",
            "items" : {
              "$ref" : "#/definitions/ScheduledPaymentInstallmentPreview"
            }
          },
          "payment" : {
            "description" : "Depending on the configuration, some script might alter the payment object, for example, filling in custom fields. This object can be used to show the actual data to the user, and to be posted again to the `POST /{owner}/payments/` path.\n",
            "$ref" : "#/definitions/PerformPayment"
          },
          "ARate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance aging counter used for this payment"
          },
          "DRate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance maturity used for this payment"
          },
          "previousDRate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The number of days until the present balance reaches its maturity \n"
          },
          "transferDRate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The maturity used for this payment"
          }
        }
      } ],
      "description" : "Preview of either a direct or scheduled payment"
    },
    "PaymentRequestPermissions" : {
      "type" : "object",
      "properties" : {
        "accept" : {
          "type" : "boolean",
          "description" : "The payment request can be accepted by the payer."
        },
        "reject" : {
          "type" : "boolean",
          "description" : "The payment request can be rejected by the payer."
        },
        "cancel" : {
          "type" : "boolean",
          "description" : "The payment request can be canceled by the payee or managers."
        },
        "reschedule" : {
          "type" : "boolean",
          "description" : "The payment request can be rescheduled by the payee or managers.  \n"
        },
        "changeExpiration" : {
          "type" : "boolean",
          "description" : "The payment request expiration date can be changed by the payee or \nmanagers.  \n"
        },
        "authorize" : {
          "type" : "boolean",
          "description" : "Deprecated - use accept instead",
          "x-deprecated" : true,
          "x-remove-version" : 4.13
        }
      },
      "description" : "Permissions the user has over a payment request."
    },
    "PaymentRequestsPermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PaymentRequestPermissions"
      }, {
        "type" : "object",
        "properties" : {
          "view" : {
            "type" : "boolean",
            "description" : "Can view payment requests?"
          }
        }
      } ],
      "description" : "Permissions over own payment requests"
    },
    "PaymentsPermissions" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "boolean",
          "description" : "Can perform payments to users?"
        },
        "system" : {
          "type" : "boolean",
          "description" : "Can perform payments to system accounts?"
        },
        "self" : {
          "type" : "boolean",
          "description" : "Can perform payments between own accounts?"
        },
        "pos" : {
          "type" : "boolean",
          "description" : "Can receive payments from users?"
        }
      },
      "description" : "General payment permissions"
    },
    "PendingPaymentActionParams" : {
      "type" : "object",
      "properties" : {
        "comments" : {
          "type" : "string",
          "description" : "Comments for the current action"
        }
      },
      "description" : "Parameters for actions over pending payments"
    },
    "PerformBaseTransaction" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The transaction amount"
        },
        "description" : {
          "type" : "string",
          "description" : "The (optional) transaction description"
        },
        "currency" : {
          "type" : "string",
          "description" : "The currency id or internal name. Only used when not specifying a\npayment type. In this case, will narrow the search for the payment type.\n"
        },
        "type" : {
          "type" : "string",
          "description" : "The payment type, either the id or qualified internal name (in the\nform `fromAccountType.paymentType`). If no payment type is specified,\nif a single one is possible, it will be used. If a currency is\nspecified, it will be taken into account in order to find the payment\ntype. If, however, there would be multiple possibilities, a\nvalidation error is returned.\n"
        },
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type.\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Base definitions for performing a transaction",
      "x-abstract" : true
    },
    "PerformInternalTransaction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PerformTransaction"
      }, {
        "type" : "object",
        "properties" : {
          "fromName" : {
            "type" : "string",
            "description" : "If the payment type allows setting a custom name for the origin\naccount, is its name. If not allowed, is ignored. For example,\nintegration with other systems could use 'Bank account [IBAN]'.\n"
          },
          "toName" : {
            "type" : "string",
            "description" : "If the payment type allows setting a custom name for the destination\naccount, is its name. If not allowed, is ignored. For example,\nintegration with other systems could use 'Bank account [IBAN]'.\n"
          }
        }
      } ],
      "description" : "Base definitions to performing a transaction to an internal account (any\nexcept `externalPayment`, or `chargeback` which is performed distinctly).\n"
    },
    "PerformPayment" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PerformInternalTransaction"
      }, {
        "type" : "object",
        "properties" : {
          "scheduling" : {
            "description" : "Determines how a payment is scheduled. When not specified, direct payments are performed. Possible values are:\n* direct: The payment won't be scheduled, but paid directly\n* recurring: The payment will be recurring, repeated either by a limited number of occurrences or until cancel\n* scheduled: The payment will be scheduled, either to a single future date or multiple installments\n",
            "$ref" : "#/definitions/PaymentSchedulingEnum"
          },
          "installmentsCount" : {
            "type" : "integer",
            "description" : "Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions.\n",
            "minimum" : 1.0
          },
          "firstInstallmentDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Represents the first installment date. When not specified, assumes the first installment is processed instantly. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions.\n"
          },
          "installments" : {
            "type" : "array",
            "description" : "An array containing individual installments definitions, allowing full control over generated installments. Used only if `scheduling` is `scheduled`.\n",
            "items" : {
              "$ref" : "#/definitions/PerformScheduledPaymentInstallment"
            }
          },
          "occurrencesCount" : {
            "type" : "integer",
            "description" : "Represents the number of occurrences in a recurring payment. When not provided, the payment will be repeated until it is manually canceled. Used only if `scheduling` is `recurring`.\n",
            "minimum" : 1.0
          },
          "firstOccurrenceDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Represents the first occurrence date for a recurring payment. If none is given, it is assumed that the first occurrence is immediate. Used only if `scheduling` is `recurring`.\n"
          },
          "occurrenceInterval" : {
            "description" : "Defines the interval between payment occurrences. If none is given, it is assumed 1 month between occurrences. Used only if `scheduling` is `recurring`.\n",
            "$ref" : "#/definitions/TimeInterval"
          },
          "nfcChallence" : {
            "type" : "string",
            "description" : "If this payment is performed with a NFC token, must be the challenge\n(as returned by the server) encrypted by the NFC chip, encoded in HEX\nform (2 hex chars per byte).\n"
          }
        }
      } ],
      "description" : "Definitions used to perform either a direct, scheduled or recurring payment. Regarding scheduling, the `scheduling` field must be set if some scheduling option (other than direct payment) is desired. The scheduling possibilities are: - Direct payment: For a direct payment, leave empty the `scheduling` field\n  or set it to `direct`;\n- Single future payment: For a payment scheduled to a future date, set the\n  `scheduling` field to `scheduled` and set the \n  `firstDueDate` property with the desired due date;\n- Multiple installments, being the first immediately and the rest with\n  regular 1 month interval in-between: For this, set the `scheduling` field\n  to `scheduled` and the `installmentsCount`\n  to a value greater than 1;\n- Multiple installments, starting at a specific date, with other\n  installments with regular 1 month interval in-between: For this, set the\n  `scheduling` field to `scheduled`, the\n  `installmentsCount` to a value greater than 1 and the\n  `firstInstallmentDate` with a future date;\n- Custom installments: For a full control on the generated installments,\n   set the `scheduling` field to `scheduled`\n   and pass in the `installments` array. However, there are some rules:\n  - The total amount must be equals the sum of all installment amounts;\n  - The first due date must be in the future;\n  - The due dates of all installments must be in crescent order;\n  - There must be at least one day between distinct due dates.  \n- Recurring payment with the first payment immediately, the others at\n  fixed future dates: This can be achieved by setting the `scheduling`\n  field to `recurring` and leaving blank the\n  `firstOccurrenceDate`. It is possible to schedule a limited number of\n  occurrences, by setting `occurrencesCount`, or until it is manually\n  canceled, by leaving `occurrencesCount` empty. Also, it is possible to\n  customize the interval (default is 1 month) between each occurrence, by\n  setting the `occurrenceInterval` field.\n- Recurring payment starting in a future date: This can be achieved by\n  setting the `scheduling` field to `recurring`\n  and setting the `firstOccurrenceDate`. The other options, the fixed\n  number of occurrences (`occurrencesCount`) and interval between each\n  occurrence  (`occurrenceInterval`) can be set just like the case above.\n"
    },
    "PerformScheduledPaymentInstallment" : {
      "type" : "object",
      "required" : [ "amount", "dueDate" ],
      "properties" : {
        "dueDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The installment due date"
        },
        "amount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The installment amount"
        }
      },
      "description" : "An installment definition when performing a scheduled payment"
    },
    "PerformTransaction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PerformBaseTransaction"
      }, {
        "type" : "object",
        "properties" : {
          "subject" : {
            "type" : "string",
            "description" : "The payment destination (in case of perform payment) or payer (in case of receive payment). Either a user principal (id, login name,  etc) or the word `system` when the payment is to be performed to / from a system account. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`. \n"
          }
        },
        "x-abstract" : true
      } ],
      "description" : "Base definitions for performing a transaction",
      "x-abstract" : true
    },
    "Permissions" : {
      "type" : "object",
      "properties" : {
        "users" : {
          "description" : "Permissions over other users",
          "$ref" : "#/definitions/UsersPermissions"
        },
        "myProfile" : {
          "description" : "Permissions over own profile",
          "$ref" : "#/definitions/UserProfilePermissions"
        },
        "banking" : {
          "description" : "Permissions over banking / accounts",
          "$ref" : "#/definitions/BankingPermissions"
        },
        "marketplace" : {
          "description" : "Permissions for marketplace",
          "$ref" : "#/definitions/MarketplacePermissions"
        },
        "passwords" : {
          "description" : "Permissions over own passwords",
          "$ref" : "#/definitions/PasswordsPermissions"
        },
        "records" : {
          "description" : "Permissions over own records",
          "$ref" : "#/definitions/RecordsPermissions"
        },
        "operations" : {
          "description" : "Permissions over own custom operations",
          "$ref" : "#/definitions/OperationsPermissions"
        },
        "contacts" : {
          "description" : "Permissions over contacts",
          "$ref" : "#/definitions/ContactsPermissions"
        },
        "notifications" : {
          "description" : "Permissions over notifications",
          "$ref" : "#/definitions/NotificationsPermissions"
        },
        "tokens" : {
          "description" : "Permissions over tokens",
          "$ref" : "#/definitions/TokensPermissions"
        }
      },
      "description" : "Contains all permissions and configurations a user or guest can perform\nin the REST API\n"
    },
    "PersonalizeNfcError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseNfcError"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for a personalize NFC error  Possible values are:\n* tokenInUse: The token specified for personalization is already in use (exists and it is active)\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/PersonalizeNfcErrorCode"
          }
        }
      } ],
      "description" : "Error when personalize a NFC card"
    },
    "Phone" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The phone name"
          },
          "number" : {
            "type" : "string",
            "description" : "The formatted number"
          },
          "extension" : {
            "type" : "string",
            "description" : "The number extension, only for landLine phones, and is only used if the\nphone configuration states that extensions are enabled. \n"
          },
          "type" : {
            "description" : "Type of phone Possible values are:\n* landLine: A landline phone\n* mobile: A mobile phone\n",
            "$ref" : "#/definitions/PhoneKind"
          },
          "normalizedNumber" : {
            "type" : "string",
            "description" : "The number, normalized to the E.164 format",
            "readOnly" : true
          }
        }
      } ],
      "description" : "A phone reference"
    },
    "PhoneBasicData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Type of phone Possible values are:\n* landLine: A landline phone\n* mobile: A mobile phone\n",
          "$ref" : "#/definitions/PhoneKind"
        },
        "country" : {
          "type" : "string",
          "description" : "The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.\n"
        },
        "alwaysShowInternationalNumber" : {
          "type" : "boolean",
          "description" : "Indicates the it is configured to always format numbers using the\ninternational format. If set to false, numbers will be formatted\nin the national format.\n"
        },
        "example" : {
          "type" : "string",
          "description" : "An example phone number. Can be either a land-line or mobile\nphone number example, depending on this phone kind phone\n"
        },
        "extensionEnabled" : {
          "type" : "boolean",
          "description" : "Only returned for land line phones.\nIndicates whether the extension is enabled.\n"
        },
        "smsEnabled" : {
          "type" : "boolean",
          "description" : "Only returned for mobile phones.\nIndicates whether outbound SMS is enabled in Cyclos\n"
        },
        "managePrivacy" : {
          "type" : "boolean",
          "description" : "Can the authenticated user manage the privacy of this phone?"
        },
        "manuallyVerify" : {
          "type" : "boolean",
          "description" : "Can the authenticated user manully verify a mobile phone?"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        }
      },
      "description" : "Contains data shared by both PhoneDataForNew and PhoneDataForEdit\n"
    },
    "PhoneConfiguration" : {
      "type" : "object",
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.\n"
        },
        "alwaysShowInternationalNumber" : {
          "type" : "boolean",
          "description" : "Indicates the it is configured to always format numbers using the\ninternational format. If set to false, numbers will be formatted\nin the national format.\n"
        },
        "extensionEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the extension is enabled for land-line phones"
        },
        "smsEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether outbound SMS is enabled in Cyclos"
        },
        "landLineExample" : {
          "type" : "string",
          "description" : "An example phone number for a land-line phone"
        },
        "mobileExample" : {
          "type" : "string",
          "description" : "An example phone number for a mobile phone"
        }
      },
      "description" : "Contains configuration information related to phones"
    },
    "PhoneConfigurationForUserProfile" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneConfiguration"
      }, {
        "type" : "object",
        "properties" : {
          "mobilePhone" : {
            "description" : "Contains a template with default values for a new mobile phone\n",
            "$ref" : "#/definitions/PhoneNew"
          },
          "landLinePhone" : {
            "description" : "Contains a template the default values for a new land-line phone\n",
            "$ref" : "#/definitions/PhoneNew"
          },
          "mobileAvailability" : {
            "description" : "The availability for mobile phones Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
            "$ref" : "#/definitions/AvailabilityEnum"
          },
          "landLineAvailability" : {
            "description" : "The availability for land-line phones Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
            "$ref" : "#/definitions/AvailabilityEnum"
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Can edit phones?"
          },
          "managePrivacy" : {
            "type" : "boolean",
            "description" : "Can manage the privacy of phones?"
          },
          "maxLandLines" : {
            "type" : "integer",
            "description" : "The maximum number of land-line phones the user can own"
          },
          "maxMobiles" : {
            "type" : "integer",
            "description" : "The maximum number of mobile phones the user can own"
          }
        }
      } ],
      "description" : "Contains extended phone configuration for a user profile"
    },
    "PhoneDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "phone" : {
            "description" : "The phone that is being edited. This value can be modified and sent back on `PUT /phones/{id}`.\n",
            "$ref" : "#/definitions/PhoneEdit"
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Can the authenticated user edit this phone?"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Can the authenticated user remove this phone?"
          }
        }
      } ],
      "description" : "Contains data for editing an existing phone\n"
    },
    "PhoneDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "phone" : {
            "description" : "The phone populated with the default fields. This value can be modified and sent back on `POST /{user}/phones`.\n",
            "$ref" : "#/definitions/PhoneNew"
          },
          "example" : {
            "type" : "string",
            "description" : "An example phone number"
          }
        }
      } ],
      "description" : "Contains data for creating a new phone\n"
    },
    "PhoneEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Parameters for editing an existing phone"
    },
    "PhoneEditWithId" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneEdit"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The internal entity identifier"
          }
        }
      } ],
      "description" : "Parameters for editing an existing phone"
    },
    "PhoneManage" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The phone name"
        },
        "number" : {
          "type" : "string",
          "description" : "The formatted number"
        },
        "extension" : {
          "type" : "string",
          "description" : "The number extension, only for landLine phones, and is only used if the\nphone configuration states that extensions are enabled. \n"
        },
        "hidden" : {
          "type" : "boolean",
          "description" : "Indicates whether this phone is hidden for other users (`true`)\nor visible to all users (`false`).\n"
        },
        "enabledForSms" : {
          "type" : "boolean",
          "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile phone is enabled for SMS, both receiving\nnotifications and sending SMS operations. Can only be set if the\nmobile phone is verified.\n"
        },
        "verified" : {
          "type" : "boolean",
          "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile is verified. Can only be directly set by\nadministrators. Regular users need to verify it.\n"
        }
      },
      "description" : "Common fields for either creating or editing a phone",
      "x-abstract" : true,
      "x-implements" : "IPhoneDetailed"
    },
    "PhoneNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneManage"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "Type of phone Possible values are:\n* landLine: A landline phone\n* mobile: A mobile phone\n",
            "$ref" : "#/definitions/PhoneKind"
          }
        }
      } ],
      "description" : "Parameters for creating a new phone"
    },
    "PhoneResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Phone"
      }, {
        "type" : "object",
        "properties" : {
          "verified" : {
            "type" : "boolean",
            "description" : "Indicates whether this phone is verified. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.\n"
          },
          "enabledForSms" : {
            "type" : "boolean",
            "description" : "Indicates whether this phone is verified and enabled for SMS. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.\n"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this phone is hidden for other users. Is only returned if the authenticated user manages the owner of this phone.\n"
          },
          "verificationCodeSendDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the verification code was sent, if any. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.\n"
          }
        }
      } ],
      "description" : "Data for a phone as returned on list"
    },
    "PhoneView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneResult"
      }, {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "The user which owns this phone",
            "$ref" : "#/definitions/User"
          },
          "name" : {
            "type" : "string",
            "description" : "The phone name"
          },
          "number" : {
            "type" : "string",
            "description" : "The formatted number"
          },
          "extension" : {
            "type" : "string",
            "description" : "The number extension, only for landLine phones, and is only used if the\nphone configuration states that extensions are enabled. \n"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates whether this phone is hidden for other users (`true`)\nor visible to all users (`false`).\n"
          },
          "enabledForSms" : {
            "type" : "boolean",
            "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile phone is enabled for SMS, both receiving\nnotifications and sending SMS operations. Can only be set if the\nmobile phone is verified.\n"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Only applicable if this represents a mobile phone.\nWhether this mobile is verified. Can only be directly set by\nadministrators. Regular users need to verify it.\n"
          }
        },
        "x-implements" : "IPhoneDetailed"
      } ],
      "description" : "Detailed information when viewing a phone",
      "x-implements" : "IPhoneDetailed"
    },
    "PosError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Application-specific error codes for a POS operation error  Possible values are:\n* payerInaccessiblePrincipal: The specified payer cannot use the given identification method (principal type) in the POS channel.\n* payerNotInChannel: The specified payer user does not participate on the POS channel.\n* payerNotOperative: The specified payer has some restriction that renders he/she inoperative for POS operations. An example of such case is when the user has pending agreements.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/PosErrorCode"
          }
        }
      } ],
      "description" : "Error when performing a POS operation"
    },
    "PreselectedPeriod" : {
      "type" : "object",
      "properties" : {
        "defaultOption" : {
          "type" : "boolean",
          "description" : "Indicates whether this period should be pre-selected"
        },
        "name" : {
          "type" : "string",
          "description" : "The period display name"
        },
        "begin" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The period begin date"
        },
        "end" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The period begin date"
        }
      },
      "description" : "Represents a pre-calculated date period\n"
    },
    "Principal" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "This is the value which is used to identify the user"
        },
        "type" : {
          "description" : "This is the type of the user identification which can be a token, profile field, etc",
          "$ref" : "#/definitions/EntityReference"
        }
      },
      "description" : "Represents a user identification method of a user"
    },
    "PrincipalType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "The kind of this principal type",
            "$ref" : "#/definitions/PrincipalTypeKind"
          }
        }
      } ],
      "description" : "A reference to a principal type"
    },
    "PrincipalTypeInput" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PrincipalType"
      }, {
        "type" : "object",
        "properties" : {
          "customField" : {
            "description" : "If this principal is based on a custom field, holds its definition\n",
            "$ref" : "#/definitions/CustomFieldDetailed"
          },
          "tokenType" : {
            "description" : "If this principal is a token, contains its type Possible values are:\n* barcode: A barcode with the token\n* nfcDevice: A device (e.g. cell phone) with support for NFC\n* nfcTag: A NFC tag/card \n* other: Any other type containing a token\n* qrcode: A QR code containing a token\n* swipe: A swipe/magnetic card containing the token\n",
            "$ref" : "#/definitions/TokenTypeEnum"
          },
          "mask" : {
            "type" : "string",
            "description" : "If this principal is either a token or account number, holds the\n(optional) mask which clients can use to input the value.\n"
          },
          "allowManualInput" : {
            "type" : "boolean",
            "description" : "Only returned if `kind` is `token`. Specifies if the principal type allows enter manually the token value.\n"
          },
          "example" : {
            "type" : "string",
            "description" : "If this principal is mobile phone, holds an example number.\n"
          }
        }
      } ],
      "description" : "Definition on how a principal value can be entered by the user"
    },
    "ProfileFieldActions" : {
      "type" : "object",
      "properties" : {
        "edit" : {
          "type" : "boolean",
          "description" : "Can the authenticated user edit this field?"
        },
        "managePrivacy" : {
          "type" : "boolean",
          "description" : "Can the authenticated user manage the privacy for this field?"
        }
      },
      "description" : "Determines the allowed actions over a given profile field"
    },
    "QueryFilters" : {
      "type" : "object",
      "properties" : {
        "page" : {
          "type" : "integer",
          "description" : "The page number (zero-based) of the search. The default value is zero.\n"
        },
        "pageSize" : {
          "type" : "integer",
          "description" : "The maximum number of records that will be returned on the search.\nThe default value is 40. The maximum number of returned results is\nconfigured in Cyclos, and even if more than that is requested, it\nwill be limited by that setting.\n"
        }
      },
      "description" : "Base definitions for objects used as filters for queries\n",
      "x-abstract" : true
    },
    "Record" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "display" : {
            "type" : "string",
            "description" : "The descriptive text for this record, according to the record\ntype configuration in Cyclos \n"
          },
          "kind" : {
            "description" : "The possible kinds of a record, which can either belong to system or to an user Possible values are:\n* system: The record belongs to the system, and is unrelated to an user\n* user: The record belongs to a specific user\n",
            "$ref" : "#/definitions/RecordKind"
          }
        }
      } ],
      "description" : "A custom record is a structured data stored either for a user or for\nsystem (a general record, unrelated to a user).\n"
    },
    "RecordBasePermissions" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The record type",
          "$ref" : "#/definitions/RecordType"
        },
        "create" : {
          "type" : "boolean",
          "description" : "Can the authenticated user create new records of this type?"
        },
        "edit" : {
          "type" : "boolean",
          "description" : "Can the authenticated user edit records of this type?"
        },
        "remove" : {
          "type" : "boolean",
          "description" : "Can the authenticated user remove records of this type?"
        }
      },
      "description" : "Basic definitions shared by `OwnerRecordPermissions` and `BaseRecordDataForSearch`\n"
    },
    "RecordBasicData" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "description" : "The possible kinds of a record, which can either belong to system or to an user Possible values are:\n* system: The record belongs to the system, and is unrelated to an user\n* user: The record belongs to a specific user\n",
          "$ref" : "#/definitions/RecordKind"
        },
        "type" : {
          "description" : "The record type",
          "$ref" : "#/definitions/RecordTypeDetailed"
        },
        "fields" : {
          "type" : "array",
          "description" : "The record custom fields (either defined within this record type\nor shared fields linked with this record type)\n",
          "items" : {
            "$ref" : "#/definitions/RecordCustomFieldDetailed"
          }
        },
        "user" : {
          "description" : "The record owner user. Only returned if `kind` is\n`user`.\n",
          "$ref" : "#/definitions/User"
        }
      },
      "description" : "Contains data shared by both RecordDataForNew and RecordDataForEdit\n"
    },
    "RecordCustomField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomField"
      }, {
        "type" : "object",
        "properties" : {
          "section" : {
            "description" : "The record fields section",
            "$ref" : "#/definitions/EntityReference"
          },
          "colspan" : {
            "type" : "integer",
            "description" : "The number of columns this field spans"
          }
        }
      } ],
      "description" : "Adds to `CustomField` some record-specific definitions\n"
    },
    "RecordCustomFieldDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomFieldDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "section" : {
            "description" : "The record fields section",
            "$ref" : "#/definitions/EntityReference"
          },
          "colspan" : {
            "type" : "integer",
            "description" : "The number of columns this field spans"
          }
        }
      } ],
      "description" : "Adds to `CustomFieldDetailed` some record-specific definitions\n"
    },
    "RecordCustomFieldValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseCustomFieldValue"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "description" : "The custom field reference",
            "$ref" : "#/definitions/RecordCustomField"
          }
        }
      } ],
      "description" : "Adds to `CustomFieldValue` the section where this field should be shown\n"
    },
    "RecordDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "edit" : {
            "type" : "boolean",
            "description" : "Can the authenticated user edit records of this type?"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Can the authenticated user remove records of this type?"
          },
          "editableFields" : {
            "type" : "array",
            "description" : "The internal names of fields that can be edited",
            "items" : {
              "type" : "string"
            }
          },
          "record" : {
            "description" : "The record that is being edited. This value can be modified and sent back to `PUT /records/{id}`\n",
            "$ref" : "#/definitions/RecordEdit"
          },
          "binaryValues" : {
            "description" : "Holds the current values for file / image custom fields as lists of\n`StoredFile`s / `Image`s.\n",
            "$ref" : "#/definitions/CustomFieldBinaryValues"
          }
        }
      } ],
      "description" : "Contains data for editing an existing record\n"
    },
    "RecordDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "record" : {
            "description" : "The record populated with the default fields. This value can be modified and sent back to `POST /{owner}/records/{type}`.\n",
            "$ref" : "#/definitions/RecordNew"
          }
        }
      } ],
      "description" : "Contains data for creating a new record\n"
    },
    "RecordDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseRecordDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "query" : {
            "description" : "Default query filters for searching records\n",
            "$ref" : "#/definitions/RecordQueryFilters"
          }
        }
      } ],
      "description" : "Data for searching records of a specific owner and type"
    },
    "RecordEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Parameters for editing an existing record"
    },
    "RecordManage" : {
      "type" : "object",
      "properties" : {
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Common fields for either creating or editing a record",
      "x-abstract" : true
    },
    "RecordNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordManage"
      }, {
        "type" : "object"
      } ],
      "description" : "Parameters for creating a new record"
    },
    "RecordPermissions" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The record type",
          "$ref" : "#/definitions/RecordType"
        },
        "create" : {
          "type" : "boolean",
          "description" : "Can create records of this type?"
        },
        "update" : {
          "type" : "boolean",
          "description" : "Can update records of this type?"
        },
        "remove" : {
          "type" : "boolean",
          "description" : "Can remove records of this type?"
        },
        "singleId" : {
          "type" : "string",
          "description" : "If the record type `layout` is  `single` this property contains the identifier of the existing record (if any) of this type.  \n"
        }
      },
      "description" : "Permissions over own records of a given type"
    },
    "RecordQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FullTextQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "customFields" : {
            "type" : "array",
            "description" : "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.\n\nA note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.\n",
            "items" : {
              "type" : "string"
            }
          },
          "creationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum record creation date\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }
      } ],
      "description" : "Query filters for records"
    },
    "RecordResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Record"
      }, {
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The record creation date"
          },
          "createdBy" : {
            "description" : "Reference to the user that created the record",
            "$ref" : "#/definitions/User"
          },
          "lastModificationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The record last modification date"
          },
          "lastModifiedBy" : {
            "description" : "Reference to the user that last modified the record",
            "$ref" : "#/definitions/User"
          },
          "customValues" : {
            "type" : "object",
            "description" : "Holds the values for custom record fields, keyed by field internal name\n",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Contains data returned when searching for records\n"
    },
    "RecordSection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "informationText" : {
            "type" : "string",
            "description" : "An informative text that should be shown in the form. The text is formatted in HTML.\n"
          },
          "fields" : {
            "type" : "array",
            "description" : "The internal names of the custom fields which are part of this section.\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Details for a section of fields in a record type\n"
    },
    "RecordType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "pluralName" : {
            "type" : "string",
            "description" : "The name for the plural form"
          },
          "layout" : {
            "description" : "The layout this record should be presented Possible values are:\n* list: Should show a regular search filters / list\n* single: There should be a single record, with the form directly\n* tiled: Should show the record list with a form to quickly add a new \n",
            "$ref" : "#/definitions/RecordLayoutEnum"
          },
          "useViewPage" : {
            "type" : "boolean",
            "description" : "Whether the record type is set to use a separated view / edit page\n"
          }
        }
      } ],
      "description" : "Contains definitions for a record type\n"
    },
    "RecordTypeDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordType"
      }, {
        "type" : "object",
        "properties" : {
          "fieldColumns" : {
            "type" : "integer",
            "description" : "The number of columns which should be used to layout fields \n"
          },
          "nowrapLabels" : {
            "type" : "boolean",
            "description" : "Indicates whether labels in the form should be prevented from wrapping lines \n"
          },
          "informationText" : {
            "type" : "string",
            "description" : "An informative text that should be shown in the form. The text is formatted in HTML.\n"
          },
          "sections" : {
            "type" : "array",
            "description" : "The field sections in this record type \n",
            "items" : {
              "$ref" : "#/definitions/RecordSection"
            }
          }
        }
      } ],
      "description" : "A record type with more information for its records\n"
    },
    "RecordTypeWithMenu" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordType"
      }, {
        "type" : "object",
        "properties" : {
          "showInMenu" : {
            "type" : "boolean",
            "description" : "Should this record type be shown in the user menu?"
          }
        }
      } ],
      "description" : "A record type with information on whether to show on user menu\n"
    },
    "RecordView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Record"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The record type",
            "$ref" : "#/definitions/RecordTypeDetailed"
          },
          "user" : {
            "description" : "The user which owns this record, only returned if `kind` is `user`\n",
            "$ref" : "#/definitions/User"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The record creation date"
          },
          "createdBy" : {
            "description" : "Reference to the user that created the record",
            "$ref" : "#/definitions/User"
          },
          "lastModificationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The record last modification date"
          },
          "lastModifiedBy" : {
            "description" : "Reference to the user that last modified the record",
            "$ref" : "#/definitions/User"
          },
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values this record has",
            "items" : {
              "$ref" : "#/definitions/RecordCustomFieldValue"
            }
          },
          "edit" : {
            "type" : "boolean",
            "description" : "Can the authenticated user edit this record?"
          },
          "remove" : {
            "type" : "boolean",
            "description" : "Can the authenticated user remove this record?"
          },
          "operations" : {
            "type" : "array",
            "description" : "List of runnable custom operations.",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          }
        }
      } ],
      "description" : "Detailed information when viewing a record"
    },
    "RecordWithOwnerResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecordResult"
      }, {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "The record owner",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Results for a shared record search, containing the owner user as well\n"
    },
    "RecordsPermissions" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "array",
          "description" : "Permissions over each visible user record type",
          "items" : {
            "$ref" : "#/definitions/RecordPermissions"
          }
        },
        "system" : {
          "type" : "array",
          "description" : "Permissions over each visible system record type",
          "items" : {
            "$ref" : "#/definitions/RecordPermissions"
          }
        }
      },
      "description" : "Permissions over own or system records"
    },
    "RecurringPaymentOccurrenceView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "integer",
            "description" : "The occurrence number."
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The occurrence date."
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The installment amount"
          },
          "status" : {
            "description" : "The status of a recurring payment occurrence Possible values are:\n* failed: The occurrence has failed processing (probably because there was not enough funds in the payer account)\n* processed: The occurrence was correctly processed, generating a transfer\n",
            "$ref" : "#/definitions/RecurringPaymentOccurrenceStatusEnum"
          },
          "by" : {
            "description" : "The user that performed an status change. For example, who\nmanually paid, settled or canceled an open installment\n",
            "$ref" : "#/definitions/User"
          },
          "transferId" : {
            "type" : "string",
            "description" : "Only if the occurrence was processed, contains the internal\nidentifier of the generated transfer.\n"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "Only if the occurrence was processed, contains the transaction\nnumber of the generated transfer.\n"
          },
          "transferDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the occurrence was processed. It might happen that the\noccurrence has first failed, then later processed\n"
          },
          "canProcess" : {
            "type" : "boolean",
            "description" : "Can the authenticated user process this failed occurrence?"
          }
        }
      } ],
      "description" : "Contains details about an occurrence of a recurring payment\n"
    },
    "RecurringPaymentPermissions" : {
      "type" : "object",
      "properties" : {
        "cancel" : {
          "type" : "boolean",
          "description" : "Can cancel the recurring payment?"
        }
      },
      "description" : "Permissions the user has over a recurring payment"
    },
    "RecurringPaymentsPermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RecurringPaymentPermissions"
      }, {
        "type" : "object",
        "properties" : {
          "view" : {
            "type" : "boolean",
            "description" : "Can view recurring payments?"
          }
        }
      } ],
      "description" : "Permissions over own recurring payments"
    },
    "RedeemVoucher" : {
      "type" : "object",
      "properties" : {
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values for the redeem payment, keyed by field internal name or id. The format of the value depends on the custom field type.\n",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Additional data to redeem a voucher"
    },
    "RedeemVoucherError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Possible errors when redeeming a voucher Possible values are:\n* notAllowedForUser: This user cannot redeem this voucher\n* notAllowedForVoucher: This voucher cannot be redeemed\n* notAllowedToday: This voucher cannot be redeemed today \n* notAllowedYet: The redeem period for this voucher has not arrived yet\n* payment: There was an error when performing the payment\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n* userBlocked: The user has been blocked by exceeding redeem tries\n",
            "$ref" : "#/definitions/RedeemVoucherErrorCode"
          },
          "voucherStatus" : {
            "description" : "Only if `code` is `notAllowedForVoucher` Possible values are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
            "$ref" : "#/definitions/VoucherStatusEnum"
          },
          "allowedDays" : {
            "type" : "array",
            "description" : "Only if `code` is `notAllowedToday` Possibles values for each array element are:\n* fri: Friday\n* mon: Monday\n* sat: Saturday\n* sun: Sunday\n* thu: Thursday\n* tue: Tuesday\n* wed: Wednesday\n",
            "items" : {
              "$ref" : "#/definitions/WeekDayEnum"
            }
          },
          "redeemAfterDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Indicates the date after which this voucher can be redeemed. Only if `code` is `notAllowedYet`.\n"
          },
          "paymentError" : {
            "description" : "The `PaymentError` generated when the voucher payment was being created. Only if `code` is `payment`.\n",
            "$ref" : "#/definitions/PaymentError"
          }
        }
      } ],
      "description" : "Error when redeeming a voucher"
    },
    "RejectOrder" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderAction"
      }, {
        "type" : "object"
      } ],
      "description" : "Parameters used to reject an order by the authenticated user."
    },
    "RelatedTransferType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "related" : {
            "description" : "Reference to the related account type",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "A transfer type related to an account point-of-view"
    },
    "RunOperation" : {
      "type" : "object",
      "properties" : {
        "formParameters" : {
          "type" : "object",
          "description" : "Holds the form field values, keyed by field internal name or id. The format of the value depends on the custom field type.\n",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "confirmationPassword" : {
          "type" : "string",
          "description" : "If the custom operation requires confirmation password, the `OperationDataForRun.confirmationPasswordInput` will contain the data for inputting the confirmation password. When such value is present, the password value should be provided in this property.\n"
        },
        "page" : {
          "type" : "integer",
          "description" : "When running a custom operation with `resultType` = `resultPage`, determines the current page offset. Whether this is implemented depends on the script code itself.\n"
        },
        "pageSize" : {
          "type" : "integer",
          "description" : "When running a custom operation with `resultType` = `resultPage`, determines the number of results per page. Whether this is implemented depends on the script code itself.\n"
        },
        "pageContext" : {
          "description" : "Only when running a custom operation with `resultType` = `resultPage`. Possible values are:\n* csv: Export results as Comma-Separated-Values (CSV)\n* page: Normal search, returning the data as rows in the result\n* pdf: Export results as printable PDF\n",
          "$ref" : "#/definitions/OperationPageContextEnum"
        }
      },
      "description" : "Defines parameters used to run a custom operation\n"
    },
    "RunOperationAction" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "description" : "The custom operation that executes this action",
          "$ref" : "#/definitions/Operation"
        },
        "parameters" : {
          "description" : "The parameters that should be sent back when executing this action\n",
          "$ref" : "#/definitions/RunOperationActionParameters"
        }
      },
      "description" : "Describes an action that can be executed after running an operation. \n"
    },
    "RunOperationActionParameters" : {
      "type" : "object",
      "description" : "Parameters that should be passed to the server when running this action \n",
      "additionalProperties" : {
        "type" : "string"
      },
      "x-parent" : "HashMap<String, Object>"
    },
    "RunOperationResult" : {
      "type" : "object",
      "properties" : {
        "resultType" : {
          "description" : "The kind of data a custom operation execution is expected to return Possible values are:\n* externalRedirect: The main execution returns an URL for another service. Then a second execution is expected when this other service redirects the client back to Cyclos\n* fileDownload: Returns a file, which can be downloaded\n* notification: Returns a text to be displayed as a simple notification\n* plainText: Returns a plain text to be displayed in a page, and optionally printed\n* resultPage: Returns a page or list of results, which should be displayed in a table like any other search / list\n* richText: Returns an HTML formatted text to be displayed in a page, and optionally printed\n* url: The result should be an URL to which the client should be redirected to\n",
          "$ref" : "#/definitions/OperationResultTypeEnum"
        },
        "title" : {
          "type" : "string",
          "description" : "The text title. May be returned only if `resultType` is either `plainText`, `richText` or `resultPage`.\n"
        },
        "content" : {
          "type" : "string",
          "description" : "The execution result content. Only returned if `resultType` is either `plainText` or  `richText`.\n"
        },
        "notification" : {
          "type" : "string",
          "description" : "The execution result as string that should be shown as a notification. Only returned if `resultType` is `notification`.\n"
        },
        "notificationLevel" : {
          "description" : "Only returned if `resultType` is `notification`. Possible values are:\n* error: An error message, when some operation went wrong  \n* information: A general informative message\n* warning: A warning message, when special caution is required\n",
          "$ref" : "#/definitions/NotificationLevelEnum"
        },
        "url" : {
          "type" : "string",
          "description" : "The execution result as an URL, to which the client should be redirected. Only returned if `resultType` is either `externalRedirect` or `url`.\n"
        },
        "backTo" : {
          "description" : "Either the id or internal name of the custom operation to go back after run the operation.\n",
          "$ref" : "#/definitions/EntityReference"
        },
        "backToRoot" : {
          "type" : "boolean",
          "description" : "A boolean value indicating if the client application must go back to the page that originated the custom  operation executions.     \n"
        },
        "reRun" : {
          "type" : "boolean",
          "description" : "A boolean value indicating if the custom operation we went back to or the current action container operation must be re-run before display it.\n"
        },
        "columns" : {
          "type" : "array",
          "description" : "Contains the definitions for each column in the result. Only returned if `resultType` is `resultPage`. \n",
          "items" : {
            "$ref" : "#/definitions/RunOperationResultColumn"
          }
        },
        "rows" : {
          "type" : "array",
          "description" : "Each row is an object containing the cells for that row, keyed by each column's `property`. Only returned if `resultType` is `resultPage`.\n",
          "items" : {
            "$ref" : "#/definitions/RunOperationResultRow"
          }
        },
        "actions" : {
          "type" : "array",
          "description" : "Actions are other internal custom operations that can be executed from this custom operation. The returned parameters should be passed to the server when running this action.\n",
          "items" : {
            "$ref" : "#/definitions/RunOperationAction"
          }
        }
      },
      "description" : "Defines what is returned when a custom operation is executed. The actual property that are filled depend on the `resultType` property. Not returned when the `resultType` is file. In that case, the response content will be the file content \n"
    },
    "RunOperationResultColumn" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "type" : "string",
          "description" : "The column header text"
        },
        "property" : {
          "type" : "string",
          "description" : "Contains the property name for each row element to access this\ncolumn value.\n"
        },
        "align" : {
          "type" : "string",
          "description" : "The horizontal alignment. The actual values depend on the semantics of\nboth the script result and the client application.\n"
        },
        "valign" : {
          "type" : "string",
          "description" : "The vertical alignment. The actual values depend on the semantics of\nboth the script result and the client application.\n"
        },
        "width" : {
          "type" : "string",
          "description" : "The column width. The actual values depend on the semantics of\nboth the script result and the client application.\n"
        }
      },
      "description" : "A column definition when the result type is `resultPage`.\n"
    },
    "RunOperationResultRow" : {
      "type" : "object",
      "description" : "A row returned when the custom operation resultType is `resultPage`. Even though by a swagger limitation the definition has `additionalProperties` as `string`, the actual type of each cell depend on the script. That means cells could be booleans, numbers or even other objects, beside string. \n",
      "additionalProperties" : {
        "type" : "string"
      },
      "x-parent" : "HashMap<String, Object>"
    },
    "ScheduledPaymentInstallmentPreview" : {
      "type" : "object",
      "properties" : {
        "number" : {
          "type" : "integer",
          "description" : "The installment number"
        },
        "dueDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The installment due date"
        },
        "totalAmount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The final total installment amount"
        },
        "mainAmount" : {
          "type" : "string",
          "format" : "number",
          "description" : "Depending on the configured fees, it could happen that the main amount is deducted from fees amount. This reflects the new main amount. If no fees deduct, it will be the same as `totalAmount`.\n"
        },
        "fees" : {
          "type" : "array",
          "description" : "Only returned for direct payments. Contains the fees that would be\npaid by the payer if the payment is confirmed.\n",
          "items" : {
            "$ref" : "#/definitions/TransferFeePreview"
          }
        }
      },
      "description" : "Preview of a direct or scheduled payment"
    },
    "ScheduledPaymentInstallmentView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "integer",
            "description" : "The installment number."
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The installment due date."
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The installment amount"
          },
          "status" : {
            "description" : "The status of a scheduled payment installment Possible values are:\n* blocked: The installment is blocked, and won't be automatically processed on its due date\n* canceled: The installment was canceled\n* failed: The installment processing failed, for example, because there was no funds in the source account\n* processed: The installment was processed, generating a transfer\n* scheduled: The installment is scheduled for a future date\n* settled: The installment was marked as settled by the receiver\n",
            "$ref" : "#/definitions/ScheduledPaymentInstallmentStatusEnum"
          },
          "by" : {
            "description" : "The user that performed an status change. For example, who\nmanually paid, settled or canceled an open installment\n",
            "$ref" : "#/definitions/User"
          },
          "transferId" : {
            "type" : "string",
            "description" : "Only if the installment was processed, contains the internal\nidentifier of the generated transfer.\n"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "Only if the installment was processed, contains the transaction\nnumber of the generated transfer.\n"
          },
          "transferDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the transfer was processed."
          },
          "canProcess" : {
            "type" : "boolean",
            "description" : "Can the authenticated user process this installment?"
          },
          "canSettle" : {
            "type" : "boolean",
            "description" : "Can the authenticated user settle this installment?"
          }
        }
      } ],
      "description" : "Contains details about an installment of a scheduled payment\n"
    },
    "ScheduledPaymentPermissions" : {
      "type" : "object",
      "properties" : {
        "block" : {
          "type" : "boolean",
          "description" : "Can block the whole scheduled payment?"
        },
        "unblock" : {
          "type" : "boolean",
          "description" : "Can unblock the whole scheduled payment?"
        },
        "cancel" : {
          "type" : "boolean",
          "description" : "Can cancel the whole scheduled payment?"
        },
        "settle" : {
          "type" : "boolean",
          "description" : "Can settle open installments?"
        }
      },
      "description" : "Permissions the user has over a scheduled payment"
    },
    "ScheduledPaymentsPermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ScheduledPaymentPermissions"
      }, {
        "type" : "object",
        "properties" : {
          "view" : {
            "type" : "boolean",
            "description" : "Can view own scheduled payments?"
          },
          "process" : {
            "type" : "boolean",
            "description" : "Can process installments?"
          }
        }
      } ],
      "description" : "Permissions over own scheduled payments"
    },
    "SearchByDistanceData" : {
      "type" : "object",
      "properties" : {
        "addresses" : {
          "type" : "array",
          "description" : "The list of addresses owned by the authenticated user",
          "items" : {
            "$ref" : "#/definitions/Address"
          }
        },
        "distanceUnit" : {
          "description" : "Unit for measuring distances Possible values are:\n* kilometer: Unit representing kilometers\n* mile: Unit representing miles \n",
          "$ref" : "#/definitions/DistanceEnum"
        },
        "defaultValues" : {
          "type" : "object",
          "description" : "The default values, keyed by field name, for address fields",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Contains configuration information for searching data by distance"
    },
    "SendPaymentRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PerformInternalTransaction"
      }, {
        "type" : "object",
        "properties" : {
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The payment request expiration date. Required, unless the expiration date is configured in the payment type to be hidden from users."
          },
          "scheduling" : {
            "description" : "Determines how a payment request is scheduled. When not specified, the payment request is processed directly. Possible values are:\n* direct: The scheduled payment won't be scheduled, but paid directly\n* scheduled: The scheduled payment will be scheduled, once accepting, triggering a given number of installments\n",
            "$ref" : "#/definitions/PaymentRequestSchedulingEnum"
          },
          "firstInstallmentIsImmediate" : {
            "type" : "boolean",
            "description" : "Indicates whether the first installment should be immediately processed once the scheduled payment is accepted. Used only if `scheduling` is `scheduled`. When not explicitly set to `false` will process the first installment immediately.\n"
          },
          "installmentsCount" : {
            "type" : "integer",
            "description" : "Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`.\n",
            "minimum" : 1.0
          }
        }
      } ],
      "description" : "Definitions used to send a payment request. The request has an expiration date (which can be hidden from the user, depending on the configuration) and can be set to be scheduled.\n"
    },
    "SetDeliveryMethod" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderAction"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "chargeAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The delivery method charge amount."
          },
          "time" : {
            "$ref" : "#/definitions/TimeInterval"
          }
        }
      } ],
      "description" : "Delivery method information"
    },
    "SharedRecordsDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseRecordDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "recordTypes" : {
            "type" : "array",
            "description" : "The possible record types.\n",
            "items" : {
              "$ref" : "#/definitions/RecordType"
            }
          },
          "query" : {
            "description" : "Default query filters for searching records\n",
            "$ref" : "#/definitions/SharedRecordsQueryFilters"
          }
        }
      } ],
      "description" : "Data for searching records with shared fields (multiple types)"
    },
    "SharedRecordsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GeneralRecordsQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "array",
            "description" : "Either the ids or identification methods of record types\n",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Query filters for searching distinct record types which\nshared common fields\n"
    },
    "ShoppingCartCheckout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderAction"
      }, {
        "type" : "object",
        "properties" : {
          "deliveryAddress" : {
            "description" : "The address used for delivery in this specific order. The fields `name`, `defaultAddress` and `hidden` are ignored.\n",
            "$ref" : "#/definitions/AddressNew"
          },
          "deliveryMethod" : {
            "type" : "string",
            "description" : "The id of the selected delivery method (if any) \n"
          },
          "paymentType" : {
            "type" : "string",
            "description" : "Either the internal name or id of the selected payment type.\n"
          }
        }
      } ],
      "description" : "Contains data required to check-out a shopping cart"
    },
    "ShoppingCartCheckoutError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Possible errors when checking out a shopping cart. Possible values are:\n* insufficientBalance: The origin account of the selected payment type used to make the amount reservation does not have enough balance.\n* products: There was an error related to the products contained in he shopping cart.\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.\n",
            "$ref" : "#/definitions/ShoppingCartCheckoutErrorCode"
          },
          "shoppingCartError" : {
            "description" : "The `ShoppingCartError` generated when the products in the cart were being validated.  Only if `code` is `products`.\n",
            "$ref" : "#/definitions/ShoppingCartError"
          }
        }
      } ],
      "description" : "Error when check-out a shopping cart."
    },
    "ShoppingCartDataForCheckout" : {
      "type" : "object",
      "properties" : {
        "cart" : {
          "description" : "The cart containing the currency and items.",
          "$ref" : "#/definitions/ShoppingCartView"
        },
        "paymentTypes" : {
          "type" : "array",
          "description" : "Contains the allowed payment types.",
          "items" : {
            "$ref" : "#/definitions/TransferType"
          }
        },
        "deliveryMethods" : {
          "type" : "array",
          "description" : "The list of delivery method commons to all of the products added to the  shopping cart ordered by name.\n",
          "items" : {
            "$ref" : "#/definitions/AdDeliveryMethod"
          }
        },
        "addressConfiguration" : {
          "description" : "Configuration data for addresses.",
          "$ref" : "#/definitions/AddressConfiguration"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        },
        "addresses" : {
          "type" : "array",
          "description" : "The addresses the logged user (i.e the buyer) has.\n",
          "items" : {
            "$ref" : "#/definitions/Address"
          }
        }
      },
      "description" : "Confiugration data need to check-out a shopping cart.\n"
    },
    "ShoppingCartError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Possible errors when interacting with a shopping cart. Possible values are:\n* canNotBuyFromSeller: The authenticated user is not visible by the webshop's seller\n* notEnoughStock: There is not enough stock of the webshop ad to fulfill the requested quantity\n* unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information. \n",
            "$ref" : "#/definitions/ShoppingCartErrorCode"
          },
          "ad" : {
            "description" : "The webshop ad for which there is not enough stock.  Only if `code` is `notEnoughStock`\n",
            "$ref" : "#/definitions/WebshopAd"
          },
          "seller" : {
            "description" : "The seller whose webshop ad can not be bought. Only if `code` is `canNotBuyFromSeller`\n",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Error when interacting with the shopping cart."
    },
    "ShoppingCartItem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseOrderItem"
      }, {
        "type" : "object",
        "properties" : {
          "priceWhenAdded" : {
            "type" : "string",
            "format" : "number",
            "description" : "The current product price at the moment of add it to the shopping cart.  Be carefull, this could not be the same price finally charged at  check-out (e.g because the promotional period has finished).  It could be used to show a warning message to the client indicating  the price has changed if it is different from the current price of the `product`.\n"
          },
          "price" : {
            "type" : "string",
            "format" : "number",
            "description" : "The regular price."
          },
          "promotionalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The promotional price (aka the current price). if it is present then  that is the current price that would be charged at check-out.  Otherwise would be the `price`.  Only present if it is defined and the promotional period has not  yet finished. \n"
          }
        }
      } ],
      "description" : "An item in a shopping cart."
    },
    "ShoppingCartItemDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ShoppingCartItem"
      }, {
        "type" : "object",
        "properties" : {
          "totalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The total price for this item, i.e the curent price of the product multiplied by its corresponding quantity. \n"
          },
          "availability" : {
            "description" : "The possible status of a webshop advertisement in relation to its availability  Possible values are:\n* available: The webshop advertisement is available and can be purchased\n* outOfStock: The webshop advertisement is now out of stock\n* unavailable: The webshop advertisement has been made unavailable and cannot be purchased anymore \n",
            "$ref" : "#/definitions/ShoppingCartItemAvailabilityEnum"
          },
          "quantityAdjustment" : {
            "description" : "The possible adjustments to a quantity-limited product added to shopping cart Possible values are:\n* max: The quantity was reduced to honor the maximum allowed quantity\n* min: The quantity was raised to honor the minimum allowed quantity\n* stock: The quantity was reduced to the maximum available stock quantity\n",
            "$ref" : "#/definitions/ShoppingCartItemQuantityAdjustmentEnum"
          }
        }
      } ],
      "description" : "Detailed information of a shopping cart item."
    },
    "ShoppingCartResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseShoppingCart"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "The webshop ads added to the cart.",
            "items" : {
              "$ref" : "#/definitions/ShoppingCartItem"
            }
          }
        }
      } ],
      "description" : "Represents a group of webshop ads offered by the same seller and in the same currency.\n"
    },
    "ShoppingCartView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseShoppingCart"
      }, {
        "type" : "object",
        "properties" : {
          "totalPrice" : {
            "type" : "string",
            "format" : "number",
            "description" : "The total price of this cart, i.e the sum of the total price of all  of its `items`.\n"
          },
          "items" : {
            "type" : "array",
            "description" : "Detailed information of the items present in the cart.",
            "items" : {
              "$ref" : "#/definitions/ShoppingCartItemDetailed"
            }
          }
        }
      } ],
      "description" : "Represents a group of webshop ads offered by the same seller and in the same currency.\n"
    },
    "StoredFile" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "contentType" : {
            "type" : "string",
            "description" : "MIME type of the stored file"
          },
          "length" : {
            "type" : "integer",
            "description" : "The file size, in bytes"
          },
          "url" : {
            "type" : "string",
            "description" : "The URL for getting the content of this file"
          }
        }
      } ],
      "description" : "Contains data about a stored file"
    },
    "ThemeUIElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UIElementWithContent"
      }, {
        "type" : "object",
        "properties" : {
          "definitions" : {
            "type" : "string",
            "description" : "Base LESS variables."
          },
          "advancedDefinitions" : {
            "type" : "string",
            "description" : "Advanced (based on the base ones) LESS variables."
          },
          "customStyle" : {
            "type" : "string",
            "description" : "Customized CSS."
          }
        }
      } ],
      "description" : "UI element containing wether the content or the components.\n"
    },
    "TicketApprovalResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "ticketNumber" : {
            "type" : "string",
            "description" : "The ticket number identifier."
          },
          "ticketStatus" : {
            "description" : "The status of a ticket Possible values are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
            "$ref" : "#/definitions/TicketStatusEnum"
          },
          "cancelUrl" : {
            "type" : "string",
            "description" : "The URL to redirect when canceling the accept ticket flow"
          },
          "successUrl" : {
            "type" : "string",
            "description" : "The URL to redirect after successfully accepting a ticket"
          },
          "transaction" : {
            "description" : "The generated payment. Only if `status` is `processed`.\n",
            "$ref" : "#/definitions/Transaction"
          }
        }
      } ],
      "description" : "Ticket approval result."
    },
    "TicketNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PerformBaseTransaction"
      }, {
        "type" : "object",
        "properties" : {
          "payer" : {
            "type" : "string",
            "description" : "An identification for the user which will pay the ticket. Is optional, and in most cases, should be left empty. If empty, at the moment the client will pay the ticket, both user identification and password will be entered, and the ticket will be confirmed. If specified, when confirming, only that user will be able to pay the ticket. \n"
          },
          "cancelUrl" : {
            "type" : "string",
            "description" : "The url to redirect when canceling the approve ticket flow. If an `orderId` is given then it will be added as a query parameter to this url when redirect as well as the ticket number too.\n"
          },
          "successUrl" : {
            "type" : "string",
            "description" : "The url to redirect after successful approving a ticket.  If an `orderId` is given then it will be added as a query parameter to this url when redirect as well as the ticket number too.\n"
          },
          "successWebhook" : {
            "type" : "string",
            "description" : "The url to be invoked by the server after successfully approving a  ticket. If an `orderId` is given then it will be added as a query parameter to this url when redirect as well as the ticket number too.          \n"
          },
          "orderId" : {
            "type" : "string",
            "description" : "An optional order identifier given by the ticket's creator. If given  then that identifier will be used at ticket processing to ensure the  ticket is for that order. This attribute is usefull in case the client doesn't want to reflect  the generated ticket number in its database after creating the ticket,\n"
          },
          "expiresAfter" : {
            "description" : "Defines the expiration interval. If none is given, it is assumed that the ticket expires in one day.\n",
            "$ref" : "#/definitions/TimeInterval"
          }
        }
      } ],
      "description" : "Contain the information to create a new ticket for the logged user\n"
    },
    "TicketPreview" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PaymentPreview"
      }, {
        "type" : "object",
        "properties" : {
          "cancelUrl" : {
            "type" : "string",
            "description" : "The URL to redirect when canceling the accept ticket flow"
          },
          "successUrl" : {
            "type" : "string",
            "description" : "The URL to redirect after successfully accepting a ticket"
          }
        }
      } ]
    },
    "TicketProcessResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "ticketNumber" : {
            "type" : "string",
            "description" : "The ticket number identifier."
          },
          "actuallyProcessed" : {
            "type" : "boolean",
            "description" : "Flag indicating if the ticket was processed by this invocation or the ticket was already processed in a previous invocation. This will only  be true for the first invocation of the `process` service method.\n"
          },
          "transaction" : {
            "description" : "The generated payment.",
            "$ref" : "#/definitions/Transaction"
          }
        }
      } ],
      "description" : "Ticket process result."
    },
    "TicketsPermissions" : {
      "type" : "object",
      "properties" : {
        "view" : {
          "type" : "boolean",
          "description" : "Can view tickets?"
        },
        "create" : {
          "type" : "boolean",
          "description" : "Can create tickets?"
        },
        "cancel" : {
          "type" : "boolean",
          "description" : "Can cancel tickets?"
        },
        "accept" : {
          "type" : "boolean",
          "description" : "(Deprecated) Can accept tickets from others?",
          "x-deprecated" : "Use `approve` instead",
          "x-remove-version" : 4.12
        },
        "approve" : {
          "type" : "boolean",
          "description" : "Can approve tickets from others?"
        }
      },
      "description" : "Permissions over own tickets"
    },
    "TimeInterval" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "integer",
          "description" : "The amount of time units"
        },
        "field" : {
          "description" : "Determines a time field, such as seconds, hours or months Possible values are:\n* days: Day(s)\n* hours: Hour(s)\n* millis: Millisecond(s)\n* minutes: Minute(s)\n* months: Month(s)\n* seconds: Second(s)\n* weeks: Week(s)\n* years: Year(s)\n",
          "$ref" : "#/definitions/TimeFieldEnum"
        }
      },
      "description" : "Represents a time interval such as 1 month, 3 weeks, 12 months, etc.\n"
    },
    "Token" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The reference to the NFC token type",
            "$ref" : "#/definitions/TokenType"
          },
          "value" : {
            "type" : "string",
            "description" : "The token value only if not NFC. Othwise the token's label.  \n"
          }
        }
      } ],
      "description" : "Contains reference to a token. Tokens are used to identify users.\n"
    },
    "TokenDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Token"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The possible statuses for a token Possible values are:\n* activationExpired: The token has exceeded the activation deadline.\n* active: The token is active and can be used.\n* blocked: The token is blocked from being used.\n* canceled: The token is canceled and cannot be used.\n* expired: The token has exceeded the expiration date.\n* pending: The token has been assigned to an user, but it's still pending for activation.\n* unassigned: The token is not assigned to an user.\n",
            "$ref" : "#/definitions/TokenStatusEnum"
          },
          "user" : {
            "description" : "The assigned user. Only if status is not `unassigned`.",
            "$ref" : "#/definitions/User"
          },
          "activationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the owner user activated the token.\n"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The creation date."
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The expiration date. Only if the corresponding token type defines an expiration period."
          }
        }
      } ],
      "description" : "Contain all the information of a token.\n"
    },
    "TokenType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "physicalType" : {
            "description" : "The possible physical type for tokens. Determines how applications interact with hardware in order to read the token value. Possible values are:\n* barcode: A 1d barcode printed on a card\n* nfcDevice: A phone (or other device) with NFC support\n* nfcTag: A NFC tag, normally a DESFire NFC card\n* other: Other\n* qrCode: A QR-code\n* swipe: A swipe card\n",
            "$ref" : "#/definitions/PhysicalTokenTypeEnum"
          },
          "mask" : {
            "type" : "string",
            "description" : "In case the token value is entered by users or formatted, this is\nthe (optional) mask to be used.\n"
          }
        }
      } ],
      "description" : "A reference to a token type\n"
    },
    "TokensPermissions" : {
      "type" : "object",
      "properties" : {
        "nfc" : {
          "type" : "array",
          "description" : "Permissions over each visible nfc token type",
          "items" : {
            "$ref" : "#/definitions/NfcTokenPermissions"
          }
        }
      },
      "description" : "Permissions over tokens"
    },
    "Transaction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "display" : {
            "type" : "string",
            "description" : "The descriptive text for this transaction, according to the transaction\ntype and currency configuration in Cyclos \n"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "The transaction number identifying this balance transfer. The\ncurrency configuration has the definition on whether transaction\nnumbers are enabled and which format they have.\n"
          },
          "kind" : {
            "description" : "The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are:\n* chargeback: Chargeback of a given transfer\n* externalPayment: A payment to an external user\n* import: An imported transaction\n* order: Transaction generated by confirming an order\n* payment: A direct payment\n* paymentRequest: A request for another user to accept a payment \n* recurringPayment: A payment which is processed again periodically\n* scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments\n* ticket: A payment whose the payer is unknown\n",
            "$ref" : "#/definitions/TransactionKind"
          },
          "ticketNumber" : {
            "type" : "string",
            "description" : "A 32-length alphanumeric ticket identifier. Only returned if kind \nis `ticket`.\n"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The transfer date and time"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The transfer amount. May be positive or negative."
          },
          "fromKind" : {
            "description" : "The from account kind",
            "$ref" : "#/definitions/AccountKind"
          },
          "fromUser" : {
            "description" : "The user that performed this transaction. Is only returned if\n`fromKind` is `user`.\n",
            "$ref" : "#/definitions/User"
          },
          "toKind" : {
            "description" : "The to account kind",
            "$ref" : "#/definitions/AccountKind"
          },
          "toUser" : {
            "description" : "The user that performed this transaction. Is only returned if\n`toKind` is `user`.\n",
            "$ref" : "#/definitions/User"
          },
          "type" : {
            "description" : "The transaction type",
            "$ref" : "#/definitions/TransferType"
          },
          "currency" : {
            "description" : "The transaction currency. Is only returned if this object is not\nembedded in a `TransferView`.\n",
            "$ref" : "#/definitions/Currency"
          },
          "authorizationStatus" : {
            "description" : "The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are:\n* authorized: The transaction was fully authorized and is processed\n* canceled: The authorization submission was canceled by the submitter\n* denied: The authorization was denied\n* pending: The transaction is pending authorization\n",
            "$ref" : "#/definitions/TransactionAuthorizationStatusEnum"
          },
          "description" : {
            "type" : "string",
            "description" : "The transaction description. Is optional."
          }
        }
      } ],
      "description" : "Reference to a transaction"
    },
    "TransactionAuthorization" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "action" : {
            "description" : "The performed action",
            "$ref" : "#/definitions/TransactionAuthorizationActionEnum"
          },
          "by" : {
            "description" : "The user that performed the authorization action",
            "$ref" : "#/definitions/User"
          },
          "comments" : {
            "type" : "string",
            "description" : "The authorizer's comment."
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the authorization was made."
          },
          "level" : {
            "type" : "integer",
            "description" : "The level number."
          }
        }
      } ],
      "description" : "Contains details of an authorization."
    },
    "TransactionAuthorizationLevelData" : {
      "type" : "object",
      "properties" : {
        "allowBroker" : {
          "type" : "boolean",
          "description" : "Indicates that any of the payer's brokers can authorize this level."
        },
        "allowPayer" : {
          "type" : "boolean",
          "description" : "Indicates that the payer can authorize this level."
        },
        "allowReceiver" : {
          "type" : "boolean",
          "description" : "Indicates that the payer can authorize this level."
        },
        "allowAdmin" : {
          "type" : "boolean",
          "description" : "Indicates that an administrator can authorize this level."
        },
        "brokers" : {
          "type" : "array",
          "description" : "Contains the brokers that can authorize this level.",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        }
      },
      "description" : "Contains detailed data of a payment's authorization level.\n"
    },
    "TransactionAuthorizationPermissions" : {
      "type" : "object",
      "properties" : {
        "authorize" : {
          "type" : "boolean",
          "description" : "The payment can be authorized."
        },
        "deny" : {
          "type" : "boolean",
          "description" : "The payment can be denied."
        },
        "cancel" : {
          "type" : "boolean",
          "description" : "The payment can be cenceled regardless the current authorization level."
        }
      },
      "description" : "Permissions the user has over a pending payment."
    },
    "TransactionAuthorizationsPermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TransactionAuthorizationPermissions"
      }, {
        "type" : "object",
        "properties" : {
          "view" : {
            "type" : "boolean",
            "description" : "Can view own authorized payments?"
          }
        }
      } ],
      "description" : "Permissions over own authorized payments"
    },
    "TransactionDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "accountTypes" : {
            "type" : "array",
            "description" : "Visible account types from the given owner",
            "items" : {
              "$ref" : "#/definitions/AccountType"
            }
          },
          "canViewAuthorized" : {
            "type" : "boolean",
            "description" : "Can the authenticated user view authorized transactions of this owner? \n"
          },
          "canViewScheduled" : {
            "type" : "boolean",
            "description" : "Can the authenticated user view scheduled payments of this owner? \n",
            "x-deprecated" : "Use `visibleKinds` instead.\n",
            "x-remove-version" : 4.13
          },
          "visibleKinds" : {
            "type" : "array",
            "description" : "Contains the transaction kinds the authenticated user can view over\nthis owner. \n",
            "items" : {
              "$ref" : "#/definitions/TransactionKind"
            }
          },
          "query" : {
            "description" : "Default query filters for the transactions search\n",
            "$ref" : "#/definitions/TransactionQueryFilters"
          }
        }
      } ],
      "description" : "Contains data used to search transactions for a given owner"
    },
    "TransactionPreview" : {
      "type" : "object",
      "properties" : {
        "confirmationMessage" : {
          "type" : "string",
          "description" : "If configured in the payment type, is a message to be shown to the\nuser before confirming the transaction\n"
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        },
        "paymentType" : {
          "description" : "The payment type reference",
          "$ref" : "#/definitions/TransferType"
        },
        "currency" : {
          "description" : "The currency of the payment",
          "$ref" : "#/definitions/Currency"
        },
        "fromAccount" : {
          "description" : "A reference to the origin account",
          "$ref" : "#/definitions/AccountWithOwner"
        },
        "totalAmount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The final amount charged to the payer including fees."
        },
        "customValues" : {
          "type" : "array",
          "description" : "The list of custom field values, in a detailed view",
          "items" : {
            "$ref" : "#/definitions/CustomFieldValue"
          }
        }
      },
      "description" : "Base definitions for a preview before performing a transaction"
    },
    "TransactionQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "accountTypes" : {
            "type" : "array",
            "description" : "The account types",
            "items" : {
              "type" : "string"
            }
          },
          "direction" : {
            "description" : "Indicates whether from an account POV a transfer is a credit or debit Possible values are:\n* credit: The transfer impacts the balance positively\n* debit: The transfer impacts the balance negatively\n",
            "$ref" : "#/definitions/TransferDirectionEnum"
          },
          "kinds" : {
            "type" : "array",
            "description" : "The kind of a transaction  Possibles values for each array element are:\n* chargeback: Chargeback of a given transfer\n* externalPayment: A payment to an external user\n* import: An imported transaction\n* order: Transaction generated by confirming an order\n* payment: A direct payment\n* paymentRequest: A request for another user to accept a payment \n* recurringPayment: A payment which is processed again periodically\n* scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments\n* ticket: A payment whose the payer is unknown\n",
            "items" : {
              "$ref" : "#/definitions/TransactionKind"
            }
          },
          "authorizationStatuses" : {
            "type" : "array",
            "description" : "Authorization statuses used as search criteria Possibles values for each array element are:\n* authorized: The transaction was fully authorized and is processed\n* canceled: The authorization submission was canceled by the submitter\n* denied: The authorization was denied\n* pending: The transaction is pending authorization\n",
            "items" : {
              "$ref" : "#/definitions/TransactionAuthorizationStatusEnum"
            }
          },
          "ticketStatuses" : {
            "type" : "array",
            "description" : "Statuses used as search criteria applied only to transactions of kind `ticket`. Possibles values for each array element are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
            "items" : {
              "$ref" : "#/definitions/TicketStatusEnum"
            }
          },
          "recurringPaymentStatuses" : {
            "type" : "array",
            "description" : "Statuses used as search criteria applied only to transactions of kind `recurringPayment`. Possibles values for each array element are:\n* canceled: The recurring payment was manually canceled\n* closed: The recurring payment is closed, as the last scheduled occurrence was processed\n* open: The recurring payment is open, as there are more future occurrences\n",
            "items" : {
              "$ref" : "#/definitions/RecurringPaymentStatusEnum"
            }
          },
          "scheduledPaymentStatuses" : {
            "type" : "array",
            "description" : "Statuses used as search criteria applied only to transactions of kind `scheduledPayment`. Possibles values for each array element are:\n* blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again\n* canceled: The scheduled payment, as well as all open installments were canceled\n* closed: The scheduled payment is closed\n* open: The scheduled payment has open installments\n",
            "items" : {
              "$ref" : "#/definitions/ScheduledPaymentStatusEnum"
            }
          },
          "paymentRequestStatuses" : {
            "type" : "array",
            "description" : "Statuses used as search criteria applied only to transactions of kind `paymentRequest`.   Possibles values for each array element are:\n* canceled: The payment request was canceled\n* denied: The payment request was denied by the receiver\n* expired: The payment request has expired - the received did not respond until the expiration date\n* open: The payment request is open and can be accepted\n* processed: The payment request was processed, and either a direct or scheduled payment was created from it\n* scheduled: The payment request has been accepted, and scheduled for processing on a future date\n",
            "items" : {
              "$ref" : "#/definitions/PaymentRequestStatusEnum"
            }
          },
          "externalPaymentStatuses" : {
            "type" : "array",
            "description" : "Statuses used as search criteria applied only to transactions of kind `externalPayment`.   Possibles values for each array element are:\n* canceled: The external payment was canceled\n* expired: The external payment has expired without the destination user activation\n* failed: The external payment has failed processing\n* pending: The external payment is pending, awaiting the destination user to be activated in Cyclos\n* processed: The external payment was processed, and the destination payment was created\n",
            "items" : {
              "$ref" : "#/definitions/ExternalPaymentStatusEnum"
            }
          }
        }
      } ],
      "description" : "Query filters for transactions"
    },
    "TransactionResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are:\n* chargeback: Chargeback of a given transfer\n* externalPayment: A payment to an external user\n* import: An imported transaction\n* order: Transaction generated by confirming an order\n* payment: A direct payment\n* paymentRequest: A request for another user to accept a payment \n* recurringPayment: A payment which is processed again periodically\n* scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments\n* ticket: A payment whose the payer is unknown\n",
            "$ref" : "#/definitions/TransactionKind"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "The transaction number identifying this balance transfer. The\ncurrency configuration has the definition on whether transaction\nnumbers are enabled and which format they have.\n"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The transfer date and time"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The transfer amount. May be positive or negative."
          },
          "relatedKind" : {
            "description" : "The related account owner kind",
            "$ref" : "#/definitions/AccountKind"
          },
          "relatedUser" : {
            "description" : "The user that either performed or received this transaction.\nIs only returned if `relatedKind` is `user`.\n",
            "$ref" : "#/definitions/User"
          },
          "type" : {
            "description" : "The transaction type",
            "$ref" : "#/definitions/TransferType"
          },
          "currency" : {
            "type" : "string",
            "description" : "Either internal name or id of the transaction currency.\n"
          },
          "authorizationStatus" : {
            "description" : "The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are:\n* authorized: The transaction was fully authorized and is processed\n* canceled: The authorization submission was canceled by the submitter\n* denied: The authorization was denied\n* pending: The transaction is pending authorization\n",
            "$ref" : "#/definitions/TransactionAuthorizationStatusEnum"
          },
          "description" : {
            "type" : "string",
            "description" : "The transaction description. Is optional."
          },
          "installmentCount" : {
            "type" : "integer",
            "description" : "The total number of installments. Only returned if `kind` is `scheduledPayment`.\n"
          },
          "processedInstallments" : {
            "type" : "integer",
            "description" : "The number of processed installments. Only returned if `kind` is `scheduledPayment`.\n"
          },
          "scheduledPaymentStatus" : {
            "description" : "The scheduled payment status. Only returned if `kind` is `scheduledPayment`. Possible values are:\n* blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again\n* canceled: The scheduled payment, as well as all open installments were canceled\n* closed: The scheduled payment is closed\n* open: The scheduled payment has open installments\n",
            "$ref" : "#/definitions/ScheduledPaymentStatusEnum"
          },
          "nextOccurrenceDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the next recurring payment occurrence will be processed. Only returned if `kind` is `recurringPayment`.\n"
          },
          "recurringPaymentStatus" : {
            "description" : "The recurring payment status. Only returned if `kind` is `recurringPayment`. Possible values are:\n* canceled: The recurring payment was manually canceled\n* closed: The recurring payment is closed, as the last scheduled occurrence was processed\n* open: The recurring payment is open, as there are more future occurrences\n",
            "$ref" : "#/definitions/RecurringPaymentStatusEnum"
          },
          "paymentRequestStatus" : {
            "description" : "The ticket status. Only returned if `kind` is `ticket`. Possible values are:\n* canceled: The payment request was canceled\n* denied: The payment request was denied by the receiver\n* expired: The payment request has expired - the received did not respond until the expiration date\n* open: The payment request is open and can be accepted\n* processed: The payment request was processed, and either a direct or scheduled payment was created from it\n* scheduled: The payment request has been accepted, and scheduled for processing on a future date\n",
            "$ref" : "#/definitions/PaymentRequestStatusEnum"
          },
          "ticketStatus" : {
            "description" : "The ticket status. Only returned if `kind` is `ticket`. Possible values are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
            "$ref" : "#/definitions/TicketStatusEnum"
          },
          "toPrincipalType" : {
            "description" : "The principal type an external payment was sent to. Only returned if `kind` is `externalPayment`.\n",
            "$ref" : "#/definitions/EntityReference"
          },
          "toPrincipalValue" : {
            "type" : "string",
            "description" : "The principal to which an external payment was sent to. Only returned if `kind` is `externalPayment`.\n"
          },
          "externalPaymentStatus" : {
            "description" : "The external payment status. Only returned if `kind` is `externalPayment`. Possible values are:\n* canceled: The external payment was canceled\n* expired: The external payment has expired without the destination user activation\n* failed: The external payment has failed processing\n* pending: The external payment is pending, awaiting the destination user to be activated in Cyclos\n* processed: The external payment was processed, and the destination payment was created\n",
            "$ref" : "#/definitions/ExternalPaymentStatusEnum"
          }
        }
      } ],
      "description" : "Represents a transaction, as viewed from the point-of-view of an account\nowner. This means that credits will have a positive amount, while debits\nwill be negative.\n"
    },
    "TransactionTypeData" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "The payment type currency",
            "$ref" : "#/definitions/Currency"
          },
          "fixedAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The only allowed amount if the payment type uses a fixed amount\n"
          },
          "allowsRecurringPayments" : {
            "type" : "boolean",
            "description" : "Can payments of this type be made recurring?\n"
          },
          "maxInstallments" : {
            "type" : "integer",
            "description" : "The maximum allowed installments. If it is zero, no kind of scheduled\npayments is allowed. If it is 1, a single future date can be used.\n"
          },
          "requiresDescription" : {
            "type" : "boolean",
            "description" : "The transaction description can be either required, or optional, depending on this setting.",
            "x-deprecated" : "Use `descriptionAvailability` instead\n",
            "x-remove-version" : 4.13
          },
          "descriptionAvailability" : {
            "description" : "The availability for the transaction description           Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
            "$ref" : "#/definitions/AvailabilityEnum"
          },
          "defaultExpirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The default expiration date, according to the configuration. Only for payment requests."
          },
          "hideExpirationDate" : {
            "type" : "boolean",
            "description" : "Whether the expiration date should be hidden from users, Only for payment requests."
          },
          "customFields" : {
            "type" : "array",
            "description" : "The custom fields related to this payment type",
            "items" : {
              "$ref" : "#/definitions/CustomFieldDetailed"
            }
          },
          "ARate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance aging counter used for this payment. Only for payments.\n"
          },
          "DRate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance maturity used for this payment. Only for payments.\n"
          },
          "DRateCreationValue" : {
            "type" : "string",
            "format" : "number",
            "description" : "The initial value for the balance maturity on this payment type.\nOnly for payments.\n"
          },
          "limitedAwaitingAuthorization" : {
            "type" : "boolean",
            "description" : "Only for payments."
          },
          "noNegativesMaturityPolicy" : {
            "type" : "boolean",
            "description" : "Only for payments."
          },
          "maturityPolicy" : {
            "description" : "Only for payments. Possible values are:\n* always: The payment can always be performed, regardless its maturity\n* history: It the balance maturity ever reached zero in the past, that balance can be used on payment. If later on the maturity went above zero, that new balance cannot be used. Is normally used in conjunction with the maturity table, so the user can pick the balance from past maturity\n* zero: The payment can only be performed if the current maturity is zero\n",
            "$ref" : "#/definitions/MaturityPolicyEnum"
          },
          "maxAmountByMaturityPolicy" : {
            "type" : "string",
            "format" : "number",
            "description" : "The maximum amount that can be performed when `maturityPolicy` is `history`. It corresponds to the maturity table entry indicated by `maturityTableWinnerId`. Only for payments.\n"
          },
          "maturityTableWinnerId" : {
            "type" : "string",
            "description" : "When `maturityPolicy` is `history`, contains the id of the maturity table entry that granted. Only for payments.\n"
          }
        }
      } ],
      "description" : "Contains definitions regarding a given payment type when performing a\ntransaction (payment or payment request).\n"
    },
    "TransactionView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Transaction"
      }, {
        "type" : "object",
        "properties" : {
          "channel" : {
            "description" : "The channel this transaction was performed on",
            "$ref" : "#/definitions/EntityReference"
          },
          "accessClient" : {
            "description" : "The access client in use when this transaction was performed\n",
            "$ref" : "#/definitions/EntityReference"
          },
          "usersWhichCanAddToContacts" : {
            "description" : "Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are:\n* both: Reference to both from and to subjects of the transaction\n* from: Reference to the transaction from\n* none: Reference to none of the transaction subjects\n* to: Reference to the transaction to\n",
            "$ref" : "#/definitions/TransactionSubjectsEnum"
          },
          "usersWhichCanViewProfile" : {
            "description" : "Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are:\n* both: Reference to both from and to subjects of the transaction\n* from: Reference to the transaction from\n* none: Reference to none of the transaction subjects\n* to: Reference to the transaction to\n",
            "$ref" : "#/definitions/TransactionSubjectsEnum"
          },
          "by" : {
            "description" : "The user that actually performed the action.\nMay be different than the from, for example, an administrator\ncan perform payments in behalf of other users\n",
            "$ref" : "#/definitions/User"
          },
          "receivedBy" : {
            "description" : "The operator that actually received the payment. \nOnly available if some other user has paid directly to it \nor the operator has received the payment vía POS.\n",
            "$ref" : "#/definitions/User"
          },
          "received" : {
            "type" : "boolean",
            "description" : "True if the payment was received vía POS.\n"
          },
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values",
            "items" : {
              "$ref" : "#/definitions/CustomFieldValue"
            }
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          },
          "authorizationType" : {
            "description" : "Defines which kind of authorization a transaction is through. Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Possible values are:\n* level: A transaction is going through some authorization level\n* operator: An operator performed a payment that needs to be authorized by his member or other operators\n",
            "$ref" : "#/definitions/TransactionAuthorizationTypeEnum"
          },
          "authorizationLevelData" : {
            "description" : "Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Contains data related to the current autorization level that can be authorized / denied.\n",
            "$ref" : "#/definitions/TransactionAuthorizationLevelData"
          },
          "authorizationPermissions" : {
            "description" : "Permissions the authenticated user has over this payment regarding authorizations.",
            "$ref" : "#/definitions/TransactionAuthorizationPermissions"
          },
          "authorizations" : {
            "type" : "array",
            "description" : "Contains the details of the authorizations this payment has (for the previous levels). To see the final status of the payment please check the `authorizationStatus` property. \n",
            "items" : {
              "$ref" : "#/definitions/TransactionAuthorization"
            }
          },
          "transfer" : {
            "description" : "Only returned if the `kind` is `payment`. This is the transfer generated when the payment was processed. Will be null if the went through authorization and was not authorized. Only returned if this `TransactionView` is not already in a `TransactionView`. \n",
            "$ref" : "#/definitions/TransferView"
          },
          "scheduledPaymentStatus" : {
            "description" : "The status of a scheduled payment Possible values are:\n* blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again\n* canceled: The scheduled payment, as well as all open installments were canceled\n* closed: The scheduled payment is closed\n* open: The scheduled payment has open installments\n",
            "$ref" : "#/definitions/ScheduledPaymentStatusEnum"
          },
          "scheduledPaymentPermissions" : {
            "description" : "Only returned if the `kind` is `scheduledPayment`. Permissions over the scheduled payment.   \n",
            "$ref" : "#/definitions/ScheduledPaymentPermissions"
          },
          "dueAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "Only returned if the `kind` is `scheduledPayment`. Means the amount that is still needs to be paid until the last installment.\n"
          },
          "installments" : {
            "type" : "array",
            "description" : "Only returned if the `kind` is `scheduledPayment`. Contains the installment references.\n",
            "items" : {
              "$ref" : "#/definitions/ScheduledPaymentInstallmentView"
            }
          },
          "recurringPaymentStatus" : {
            "description" : "The status of a recurring payment Possible values are:\n* canceled: The recurring payment was manually canceled\n* closed: The recurring payment is closed, as the last scheduled occurrence was processed\n* open: The recurring payment is open, as there are more future occurrences\n",
            "$ref" : "#/definitions/RecurringPaymentStatusEnum"
          },
          "recurringPaymentPermissions" : {
            "description" : "Only returned if the `kind` is `recurringPayment`. Permissions over the scheduled payment.   \n",
            "$ref" : "#/definitions/RecurringPaymentPermissions"
          },
          "nextOccurrenceDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Only returned if the `kind` is `recurringPayment`. The scheduled date for the next occurrence.\n"
          },
          "occurrenceInterval" : {
            "description" : "Only returned if the `kind` is `recurringPayment`. The interval between occurrences.\n",
            "$ref" : "#/definitions/TimeInterval"
          },
          "occurrencesCount" : {
            "type" : "integer",
            "description" : "Only returned if the `kind` is `recurringPayment`. The programmed number of occurrences. If not set, means the payment will be processed until manually canceled.\n"
          },
          "occurrences" : {
            "type" : "array",
            "description" : "Only returned if the `kind` is `recurringPayment`. A list with all occurrences this payment has.\n",
            "items" : {
              "$ref" : "#/definitions/RecurringPaymentOccurrenceView"
            }
          },
          "originalTransfer" : {
            "description" : "Only returned if the `kind` is `chargeback`. This is the original transfer that has been charged back.\n",
            "$ref" : "#/definitions/Transfer"
          },
          "chargebackTransfer" : {
            "description" : "Only returned if the `kind` is `chargeback`. This is the transfer which performed the chargeback.\n",
            "$ref" : "#/definitions/Transfer"
          },
          "paymentRequestStatus" : {
            "description" : "The status of a payment request Possible values are:\n* canceled: The payment request was canceled\n* denied: The payment request was denied by the receiver\n* expired: The payment request has expired - the received did not respond until the expiration date\n* open: The payment request is open and can be accepted\n* processed: The payment request was processed, and either a direct or scheduled payment was created from it\n* scheduled: The payment request has been accepted, and scheduled for processing on a future date\n",
            "$ref" : "#/definitions/PaymentRequestStatusEnum"
          },
          "paymentRequestPermissions" : {
            "description" : "Permissions the user has over this payment request.",
            "$ref" : "#/definitions/PaymentRequestPermissions"
          },
          "comments" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is either `paymentRequest` or `externalPayment`. The comments the user informed when performing the payment.\n"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user. \n"
          },
          "changeExpirationDateComments" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is `paymentRequest`. The comments the user informed when changing the expiration date.\n"
          },
          "processDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Only returned if the `kind` is either `paymentRequest`, `ticket` or `externalPayment` and `status` is `processed`. The date the payment request / ticket was accepted.\n"
          },
          "transaction" : {
            "description" : "Only returned if the `kind` is `paymentRequest`, `ticket` or `externalPayment`  and `status` is `processed`. Reference to the transaction that was generated when processing this payment request / externalPayment / ticket.\n",
            "$ref" : "#/definitions/Transaction"
          },
          "smsCode" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is either `paymentRequest` and `status` is not `processed`. The code that can be used by the receiver to confirm this payment request via SMS operation.\n"
          },
          "scheduled" : {
            "type" : "boolean",
            "description" : "Only returned if the `kind` is `paymentRequest`. Indicates whether a scheduled payment (`true`) or a regular payment (`false`) will be generated once this payment request is confirmed.\n"
          },
          "installmentsCount" : {
            "type" : "integer",
            "description" : "Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates the number of installments to be generated.\n"
          },
          "firstInstallmentIsImmediate" : {
            "type" : "boolean",
            "description" : "Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates whether the first installment should be processed immediately when the payment request is confirmed.\n"
          },
          "externalPaymentStatus" : {
            "description" : "The status of an external payment Possible values are:\n* canceled: The external payment was canceled\n* expired: The external payment has expired without the destination user activation\n* failed: The external payment has failed processing\n* pending: The external payment is pending, awaiting the destination user to be activated in Cyclos\n* processed: The external payment was processed, and the destination payment was created\n",
            "$ref" : "#/definitions/ExternalPaymentStatusEnum"
          },
          "toPrincipalType" : {
            "description" : "Only returned if the `kind` is `externalPayment`.\nIs the user identification method for this external payment\n(for example, e-mail or mobile phone).\n",
            "$ref" : "#/definitions/EntityReference"
          },
          "toPrincipalValue" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is `externalPayment`.\nIs the user identification value for this external payment\n(for example, the e-mail or mobile phone values).\n"
          },
          "ticketStatus" : {
            "description" : "The status of a ticket Possible values are:\n* approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment\n* canceled: The ticket was canceled by the receiver before being approved\n* expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date\n* open: The ticket was created, but not approved yet\n* processed: The ticket was approved and processed and the payment was generated\n",
            "$ref" : "#/definitions/TicketStatusEnum"
          },
          "payerPrincipal" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is `ticket`, the ticket status is\n`open` and there is a fixed payer.\nIs the principal (for example, login name or e-mail) which can\nbe used to login the user, so he can accept the ticket.\n"
          },
          "cancelUrl" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is `ticket`.\nThe URL to redirect when canceling the ticket.\n"
          },
          "successUrl" : {
            "type" : "string",
            "description" : "Only returned if the `kind` is `ticket`.\nThe URL to redirect after successfully accepting a ticket\n"
          },
          "preview" : {
            "description" : "Only returned if the `kind` is `ticket` and the ticket can be\naccepted. Is the payment preview if accepting the ticket.\nThe preview will never contain a confirmation password input,\nbecause this object already contains it on the\n`confirmationPasswordInput` property, neither a payment to be sent\nback, as this payment is supposed to be confirmed by accepting\nthe ticket. Also, the preview's currency is never sent, as it is\nthe same one of the ticket.\n",
            "$ref" : "#/definitions/PaymentPreview"
          }
        }
      } ],
      "description" : "Details about a transaction\n"
    },
    "Transfer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "display" : {
            "type" : "string",
            "description" : "The descriptive text for this transfer, according to the transfer\ntype and currency configuration in Cyclos \n"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The transfer date and time"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The transfer amount. May be positive or negative."
          },
          "type" : {
            "description" : "The transfer type",
            "$ref" : "#/definitions/EntityReference"
          },
          "currency" : {
            "description" : "The transfer currency",
            "$ref" : "#/definitions/Currency"
          },
          "from" : {
            "description" : "The account that sent the balance",
            "$ref" : "#/definitions/AccountWithOwner"
          },
          "to" : {
            "description" : "The account that received the balance",
            "$ref" : "#/definitions/AccountWithOwner"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "The transaction number identifying this balance transfer. The\ncurrency configuration has the definition on whether transaction\nnumbers are enabled and which format they have.\n"
          },
          "statuses" : {
            "type" : "array",
            "description" : "Contains the current status for each status flow this transfer has\n",
            "items" : {
              "$ref" : "#/definitions/TransferStatus"
            }
          }
        }
      } ],
      "description" : "Reference to a balance transfer between accounts\n"
    },
    "TransferDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransferDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "accountTypes" : {
            "type" : "array",
            "description" : "References for the account types\n",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          },
          "currencies" : {
            "type" : "array",
            "description" : "References for the available currencies\n",
            "items" : {
              "$ref" : "#/definitions/Currency"
            }
          },
          "query" : {
            "description" : "Default query filters for the general transfers search\n",
            "$ref" : "#/definitions/TransferQueryFilters"
          }
        }
      } ],
      "description" : "Contains data for searching transfers over multiple accounts"
    },
    "TransferFeePreview" : {
      "type" : "object",
      "properties" : {
        "fee" : {
          "description" : "The transfer fee",
          "$ref" : "#/definitions/EntityReference"
        },
        "amount" : {
          "type" : "string",
          "format" : "number",
          "description" : "The transfer fee amout"
        }
      },
      "description" : "Preview of a transfer fee in case a payment is confirmed"
    },
    "TransferFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "accountType" : {
            "description" : "Reference to the account type",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Reference to a transfer filter"
    },
    "TransferQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseTransferQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "Either id or internal name of the currency"
          },
          "fromAccountType" : {
            "type" : "string",
            "description" : "Either id or internal name of the origin account type"
          },
          "toAccountType" : {
            "type" : "string",
            "description" : "Either id or internal name of the destination account type"
          }
        }
      } ],
      "description" : "Query filters for transfers"
    },
    "TransferResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Transfer"
      }, {
        "type" : "object"
      } ],
      "description" : "Result from searching transfers\n"
    },
    "TransferStatus" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "flow" : {
            "description" : "The status flow",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Reference to a status and its flow\n"
    },
    "TransferStatusFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "statuses" : {
            "type" : "array",
            "description" : "All statuses this flow has",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          }
        }
      } ],
      "description" : "A transfer status flow determines a status a transfer may have. For each\nflow the transfer participates (can be multiple) the transfer will have a\nstatus. The transition between states is also defined on the flow.\n"
    },
    "TransferStatusFlowForTransferView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "canManage" : {
            "type" : "boolean",
            "description" : "Can this status flow be managed by the authenticated user?\n"
          },
          "log" : {
            "type" : "array",
            "description" : "A log of status changes for this flow",
            "items" : {
              "$ref" : "#/definitions/TransferStatusLog"
            }
          }
        }
      } ],
      "description" : "Contains other data for a transfer status flow when viewing a transfer.\n"
    },
    "TransferStatusLog" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "by" : {
            "description" : "The user that performed the change",
            "$ref" : "#/definitions/User"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date / time the action was performed"
          },
          "status" : {
            "description" : "The new status",
            "$ref" : "#/definitions/EntityReference"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments provided by the user which performed the change\n"
          }
        }
      } ],
      "description" : "Details of a change that took place in a transfer status."
    },
    "TransferType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "from" : {
            "description" : "Reference to the source account type",
            "$ref" : "#/definitions/EntityReference"
          },
          "to" : {
            "description" : "Reference to the destination account type",
            "$ref" : "#/definitions/EntityReference"
          }
        }
      } ],
      "description" : "Reference to a transfer type"
    },
    "TransferTypeWithCurrency" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TransferType"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "The transfer type currency",
            "$ref" : "#/definitions/Currency"
          }
        }
      } ],
      "description" : "A transfer type with currency"
    },
    "TransferView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Transfer"
      }, {
        "type" : "object",
        "properties" : {
          "parent" : {
            "description" : "Reference to the parent transfer that generated this one, if any\n",
            "$ref" : "#/definitions/Transfer"
          },
          "children" : {
            "type" : "array",
            "description" : "Reference to the transfers generated by this one, if any\n",
            "items" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "chargedBackBy" : {
            "description" : "Reference to the transfer that has charged back this transfer.\nOnly returned if this transfer has been charged back.\n",
            "$ref" : "#/definitions/Transfer"
          },
          "transaction" : {
            "description" : "If this balance transfer was originated from a transaction (like\na payment or scheduled payment), contains the reference to this\ntransaction. Only returned if this `TransferView` is not already\nin a `TransactionView`.\n",
            "$ref" : "#/definitions/TransactionView"
          },
          "ARate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance aging counter"
          },
          "DRate" : {
            "type" : "string",
            "format" : "number",
            "description" : "The balance maturity"
          },
          "statusFlows" : {
            "type" : "array",
            "description" : "List with each status this transfer has, with additional\ninformation, such as the flow and the log\n",
            "items" : {
              "$ref" : "#/definitions/TransferStatusFlowForTransferView"
            }
          },
          "canChargeback" : {
            "type" : "boolean",
            "description" : "Can the authenticated user chargeback this transfer?\n"
          },
          "operations" : {
            "type" : "array",
            "description" : "The list of custom operations the logged user can run over this\ntransfer\n",
            "items" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          },
          "usersWhichCanAddToContacts" : {
            "description" : "Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are:\n* both: Reference to both from and to subjects of the transaction\n* from: Reference to the transaction from\n* none: Reference to none of the transaction subjects\n* to: Reference to the transaction to\n",
            "$ref" : "#/definitions/TransactionSubjectsEnum"
          },
          "usersWhichCanViewProfile" : {
            "description" : "Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are:\n* both: Reference to both from and to subjects of the transaction\n* from: Reference to the transaction from\n* none: Reference to none of the transaction subjects\n* to: Reference to the transaction to\n",
            "$ref" : "#/definitions/TransactionSubjectsEnum"
          }
        }
      } ],
      "description" : "Details about a balance transfer between accounts\n"
    },
    "UIElementWithContent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VersionedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "The content of this element"
          }
        }
      } ],
      "description" : "Contains definitions for a UI element that has a content"
    },
    "UnansweredAdQuestionResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AdQuestion"
      }, {
        "type" : "object"
      }, {
        "properties" : {
          "ad" : {
            "description" : "The advertisement for which the question was asked.",
            "$ref" : "#/definitions/Ad"
          }
        }
      } ],
      "description" : "An unanswered question for an advertisement.\n"
    },
    "UnauthorizedError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "description" : "Error codes for 401 Unauthorized HTTP status.  Possible values are:\n* invalidAccessClient: The access client used for access is invalid\n* invalidChannelUsage: Attempt to login on a stateless-only channel, or use stateless in a stateful-only channel, or invoke as guest in a channel configuration which is only for users\n* invalidNetwork: Attempt to access a network that has been disabled\n* loggedOut: The session token used for access is invalid\n* login: Either user identification (principal) or password are invalid. May have additional information, such as the user / password status\n* missingAuthorization: Attempt to access an operation as guest, but the operation requires authentication\n* remoteAddressBlocked: The IP address being used for access has been blocked by exceeding tries with invalid users\n* unauthorizedAddress: The user cannot access the system using an IP address that is not white-listed\n* unauthorizedUrl: The user's configuration demands access using a specific URL, and this access is being done using another one\n",
          "$ref" : "#/definitions/UnauthorizedErrorCode"
        },
        "userStatus" : {
          "description" : "May only returned when `code` is `login`. Possible values are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
          "$ref" : "#/definitions/UserStatusEnum"
        },
        "passwordStatus" : {
          "description" : "May only returned when `code` is `login`. Possible values are:\n* active: The password is active and valid\n* disabled: The password has been manually disabled\n* expired: The password is expired\n* indefinitelyBlocked: The password is blocked by exceeding the maximum attempts until it is manually unblocked\n* neverCreated: The password has never been created for the user\n* pending: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords)\n* reset: The password has been reset (can be used for login but must then be changed)\n* temporarilyBlocked: The password is temporarily blocked by exceeding the maximum attempts\n",
          "$ref" : "#/definitions/PasswordStatusEnum"
        },
        "missingSecondaryPassword" : {
          "description" : "May only returned when `code` is `login` and there is a secondary access password defined for the channel.\n",
          "$ref" : "#/definitions/PasswordType"
        }
      },
      "description" : "Error returned when a HTTP status code 401 occurs"
    },
    "User" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "display" : {
            "type" : "string",
            "description" : "Contains the formatting of the user according to the \nconfiguration. Is only returned if no profile fields are marked to\nreturn in user list\n"
          },
          "shortDisplay" : {
            "type" : "string",
            "description" : "Contains the short formatting of the user according to\nthe configuration. Is only returned if no profile fields are marked\nto return in user list\n"
          },
          "image" : {
            "description" : "The primary user profile image",
            "$ref" : "#/definitions/Image"
          },
          "user" : {
            "description" : "Is the operator owner, only returned if this user represents an\noperator. Even so, in some cases, like searching for operators of\na specific user, this field may not be returned.\n",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Basic representation of a user (both admin and regular)"
    },
    "UserAddressesListData" : {
      "type" : "object",
      "properties" : {
        "canManage" : {
          "type" : "boolean",
          "description" : "Indicates whether the addresses can be managed by the\nauthenticated user\n"
        },
        "canCreate" : {
          "type" : "boolean",
          "description" : "Indicates whether the authenticated user can create a new address\nfor this user\n"
        },
        "maxAddresses" : {
          "type" : "integer",
          "description" : "Indicates the maximum number of addresses the user can have\n"
        },
        "availability" : {
          "description" : "The availability for addresses Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "addresses" : {
          "type" : "array",
          "description" : "The address list",
          "items" : {
            "$ref" : "#/definitions/AddressResult"
          }
        }
      },
      "description" : "Contains, besides the user's addresses, additional data for its management\n"
    },
    "UserAdsDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAdDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "createNew" : {
            "type" : "boolean",
            "description" : "Indicates whether the authenticated user can create new advertisements for this user"
          },
          "maxAds" : {
            "type" : "integer",
            "description" : "The maximum number of advertisements this user can have\n"
          },
          "requiresAuthorization" : {
            "type" : "boolean",
            "description" : "Does advertisements of this user requires authorization to be \npublished for other users to see?\n"
          },
          "query" : {
            "description" : "Default query filters to search advertisements of a specific user\n",
            "$ref" : "#/definitions/UserAdsQueryFilters"
          }
        }
      } ],
      "description" : "Data for a search of advertisements of a specific user"
    },
    "UserAdsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicAdQueryFilters"
      }, {
        "type" : "object"
      } ],
      "description" : "Definitions for search filters of advertisements of a given owner search\n"
    },
    "UserAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAuth"
      }, {
        "type" : "object",
        "properties" : {
          "configuration" : {
            "description" : "The current configuration",
            "$ref" : "#/definitions/VersionedEntityReference"
          },
          "group" : {
            "description" : "The user group",
            "$ref" : "#/definitions/Group"
          }
        }
      } ],
      "description" : "Contains information returned after logging in an user.\n"
    },
    "UserBasicData" : {
      "type" : "object",
      "properties" : {
        "emailRequired" : {
          "type" : "boolean",
          "description" : "Indicates whether the e-mail is required"
        },
        "profileFieldActions" : {
          "type" : "object",
          "description" : "An object, keyed by profile field internal name (either one of the\nbasic profile fields or custom fields), containing other objects that\ndefines the allowed actions over these profile fields\n",
          "additionalProperties" : {
            "$ref" : "#/definitions/ProfileFieldActions"
          }
        },
        "customFields" : {
          "type" : "array",
          "description" : "The available custom field definitions",
          "items" : {
            "$ref" : "#/definitions/UserCustomFieldDetailed"
          }
        }
      },
      "description" : "Contains properties shared by both UserDataForNew and UserDataForEdit\n"
    },
    "UserClientTypePermissions" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "canManage" : {
            "type" : "boolean",
            "description" : "Can the authenticated user manage access clients of this type?\n"
          },
          "canCreateNew" : {
            "type" : "boolean",
            "description" : "Can the authenticated user create a new access client of this type\nand user? Maybe the maximum allowed has been reached.\n"
          },
          "hasUnassigned" : {
            "type" : "boolean",
            "description" : "Is there at least one access client for this type and user which\nis in the unassigned status?\n"
          }
        }
      } ],
      "description" : "Contains details of an access client, together with permissions over it\n"
    },
    "UserContactInfosListData" : {
      "type" : "object",
      "properties" : {
        "canManage" : {
          "type" : "boolean",
          "description" : "Indicates whether the additional contact informations can be\nmanaged by the authenticated user\n"
        },
        "canCreate" : {
          "type" : "boolean",
          "description" : "Indicates whether new additional contact informations can be\ncreated by the authenticated user\n"
        },
        "maxContactInfos" : {
          "type" : "integer",
          "description" : "Indicates the maximum number of additional contact informations\nthe user can have\n"
        },
        "availability" : {
          "description" : "The availability for additional contacts Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "customFields" : {
          "type" : "array",
          "description" : "The list of additional contact informations custom fields",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "contactInfos" : {
          "type" : "array",
          "description" : "The additional contact information list",
          "items" : {
            "$ref" : "#/definitions/ContactInfoResult"
          }
        }
      },
      "description" : "Contains, besides the user's additional contact informations,\ndata for managing them\n"
    },
    "UserContactPermissions" : {
      "type" : "object",
      "properties" : {
        "add" : {
          "type" : "boolean",
          "description" : "Can the current user be added to the contact list?"
        },
        "remove" : {
          "type" : "boolean",
          "description" : "Can the current user be removed from the contact list?"
        }
      },
      "description" : "Permissions regarding the contact list"
    },
    "UserCustomFieldDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomFieldDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "hiddenByDefault" : {
            "type" : "boolean",
            "description" : "This flag determine whether this field is hidden or not by default\n"
          }
        }
      } ],
      "description" : "Adds to `CustomFieldDetailed` some user-specific definitions\n"
    },
    "UserCustomFieldValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CustomFieldValue"
      }, {
        "type" : "object",
        "properties" : {
          "hidden" : {
            "type" : "boolean",
            "description" : "Whether this field is hidden for other users"
          }
        }
      } ],
      "description" : "Contains the custom field value information, plus the hidden flag\n"
    },
    "UserDataForEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicUserDataForEdit"
      }, {
        "type" : "object",
        "properties" : {
          "details" : {
            "description" : "Additional details to the user being edited",
            "$ref" : "#/definitions/User"
          },
          "user" : {
            "description" : "The object that can be altered and posted back to save the user\n",
            "$ref" : "#/definitions/UserEdit"
          },
          "confirmationPasswordInput" : {
            "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
            "$ref" : "#/definitions/PasswordInput"
          }
        }
      } ],
      "description" : "Contains data used to edit a user profile"
    },
    "UserDataForMap" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "mapDirectoryField" : {
            "type" : "string",
            "description" : "Internal name of the custom field currently set as primary search\nfilter for the user directory (map) search. When not returned (null)\nit is assumed that keywords should be the primary filter.\n"
          },
          "defaultMapLocation" : {
            "description" : "The default location for the map to be displayed",
            "$ref" : "#/definitions/GeographicalCoordinate"
          },
          "defaultMapZoomMobile" : {
            "type" : "integer",
            "description" : "The default map zoom level for mobile applications"
          },
          "defaultMapZoomWeb" : {
            "type" : "integer",
            "description" : "The default map zoom level for web applications"
          }
        }
      } ],
      "description" : "Contains configuration data for the user directory (map)"
    },
    "UserDataForNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "allowSetSendActivationEmail" : {
            "type" : "boolean",
            "description" : "Whether the current user is allowed to skip the activateion e-mail\n"
          },
          "generatedUsername" : {
            "type" : "boolean",
            "description" : "Indicates whether the login name is generated"
          },
          "addressConfiguration" : {
            "description" : "Configuration for registering addresses",
            "$ref" : "#/definitions/AddressConfigurationForUserProfile"
          },
          "phoneConfiguration" : {
            "description" : "Configuration for registering phones",
            "$ref" : "#/definitions/PhoneConfigurationForUserProfile"
          },
          "contactInfoConfiguration" : {
            "description" : "Configuration for registering additional contacts",
            "$ref" : "#/definitions/ContactInfoConfigurationForUserProfile"
          },
          "imageConfiguration" : {
            "description" : "Configuration for uploading images",
            "$ref" : "#/definitions/ImageConfigurationForUserProfile"
          },
          "passwordTypes" : {
            "type" : "array",
            "description" : "The password types that should be registered together with the user\n",
            "items" : {
              "$ref" : "#/definitions/PasswordTypeRegistration"
            }
          },
          "captchaType" : {
            "description" : "description: >\n  The captcha provider used to requested a captcha for registration,\n  or null if no captcha is needed.\nPossible values are:\n* internal: Default provider using images\n",
            "$ref" : "#/definitions/CaptchaProviderEnum"
          },
          "user" : {
            "description" : "The object that can be altered and posted back to register the user\n",
            "$ref" : "#/definitions/UserNew"
          },
          "agreements" : {
            "type" : "array",
            "description" : "The agreements that needs to be accepted by the user to be able to\nregister. Only returned for public registrations.\n",
            "items" : {
              "$ref" : "#/definitions/AgreementContent"
            }
          },
          "securityQuestions" : {
            "type" : "array",
            "description" : "If enabled in the server, are the possible security questions the\nuser can use to set the answer.\n",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          },
          "nfcTokenTypes" : {
            "type" : "array",
            "description" : "The NFC token types the authenticated user can parsonalize tags for the user being registered\n",
            "items" : {
              "$ref" : "#/definitions/EntityReference"
            }
          }
        }
      } ],
      "description" : "Contains data used to register a user"
    },
    "UserDataForSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseUserDataForSearch"
      }, {
        "type" : "object",
        "properties" : {
          "fieldsInList" : {
            "type" : "array",
            "description" : "The internal names of either basic or custom profile fields that are\nconfigured to be shown on the list. This actually defines the fields\nthat will be loaded on the result. It is possible that no fields are\nconfigured to be returned on list. In this case, the result objects\nwill have the 'display' property loaded with what is configured to\nbe the user formatting field(s). \n",
            "items" : {
              "type" : "string"
            }
          },
          "statuses" : {
            "type" : "array",
            "description" : "The possible user statuses the authenticated user can use to filter the search. Only administrators or brokers over their members can filter by status (also depends on permissions) Possibles values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
            "items" : {
              "$ref" : "#/definitions/UserStatusEnum"
            }
          },
          "groupsForRegistration" : {
            "type" : "array",
            "description" : "Possible groups an administrator or broker can use to register users\n",
            "items" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "query" : {
            "description" : "Default query filters to search users\n",
            "$ref" : "#/definitions/UserQueryFilters"
          }
        }
      } ],
      "description" : "Contains data with the configuration for searching users\n"
    },
    "UserEdit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserManage"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Contains data used to edit a user profile. Only the basic and custom\nprofile fields can be edited in this operation. Addresses, phones and\nimages are managed through separated paths.\n"
    },
    "UserManage" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The user's full name"
        },
        "username" : {
          "type" : "string",
          "description" : "The user's login name"
        },
        "email" : {
          "type" : "string",
          "description" : "The user's e-mail"
        },
        "customValues" : {
          "type" : "object",
          "description" : "Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use either the `GET /users/data-for-new` (when creating) or `GET /users/{user}/data-for-edit` (when modifying) a user, and lookup each field by either internal name. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "hiddenFields" : {
          "type" : "array",
          "description" : "An array with the internal names of either the basic or custom fields\nthat should be hidden from other users. Currently the only basic\nprofile field that can be hidden is email. Any other will be\nconsidered a custom field, and should be the same key as used in the\n'customValues' property.\n",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Contains the fields for either creating or modifying a user",
      "x-abstract" : true,
      "x-implements" : "IUser"
    },
    "UserMarketplacePermissions" : {
      "type" : "object",
      "properties" : {
        "viewAdvertisements" : {
          "type" : "boolean",
          "description" : "Can view simple advertisements?"
        },
        "manageAdvertisements" : {
          "type" : "boolean",
          "description" : "Can manage simple advertisements?"
        },
        "viewWebshop" : {
          "type" : "boolean",
          "description" : "Can view webshop advertisements?"
        },
        "manageWebshop" : {
          "type" : "boolean",
          "description" : "Can manage webshop advertisements?"
        },
        "viewPurchases" : {
          "type" : "boolean",
          "description" : "Can view the purchases?"
        },
        "viewSales" : {
          "type" : "boolean",
          "description" : "Can view the sales?"
        }
      },
      "description" : "Permissions over a user marketplace"
    },
    "UserNew" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserManage"
      }, {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "description" : "The initial user group"
          },
          "addresses" : {
            "type" : "array",
            "description" : "Addresses to be registered together with the user",
            "items" : {
              "$ref" : "#/definitions/AddressNew"
            }
          },
          "mobilePhones" : {
            "type" : "array",
            "description" : "Mobile phones to be registered together with the user",
            "items" : {
              "$ref" : "#/definitions/PhoneNew"
            }
          },
          "landLinePhones" : {
            "type" : "array",
            "description" : "Land-line phones to be registered together with the user",
            "items" : {
              "$ref" : "#/definitions/PhoneNew"
            }
          },
          "contactInfos" : {
            "type" : "array",
            "description" : "Additional contacts to be registered together with the user\n",
            "items" : {
              "$ref" : "#/definitions/ContactInfoNew"
            }
          },
          "passwords" : {
            "type" : "array",
            "description" : "The initial passwords of the user",
            "items" : {
              "$ref" : "#/definitions/PasswordRegistration"
            }
          },
          "images" : {
            "type" : "array",
            "description" : "The ids of previously uploaded user temporary images to be\ninitially used as profile images\n",
            "items" : {
              "type" : "string"
            }
          },
          "captcha" : {
            "description" : "The captcha response is required on public registrations, and ignored when administrators / brokers register another user.",
            "$ref" : "#/definitions/CaptchaResponse"
          },
          "acceptAgreement" : {
            "type" : "boolean",
            "description" : "When there are agreements that need to be accepted for registration, this property must be passed with the value true"
          },
          "skipActivationEmail" : {
            "type" : "boolean",
            "description" : "When set to true, the activation e-mail is not sent to the registered user. Can only be used when an administrator / broker is registering a user, and ignored on public registrations (the e-mail is always sent on public registrations)."
          },
          "asMember" : {
            "type" : "boolean",
            "description" : "Flag required only when the authenticated user is a broker, \nin that case we need to distingish between registering as member or\nbroker. If true then the new user will be registered without a\nbrokering relationship. Otherwise the authenticated user will be set\nas the broker of the new user.          \n"
          },
          "securityQuestion" : {
            "type" : "string",
            "description" : "If the server is configured to use security question, is the `internalName` of the question present in the result of `data-for-new`, in the `securityQuestions` property. Is optional and only used in public registration.          \n"
          },
          "securityAnswer" : {
            "type" : "string",
            "description" : "If a `securityQuestion` is informed, this is the answer. Required in this case. Only used in public registration.\n"
          },
          "nfcToken" : {
            "description" : "If not null then the given NFC token parameters will be used to personalize a tag for the user.",
            "$ref" : "#/definitions/NfcTokenWithChallengeParameter"
          }
        }
      } ],
      "description" : "Contains data used to register a user. All basic profile fields (full\nname, login name, e-mail, phones, addresses and image) can be enabled or\ndisabled on Cyclos, via products. Also, the available custom fields and\nwhether they can be hidden depend on the products the selected group has.\n"
    },
    "UserOperatorsDataForSearch" : {
      "type" : "object",
      "properties" : {
        "canCreateNew" : {
          "type" : "boolean",
          "description" : "Indicates whether the authenticated user can create more operators \nfor the specified user\n"
        },
        "groups" : {
          "type" : "array",
          "description" : "The operator groups this user owns",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "fieldsInList" : {
          "type" : "array",
          "description" : "The internal names of either basic or custom profile fields that are\nconfigured to be shown on the list. This actually defines the fields\nthat will be loaded on the result. It is possible that no fields are\nconfigured to be returned on list. In this case, the result objects\nwill have the 'display' property loaded with what is configured to\nbe the user formatting field(s). \n",
          "items" : {
            "type" : "string"
          }
        },
        "basicFields" : {
          "type" : "array",
          "description" : "The basic profile fields in the result list",
          "items" : {
            "$ref" : "#/definitions/BasicProfileFieldInput"
          }
        },
        "customFields" : {
          "type" : "array",
          "description" : "The custom profile fields in the result list",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "query" : {
          "description" : "Default query filters to search a user's operators\n",
          "$ref" : "#/definitions/UserOperatorsQueryFilters"
        }
      }
    },
    "UserOperatorsQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicOperatorQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "ignoreProfileFieldsInList" : {
            "type" : "boolean",
            "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n"
          },
          "operatorGroups" : {
            "type" : "array",
            "description" : "An array of operator group ids",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Definitions for a user's operators search filters"
    },
    "UserOrderResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/OrderResult"
      }, {
        "type" : "object",
        "properties" : {
          "relatedUser" : {
            "description" : "The other related user,  i.e if we're listing the sales of a user then it represents the buyer. Otherwise (purchases) the seller.",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Data of an order as returned on list associated to an user."
    },
    "UserPaymentPermissions" : {
      "type" : "object",
      "properties" : {
        "asUserToSelf" : {
          "type" : "boolean",
          "description" : "Can the authenticated administrator or broker perform a payment in\nbehalf of this user to another account belonging to the same user? \n"
        },
        "asUserToSystem" : {
          "type" : "boolean",
          "description" : "Can the authenticated administrator or broker perform a payment in\nbehalf of this user to a system account? \n"
        },
        "asUserToUser" : {
          "type" : "boolean",
          "description" : "Can the authenticated administrator or broker perform a payment in\nbehalf of this user to another user? \n"
        },
        "systemToUser" : {
          "type" : "boolean",
          "description" : "Can the authenticated administrator perform a payment from a system\naccount to this user? \n"
        },
        "userToUser" : {
          "type" : "boolean",
          "description" : "Can the authenticated member perform a payment from an himself to\nthis user? \n"
        }
      },
      "description" : "Permissions for payments regarding a user"
    },
    "UserPermissions" : {
      "type" : "object",
      "properties" : {
        "profile" : {
          "description" : "Permissions over the user profile",
          "$ref" : "#/definitions/UserProfilePermissions"
        },
        "contact" : {
          "description" : "Permissions over a contact",
          "$ref" : "#/definitions/UserContactPermissions"
        },
        "marketplace" : {
          "description" : "Permissions over the user marketplace",
          "$ref" : "#/definitions/UserMarketplacePermissions"
        },
        "accounts" : {
          "type" : "array",
          "description" : "Accounts which can be viewed by the authenticated user",
          "items" : {
            "$ref" : "#/definitions/AccountWithCurrency"
          }
        },
        "payment" : {
          "description" : "Permissions for payments regarding this user",
          "$ref" : "#/definitions/UserPaymentPermissions"
        },
        "records" : {
          "type" : "array",
          "description" : "Records types the authenticated user can view over the given user\n",
          "items" : {
            "$ref" : "#/definitions/OwnerRecordPermissions"
          }
        },
        "operations" : {
          "type" : "array",
          "description" : "Custom operations the authenticated user can run over the given user\n",
          "items" : {
            "$ref" : "#/definitions/Operation"
          }
        },
        "tokens" : {
          "type" : "array",
          "description" : "Tokens the authenticated user can view over the given user\n",
          "items" : {
            "$ref" : "#/definitions/TokenType"
          }
        },
        "personalizeNfcTokens" : {
          "type" : "array",
          "description" : "NFC tokens the authenticated user can personalize for the given user\n",
          "items" : {
            "$ref" : "#/definitions/TokenType"
          }
        }
      },
      "description" : "Determines permission the authenticated have over a specific user"
    },
    "UserPhonesListData" : {
      "type" : "object",
      "properties" : {
        "canManage" : {
          "type" : "boolean",
          "description" : "Can the authenticated user manage phones of this user?"
        },
        "canCreateLandLine" : {
          "type" : "boolean",
          "description" : "Can the authenticated user create new land-line phones for this user?\n"
        },
        "canCreateMobile" : {
          "type" : "boolean",
          "description" : "Can the authenticated user create new mobile phones for this user?\n"
        },
        "smsEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether outbound SMS is enabled in Cyclos"
        },
        "canVerify" : {
          "type" : "boolean",
          "description" : "Can the authenticated user verify mobile phones of this user?\n"
        },
        "canEnableForSms" : {
          "type" : "boolean",
          "description" : "Can the authenticated user enable / disable mobile phones of this\nuser to send / receive SMS?\n"
        },
        "maxMobilePhones" : {
          "type" : "integer",
          "description" : "Indicates the maximum number of mobile phones this user can have. Is only returned when `canManage` is `true`.\n"
        },
        "maxLandLinePhones" : {
          "type" : "integer",
          "description" : "Indicates the maximum number of land line (fixed) phones this user can have. Is only returned when `canManage` is `true`.\n"
        },
        "landLineAvailability" : {
          "description" : "The availability for land-line phones Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "mobileAvailability" : {
          "description" : "The availability for mobile phones Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "phones" : {
          "type" : "array",
          "description" : "The list of (visible) phones",
          "items" : {
            "$ref" : "#/definitions/PhoneResult"
          }
        }
      },
      "description" : "Contains information for a list of phones"
    },
    "UserProfilePermissions" : {
      "type" : "object",
      "properties" : {
        "editProfile" : {
          "type" : "boolean",
          "description" : "Can edit the user profile?"
        },
        "manageAddresses" : {
          "type" : "boolean",
          "description" : "Can manage addresses?"
        },
        "manageAddressesPrivacy" : {
          "type" : "boolean",
          "description" : "Can manage the addresses privacy?"
        },
        "managePhones" : {
          "type" : "boolean",
          "description" : "Can manage phones?"
        },
        "managePhonesPrivacy" : {
          "type" : "boolean",
          "description" : "Can manage the phones privacy?"
        },
        "manageImages" : {
          "type" : "boolean",
          "description" : "Can manage profile images?"
        },
        "manageContactInfos" : {
          "type" : "boolean",
          "description" : "Can manage additional contact informations?"
        },
        "canCreateAddress" : {
          "type" : "boolean",
          "description" : "Will be true if the authenticated user can manage addresses and the user for which we are viewing its profile \nhas not reached the maximum allowed addresses.\nOnly if `manageAddresses` is true        \n"
        },
        "canCreateLandLine" : {
          "type" : "boolean",
          "description" : "Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile \nhas not reached the maximum allowed landline phones.\nOnly if `managePhones` is true\n"
        },
        "canCreateMobile" : {
          "type" : "boolean",
          "description" : "Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile \nhas not reached the maximum allowed mobile phones.\nOnly if `managePhones` is true        \n"
        },
        "canCreateImage" : {
          "type" : "boolean",
          "description" : "Will be true if the authenticated user can manage images and the user for whom we are viewing its profile \nhas not reached the maximum allowed profile images.\nOnly if `manageImages` is true        \n"
        },
        "canCreateContactInfo" : {
          "type" : "boolean",
          "description" : "Will be true if the authenticated user can manage additional contact informations and the user for whom we are \nviewing its profile has not reached the maximum allowed additional contact informations.\nOnly if `manageContactInfos` is true\n"
        },
        "maxAddresses" : {
          "type" : "integer",
          "description" : "The maximum number of addresses the user can own. Only if `manageAddresses` is true \n"
        },
        "maxMobiles" : {
          "type" : "integer",
          "description" : "The maximum number of mobile phones the user can own. Only if `managePhones` is true.\n"
        },
        "maxLandLines" : {
          "type" : "integer",
          "description" : "The maximum number of land-line phones the user can own. Only if `managePhones` is true.\n"
        },
        "maxImages" : {
          "type" : "integer",
          "description" : "The maximum number of profile images  the user can own. Only if `manageImages` is true.\n"
        },
        "maxContactInfos" : {
          "type" : "integer",
          "description" : "The maximum number of additional contacts the user can own.\n Only if `manageContactInfos` is true.\n"
        },
        "addressAvailability" : {
          "description" : "The availability for addresses. Only if `manageAddresses` is true Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "mobileAvailability" : {
          "description" : "The availability for mobile phones Only if `managePhones` is true Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "landLineAvailability" : {
          "description" : "The availability for land-line phones Only if `managePhones` is true Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "profileImageAvailability" : {
          "description" : "The availability for profile images Only if `manageImages` is true       Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        },
        "contactInfoAvailability" : {
          "description" : "The availability for additional contacts Only if `manageContactInfos` is true Possible values are:\n* disabled: The data is disabled\n* optional: The data is enabled and optional\n* required: The data is enabled and required\n",
          "$ref" : "#/definitions/AvailabilityEnum"
        }
      },
      "description" : "Permissions over a user profile"
    },
    "UserQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicUserQueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "ignoreProfileFieldsInList" : {
            "type" : "boolean",
            "description" : "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`. \n"
          },
          "excludeContacts" : {
            "type" : "boolean",
            "description" : "When set to `true` will not return any user that is already a contact of the currently authenticated user.\n"
          },
          "statuses" : {
            "type" : "array",
            "description" : "The possible statuses for an user Possibles values for each array element are:\n* active: The user is active and can use the system normally.\n* blocked: The user has been blocked from accessing the system. Other users still see him/her.\n* disabled: The user has been disabled - he/she cannot access the system and is invisible by other users.\n* pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.\n* purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.\n* removed: The user was permanently removed. It's profile is kept for historical purposes.\n",
            "items" : {
              "$ref" : "#/definitions/UserStatusEnum"
            }
          },
          "roles" : {
            "type" : "array",
            "description" : "The main role the user has. Possibles values for each array element are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
            "items" : {
              "$ref" : "#/definitions/RoleEnum"
            }
          },
          "orderBy" : {
            "description" : "Possible options for ordering the results of an user search. Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* creationDate: Newly registered users are returned first.\n* distance: Only useful when providing a location, will return nearer advertisements first.\n* random: Users will be randomly returned\n* relevance: This is the default if keywords are used. Best matching users come first.\n",
            "$ref" : "#/definitions/UserOrderByEnum"
          }
        }
      } ],
      "description" : "Parameters for searching users"
    },
    "UserRegistrationPrincipal" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "The principal value"
        },
        "type" : {
          "description" : "The principal type",
          "$ref" : "#/definitions/PrincipalType"
        },
        "channels" : {
          "type" : "array",
          "description" : "The channels that can be accessed using this principal",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        }
      },
      "description" : "Contains information about a principal (user identification) and\nthe channels that can be accessed using it\n"
    },
    "UserRegistrationResult" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "description" : "The user that has just been registered",
          "$ref" : "#/definitions/User"
        },
        "status" : {
          "description" : "The status of the user after the registration Possible values are:\n* active: The user is initially active\n* emailValidation: The user has received an e-mail, with a link to verify the e-mail address. Once verified, the registration will be complete\n* inactive: The user is initially inactive, and an administrator needs to manually activate the user\n",
          "$ref" : "#/definitions/UserRegistrationStatusEnum"
        },
        "generatedPasswords" : {
          "type" : "array",
          "description" : "The types of passwords that were generated",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "rootUrl" : {
          "type" : "string",
          "description" : "The root URL that can be used to access the web interface"
        },
        "principals" : {
          "type" : "array",
          "description" : "Contains information about each user principal (identification) and\nthe channels that can be accessed using it\n",
          "items" : {
            "$ref" : "#/definitions/UserRegistrationPrincipal"
          }
        }
      },
      "description" : "Result of a user registration"
    },
    "UserResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/User"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The user's full name"
          },
          "username" : {
            "type" : "string",
            "description" : "The user's login name"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's e-mail"
          },
          "address" : {
            "description" : "Address to be placed on map. Is only returned when the search result type is `map`.\n",
            "$ref" : "#/definitions/Address"
          },
          "distance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Only returned when there is a base location to calculate the\ndistance from. The unit (kilometers or miles) depends on\nconfiguration.\n"
          },
          "customValues" : {
            "type" : "object",
            "description" : "Holds the values for custom fields, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`\n",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "phone" : {
            "type" : "string",
            "description" : "First phone number, used when phone is marked on products to\nbe returned on user list\n"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "First account number, used when account number is marked on products\nto be returned on user list\n"
          },
          "group" : {
            "description" : "The user group. Only returned when the `includeGroup` parameter is\nset to `true` and the current user can see other users' groups.\n",
            "$ref" : "#/definitions/EntityReference"
          },
          "groupSet" : {
            "description" : "The user group. Only returned when the `includeGroupSet` parameter\nis set to `true` and the current user can see other users' group set.\n",
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "x-implements" : "IUser"
      } ],
      "description" : "Data returned from user search",
      "x-implements" : "IUser"
    },
    "UserView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/User"
      }, {
        "type" : "object",
        "properties" : {
          "role" : {
            "description" : "The main role the user has. Possible values are:\n* administrator: A user who can manage the system and other users.\n* broker: A user who can manage other users.\n* member: A regular user who can manage operators. \n* operator: A \"sub-user\" created by a member to manage his data.\n",
            "$ref" : "#/definitions/RoleEnum"
          },
          "name" : {
            "type" : "string",
            "description" : "The user's full name"
          },
          "username" : {
            "type" : "string",
            "description" : "The user's login name"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's e-mail"
          },
          "customValues" : {
            "type" : "array",
            "description" : "The list of custom field values this user has",
            "items" : {
              "$ref" : "#/definitions/UserCustomFieldValue"
            }
          },
          "group" : {
            "description" : "Reference to the user group. Is only returned if the authenticated\nuser has permission to see groups \n",
            "$ref" : "#/definitions/EntityReference"
          },
          "groupSet" : {
            "description" : "Reference to the user group set. Is only returned if the\nauthenticated user has permission to see group sets and the user\ngroup is in a group set \n",
            "$ref" : "#/definitions/EntityReference"
          },
          "additionalImages" : {
            "type" : "array",
            "description" : "Holds the images other than the primary image, which is returned in the `image` field\n",
            "items" : {
              "$ref" : "#/definitions/Image"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "Visible addresses",
            "items" : {
              "$ref" : "#/definitions/AddressView"
            }
          },
          "phones" : {
            "type" : "array",
            "description" : "Visible phones",
            "items" : {
              "$ref" : "#/definitions/PhoneView"
            }
          },
          "contactInfos" : {
            "type" : "array",
            "description" : "Visible additional contact information",
            "items" : {
              "$ref" : "#/definitions/ContactInfoDetailed"
            }
          },
          "contact" : {
            "description" : "When this user is in the contact list of the currently logged user,\nreturns data about the contact relation. When not returned, this\nuser is no in the logged user's contact list.\n",
            "$ref" : "#/definitions/ContactView"
          },
          "registrationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the user was registered.\nOnly returned if the logged user manages the given used.\n"
          },
          "activationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the user was made active the first time.\nOnly returned if the logged user manages the given used.\n"
          },
          "online" : {
            "type" : "boolean",
            "description" : "Indicates whether the given user is logged-in to the system.\nOnly returned if the logged user manages the given used.\n"
          },
          "lastLogin" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The last time the user logged in, or null if never logged in.\nOnly returned if the logged user manages the given used.\n"
          },
          "firstLogin" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The first time the user logged in, or null if never logged in.\nOnly returned if the logged user manages the given used.\n"
          },
          "permissions" : {
            "description" : "Permissions the authenticated has over this user",
            "$ref" : "#/definitions/UserPermissions"
          },
          "brokers" : {
            "type" : "array",
            "description" : "Visible brokers",
            "items" : {
              "$ref" : "#/definitions/BrokerView"
            }
          }
        },
        "x-implements" : "IUser"
      } ],
      "description" : "Represents a user with all data for viewing the profile",
      "x-implements" : "IUser"
    },
    "UserVouchersDataForSearch" : {
      "type" : "object",
      "properties" : {
        "mask" : {
          "type" : "string",
          "description" : "The input mask for voucher tokens. Optional."
        },
        "types" : {
          "type" : "array",
          "description" : "The voucher types that can be used for searching",
          "items" : {
            "$ref" : "#/definitions/EntityReference"
          }
        },
        "query" : {
          "description" : "Default query filters for searching this user's vouchers\n",
          "$ref" : "#/definitions/UserVouchersQueryFilters"
        }
      },
      "description" : "Contains configuration data for searching vouchers of a user\n"
    },
    "UserVouchersQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/QueryFilters"
      }, {
        "type" : "object",
        "properties" : {
          "amountRange" : {
            "type" : "array",
            "description" : "The minimum / maximum voucher amount\n",
            "items" : {
              "type" : "string",
              "format" : "number"
            }
          },
          "creationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum voucher creation date.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "expirationPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum voucher expiration date\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "redeemPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum voucher redeem date\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "token" : {
            "type" : "string",
            "description" : "The voucher token (with or without mask)"
          },
          "types" : {
            "type" : "array",
            "description" : "The ids or internal names of voucher types",
            "items" : {
              "type" : "string"
            }
          },
          "statuses" : {
            "type" : "array",
            "description" : "The voucher statuses Possibles values for each array element are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
            "items" : {
              "$ref" : "#/definitions/VoucherStatusEnum"
            }
          },
          "relation" : {
            "description" : "Indicates the relation used to filter the vouchers. Possible values are:\n* bought: A voucher the user has bought\n* redeemed: A voucher the user has redeemed\n",
            "$ref" : "#/definitions/VoucherRelationEnum"
          }
        }
      } ],
      "description" : "Definitions for searching vouchers of a user"
    },
    "UserWithBalanceResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/UserResult"
      }, {
        "type" : "object",
        "properties" : {
          "balance" : {
            "type" : "string",
            "format" : "number",
            "description" : "The raw account balance"
          },
          "balanceLevel" : {
            "description" : "Contains the possible balance levels on the users with balances search  Possible values are:\n* high: High balance, above the medium balance range upper bound\n* low: Low balance, below the medium balance range lower bound\n* medium: Medium balance, between the lower and upper bounds of the medium balance range\n",
            "$ref" : "#/definitions/BalanceLevelEnum"
          },
          "negativeSince" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date since the account has been negative"
          }
        }
      } ],
      "description" : "Result of a user search with balance\n"
    },
    "UsersPermissions" : {
      "type" : "object",
      "properties" : {
        "search" : {
          "type" : "boolean",
          "description" : "Permission to search other users"
        },
        "viewProfile" : {
          "type" : "boolean",
          "description" : "General permission to view the profile of other users. A fine-grained\npermission over specific groups can be configured. When attempting to\nview the profile of a user without permission, only very basic\ninformation is returned instead.\n"
        },
        "map" : {
          "type" : "boolean",
          "description" : "Permission to view the user map directory"
        },
        "contacts" : {
          "type" : "boolean",
          "description" : "(Deprecated) Permission to own a contact list.\nOnly returned if there is an authenticated user.\n",
          "x-deprecated" : "Use `ContactsPermissions.enable` instead",
          "x-remove-version" : 4.12
        }
      },
      "description" : "Permissions over other users"
    },
    "UsersWithBalanceQueryFilters" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicUserQueryFilters"
      }, {
        "type" : "object",
        "required" : [ "accountType" ],
        "properties" : {
          "accountType" : {
            "type" : "string",
            "description" : "The account type",
            "x-in" : "path"
          },
          "balanceRange" : {
            "type" : "array",
            "description" : "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.\n",
            "items" : {
              "type" : "integer"
            }
          },
          "lastIncomingTransferPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum date of the last incoming transfer for users to be returned.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "lastOutgoingTransferPeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum date of the last outgoing transfer for users to be returned.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "negativeSincePeriod" : {
            "type" : "array",
            "description" : "The minimum / maximum negative-since date for users to be returned.\nIs expressed an array, with the lower bound as first element, and\nthe upper bound as second element. When only one element, will have\njust the lower bound. To specify only the upper bound, prefix the value\nwith a comma.\n",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "mediumBalanceRange" : {
            "type" : "array",
            "description" : "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered.\n",
            "items" : {
              "type" : "integer"
            }
          },
          "orderBy" : {
            "description" : "Contains the possible 'order by' values when searching for users with balances  Possible values are:\n* alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order.\n* alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order.\n* balanceAsc: User are ordered by balance, lower balances first.\n* balanceDesc: User are ordered by balance, higher balances first.\n",
            "$ref" : "#/definitions/UsersWithBalanceOrderByEnum"
          }
        }
      } ],
      "description" : "Parameters for searching users with their balances"
    },
    "UsersWithBalanceSummary" : {
      "type" : "object",
      "properties" : {
        "low" : {
          "description" : "Summary of low balances. Is only returned when a medium balance range\nis defined, either in the account type or in the query parameters. \n",
          "$ref" : "#/definitions/AmountSummary"
        },
        "medium" : {
          "description" : "Summary of medium balances. Is only returned when a medium balance\nrange is defined, either in the account type or in the query\nparameters. \n",
          "$ref" : "#/definitions/AmountSummary"
        },
        "high" : {
          "description" : "Summary of high balances. Is only returned when a medium balance\nrange is defined, either in the account type or in the query\nparameters. \n",
          "$ref" : "#/definitions/AmountSummary"
        },
        "total" : {
          "description" : "Summary of all balances. \n",
          "$ref" : "#/definitions/AmountSummary"
        }
      },
      "description" : "Contains summarized information about balances per range, plus the total\n"
    },
    "VersionedEntity" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Basic definition of a persistent entity which has a version"
    },
    "VersionedEntityReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "description" : "The version stamp for the current object, used for optimistic locking.\nWhen saving, the same version as previously received needs to be passed\nback. If no one else has saved the object, the version will match and\nthe object will be updated. However, if someone other has saved the\nobject, the version will no longer match, and an error will be raised.\nThis is used to prevent multiple users (or processes) from updating the\nsame object and unwilingly overridding the property values, leading to\ndata loss.\n"
          }
        }
      } ],
      "description" : "Represents an entity that is being referenced from another one,\nwithout caring about the type of the referenced entity.\nAlso carries on the entity version\n",
      "x-final" : true
    },
    "Voucher" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Entity"
      }, {
        "type" : "object",
        "properties" : {
          "status" : {
            "description" : "The voucher statuses Possible values are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
            "$ref" : "#/definitions/VoucherStatusEnum"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The voucher amount"
          },
          "token" : {
            "type" : "string",
            "description" : "The voucher token"
          }
        }
      } ],
      "description" : "A voucher is a token which can be used to buy at places that accept\npayments in Cyclos. Even users which are not members can get a printed\ntoken (or scratch card, ticket, etc) and buy in such places.\n"
    },
    "VoucherBasicData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The voucher type",
          "$ref" : "#/definitions/VoucherTypeDetailed"
        },
        "customFields" : {
          "type" : "array",
          "description" : "The custom fields associated with this voucher type\n",
          "items" : {
            "$ref" : "#/definitions/CustomFieldDetailed"
          }
        },
        "confirmationPasswordInput" : {
          "description" : "If a confirmation password is used, contains the definitions on how\nto request that password from the user. This confirmation password\nis required when performing sensible actions. Sometimes this is dynamic,\nfor example, the confirmation might be configured to be used only once\nper session, or operations like payments may have a limit per day to be\nwithout confirmation (pinless).\n",
          "$ref" : "#/definitions/PasswordInput"
        }
      },
      "description" : "Contains common data for either buying or redeeming a voucher"
    },
    "VoucherBoughtResult" : {
      "type" : "object",
      "properties" : {
        "vouchers" : {
          "type" : "array",
          "description" : "The identifiers of all bought vouchers.",
          "items" : {
            "type" : "string"
          }
        },
        "voucherStatus" : {
          "description" : "The status of all bought vouchers. Possible values are:\n* canceled: The voucher was canceled, and cannot be further used\n* expired: The voucher has expired without being redeemed\n* open: The voucher has been generated / bought, and is open\n* pending: The voucher has been bought, and the corresponding payment is pending for authorization\n* redeemed: The voucher has been redeemed, and the corresponding payment was done\n",
          "$ref" : "#/definitions/VoucherStatusEnum"
        }
      },
      "description" : "Result of buying vouchers"
    },
    "VoucherConfiguration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "currency" : {
            "description" : "The voucher currency",
            "$ref" : "#/definitions/Currency"
          }
        }
      } ],
      "description" : "Reference to a voucher configuration"
    },
    "VoucherDataForBuy" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VoucherBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "account" : {
            "description" : "The account from which the buy will be debited",
            "$ref" : "#/definitions/AccountWithStatus"
          },
          "canBuyMultiple" : {
            "type" : "boolean",
            "description" : "If user can buy multiple vouchers at same time"
          },
          "fixedAmount" : {
            "type" : "string",
            "format" : "number",
            "description" : "Returned if there is a fixed amount for bought vouchers.\nIs kept for backwards compatibility, because the `amountRange`\nis enough to return this information (when `min` and `max` are\nthe same amount)\n"
          },
          "amountRange" : {
            "description" : "Returned if there is a minimum / maximum amount for buying\n",
            "$ref" : "#/definitions/DecimalRange"
          },
          "minimumTimeToRedeem" : {
            "description" : "Returned if there is a minimum time to be elapsed before\nbought vouchers can be redeemed\n",
            "$ref" : "#/definitions/TimeInterval"
          }
        }
      } ],
      "description" : "Data used to buy a voucher"
    },
    "VoucherDataForRedeem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VoucherBasicData"
      }, {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "The formatted voucher token"
          },
          "amount" : {
            "type" : "string",
            "format" : "number",
            "description" : "The voucher amount"
          },
          "buyer" : {
            "description" : "The voucher buyer, if any and visible",
            "$ref" : "#/definitions/User"
          }
        }
      } ],
      "description" : "Data used to redeem a voucher"
    },
    "VoucherInitialDataForRedeem" : {
      "type" : "object",
      "properties" : {
        "mask" : {
          "type" : "string",
          "description" : "The voucher token mask"
        }
      },
      "description" : "Initial data used to redeem vouchers"
    },
    "VoucherRedeemResult" : {
      "type" : "object",
      "properties" : {
        "voucherId" : {
          "type" : "string",
          "description" : "The voucher identifier"
        },
        "paymentId" : {
          "type" : "string",
          "description" : "The generated payment identifier"
        }
      },
      "description" : "Result when redeeming a voucher"
    },
    "VoucherResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Voucher"
      }, {
        "type" : "object",
        "properties" : {
          "buyer" : {
            "description" : "The voucher buyer. Is not returned when the voucher was generated\nor when searching for bought vouchers of a user.\n",
            "$ref" : "#/definitions/User"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date a voucher was generated or bought"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date a voucher expires"
          },
          "redeemer" : {
            "description" : "The voucher redeemer. Is not returned when the voucher was not yet\nredeemed or when searching for redeemed vouchers of a user.\n",
            "$ref" : "#/definitions/User"
          },
          "redeemDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date a voucher was redeemed (if so)"
          },
          "redeemAfterDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date after which the voucher can be redeemed. Is only returned\nif the voucher `status` is `open`.\n"
          },
          "redeemOnWeekDays" : {
            "type" : "array",
            "description" : "The days of the week a voucher can be redeemed. Is only returned if the voucher `status` is `open`. Possibles values for each array element are:\n* fri: Friday\n* mon: Monday\n* sat: Saturday\n* sun: Sunday\n* thu: Thursday\n* tue: Tuesday\n* wed: Wednesday\n",
            "items" : {
              "$ref" : "#/definitions/WeekDayEnum"
            }
          },
          "type" : {
            "description" : "The voucher type",
            "$ref" : "#/definitions/VoucherType"
          }
        }
      } ],
      "description" : "Result of a voucher search\n"
    },
    "VoucherType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InternalNamedEntity"
      }, {
        "type" : "object",
        "properties" : {
          "configuration" : {
            "description" : "The voucher configuration",
            "$ref" : "#/definitions/VoucherConfiguration"
          },
          "image" : {
            "description" : "The voucher type image",
            "$ref" : "#/definitions/Image"
          }
        }
      } ],
      "description" : "Reference to a voucher type"
    },
    "VoucherTypeDetailed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VoucherType"
      }, {
        "type" : "object",
        "properties" : {
          "voucherTitle" : {
            "type" : "string",
            "description" : "The voucher title"
          },
          "voucherDescription" : {
            "type" : "string",
            "description" : "The voucher description"
          }
        }
      } ],
      "description" : "Reference to a voucher type and add extra information."
    },
    "VoucherView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/VoucherResult"
      }, {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The voucher title when it was created."
          },
          "description" : {
            "type" : "string",
            "description" : "The voucher description when it was created."
          },
          "creationType" : {
            "description" : "Indicates how a voucher was created Possible values are:\n* bought: The voucher was bought by an user\n* generated: The voucher was generated by an administrator\n",
            "$ref" : "#/definitions/VoucherCreationTypeEnum"
          },
          "buy" : {
            "description" : "The transaction which bought this voucher, if any and visible.\n",
            "$ref" : "#/definitions/Transaction"
          },
          "redeemDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the voucher was redeemer, if any."
          },
          "redeem" : {
            "description" : "The transaction which redeemed this voucher, if any and visible.\n",
            "$ref" : "#/definitions/Transaction"
          },
          "canCancel" : {
            "type" : "boolean",
            "description" : "(Deprecated) Can the authenticated user cancel this voucher?",
            "x-deprecated" : "This is redundant with `cancelAction`, is `false` if `cancelAction` is `null`, and `true` if `cancelAction` is not `null`.\n",
            "x-remove-version" : 4.13
          },
          "cancelAction" : {
            "description" : "Indicates what happens if a voucher is canceled, if it can be canceled Possible values are:\n* cancelAndRefund: A single bought voucher is canceled and the amount is refunded\n* cancelGenerated: Cancels a single generated voucher\n* cancelPendingPack: Cancels more than one bought vouchers whose buy payment is pending authorization\n* cancelPendingSingle: Cancels a single bought vouchers whose buy payment is pending authorization\n",
            "$ref" : "#/definitions/VoucherCancelActionEnum"
          },
          "showConfiguration" : {
            "type" : "boolean",
            "description" : "Should the voucher configuration be shown to users? This flag is `true` when there are multiple available configurations.\n"
          },
          "showQrCode" : {
            "type" : "boolean",
            "description" : "Should the voucher token be shown as QR-code for users?"
          },
          "redeemAfterDateReached" : {
            "type" : "boolean",
            "description" : "Should the voucher be available to be redeemed?"
          }
        }
      } ],
      "description" : "Details of a voucher\n"
    },
    "WebshopAd" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAdDetailed"
      }, {
        "type" : "object",
        "properties" : {
          "allowDecimalQuantity" : {
            "type" : "boolean",
            "description" : "Indicates if the webshop ad allow enter a decimal value for the  quantity.\n"
          },
          "minAllowedInCart" : {
            "type" : "string",
            "format" : "number",
            "description" : "The minimum quantity allowed to be added in the shopping cart.\n"
          },
          "maxAllowedInCart" : {
            "type" : "string",
            "format" : "number",
            "description" : "The maximum quantity allowed to be added in the shopping cart. \n"
          },
          "stockQuantity" : {
            "type" : "string",
            "format" : "number",
            "description" : "The stock disponibility. Only if `unlimitedStock` is false and the  'Stock type' was not marked as 'Not available' (through the web  interface).\n"
          },
          "unlimitedStock" : {
            "type" : "boolean",
            "description" : "If true then it means there is always disponibility of the webshop ad."
          },
          "productNumber" : {
            "type" : "string",
            "description" : "The number assigned to the webshop ad."
          }
        }
      } ],
      "description" : "An Ad with its status information."
    }
  },
  "parameters" : {
    "page" : {
      "name" : "page",
      "in" : "query",
      "description" : "The page number (zero-based) of the search. The default value is zero.\n",
      "required" : false,
      "type" : "integer"
    },
    "pageSize" : {
      "name" : "pageSize",
      "in" : "query",
      "description" : "The maximum number of records that will be returned on the search.\nThe default value is 40.\n",
      "required" : false,
      "type" : "integer"
    },
    "keywords" : {
      "name" : "keywords",
      "in" : "query",
      "description" : "Textual search keywords. Sometimes, like in user search, the fields\nmatched depends on what is configured on the products.\n",
      "required" : false,
      "type" : "string"
    },
    "fields" : {
      "name" : "fields",
      "in" : "query",
      "description" : "Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`). \n",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "customFields" : {
      "name" : "customFields",
      "in" : "query",
      "description" : "Custom field values. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either bronze or silver, and whose `birthDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=birthDate:|2001-12-31`.      \n",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "user" : {
      "name" : "user",
      "in" : "path",
      "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user.\n",
      "required" : true,
      "type" : "string",
      "x-dotInPath" : true
    },
    "userNoSelf" : {
      "name" : "user",
      "in" : "path",
      "description" : "A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`; \n",
      "required" : true,
      "type" : "string",
      "x-dotInPath" : true
    },
    "owner" : {
      "name" : "owner",
      "in" : "path",
      "description" : "Can be one of:\n* a user identification value, such as id, username, e-mail, phone, etc.\n  Id is always allowed, others depend on Cyclos configuration. Note that\n  a valid numeric value is always considered as id. For example, when\n  using another identification method that can be numeric only, prefix\n  the value with a single quote (like in Excel spreadsheets), for\n  example, `'1234567890`;\n   \n* `self` for the currently authenticated user;\n* `system` for data that belongs to the system.\n",
      "required" : true,
      "type" : "string",
      "x-dotInPath" : true
    },
    "id" : {
      "name" : "id",
      "in" : "path",
      "description" : "The object identification",
      "required" : true,
      "type" : "string"
    },
    "order" : {
      "name" : "order",
      "in" : "path",
      "description" : "Either the order id or number. If the number is solely comprised of numbers, it must be prefixed by a single quote.\n",
      "required" : true,
      "type" : "string",
      "x-dotInPath" : true
    },
    "ad" : {
      "name" : "ad",
      "in" : "path",
      "description" : "Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.     \n",
      "required" : true,
      "type" : "string",
      "x-dotInPath" : true
    },
    "confirmationPassword" : {
      "name" : "confirmationPassword",
      "in" : "header",
      "description" : "The password used to confirm this action, if needed. The actual\npassword type, if any, depends on the Cyclos configuration for the\ncurrent channel.\n",
      "required" : false,
      "type" : "string"
    },
    "cyclosVersion" : {
      "name" : "cyclosVersion",
      "in" : "query",
      "description" : "The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases\n",
      "required" : false,
      "type" : "string"
    },
    "headerIf" : {
      "name" : "headerIf",
      "in" : "query",
      "description" : "Controls the header cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
      "required" : false,
      "type" : "string"
    },
    "footerIf" : {
      "name" : "footerIf",
      "in" : "query",
      "description" : "Controls the footer cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
      "required" : false,
      "type" : "string"
    },
    "themeIf" : {
      "name" : "themeIf",
      "in" : "query",
      "description" : "Controls the theme cache. If is a boolean value (`true` or `false`) will forcibly return or skip the content. Otherwise, it should be a string in the form `id|version`. In this case, the content will be returned only when changed. When blank will always return it.\n",
      "required" : false,
      "type" : "string"
    },
    "themeByComponents" : {
      "name" : "themeByComponents",
      "in" : "query",
      "description" : "Flag used to indicate how the theme must be returned (if returned): true means the theme components (base / advanced definitions and custom style) will be filled. Otherwise the final CSS (i. e the theme content). Only valid if the kind of the user interface is NOT `mobile`. For that kind the theme es always returned by its components.\n",
      "required" : false,
      "type" : "boolean"
    }
  }
}
